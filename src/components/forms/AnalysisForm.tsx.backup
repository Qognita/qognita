'use client'

import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Search, Loader2, AlertCircle, CheckCircle, Shield } from 'lucide-react'
import { AnalyzeResponse, AnalyzeRequest } from '@/lib/types/api'
import { FirstTimeModal } from '@/components/auth/FirstTimeModal'

interface AnalysisFormProps {
  onAnalysisStart: () => void
  onAnalysisComplete: (result: AnalyzeResponse) => void
  isAnalyzing: boolean
}

export function AnalysisForm({ onAnalysisStart, onAnalysisComplete, isAnalyzing }: AnalysisFormProps) {
  const { data: session } = useSession()
  const [address, setAddress] = useState('')
  const [error, setError] = useState('')
  const [showFirstTimeModal, setShowFirstTimeModal] = useState(false)
  const [hasShownFirstTimeModal, setHasShownFirstTimeModal] = useState(false)
  const [addressType, setAddressType] = useState<'auto' | 'wallet' | 'program' | 'token' | 'transaction'>('auto')
  const [analysisProgress, setAnalysisProgress] = useState(0)
  const [analysisStep, setAnalysisStep] = useState('')
  const [startTime, setStartTime] = useState<number | null>(null)

  const validateInput = (input: string, type: string): boolean => {
    if (!input) return false
    
    if (type === 'transaction') {
      // Transaction signature validation (87-88 characters)
      if (input.length < 87 || input.length > 88) return false
    } else {
      // Address validation (32-44 characters)
      if (input.length < 32 || input.length > 44) return false
    }
    
    // Check if it contains only valid base58 characters
    const base58Regex = /^[1-9A-HJ-NP-Za-km-z]+$/
    return base58Regex.test(input)
  }

  // Check if user has seen the first-time modal
  useEffect(() => {
    const hasSeenModal = localStorage.getItem('qognita_has_seen_first_time_modal')
    setHasShownFirstTimeModal(!!hasSeenModal)
  }, [])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!address.trim() || isAnalyzing) return

    setError('')

    // Show first-time modal if user hasn't seen it and isn't signed in
    if (!session && !hasShownFirstTimeModal) {
      setShowFirstTimeModal(true)
      return
    }
    onAnalysisStart()

    try {
      const requestBody: AnalyzeRequest = {
        address: address.trim(),
        type: addressType === 'auto' ? undefined : addressType
      }

      const response = await fetch('/api/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Analysis failed')
      }

      const result: AnalyzeResponse = await response.json()
      onAnalysisComplete(result)
      
    } catch (error) {
      console.error('Analysis error:', error)
      setError(error instanceof Error ? error.message : 'Analysis failed. Please try again.')
    }
  }

  // Progress simulation effect
  useEffect(() => {
    if (isAnalyzing) {
      setStartTime(Date.now())
      setAnalysisProgress(0)
      setAnalysisStep('Initializing analysis...')
      
      const steps = [
        { progress: 10, step: 'Connecting to Solana network...', delay: 500 },
        { progress: 25, step: 'Fetching account information...', delay: 1000 },
        { progress: 40, step: 'Parsing account data with AI...', delay: 1500 },
        { progress: 55, step: 'Scraping token metadata...', delay: 2000 },
        { progress: 70, step: 'Analyzing token holders...', delay: 2500 },
        { progress: 85, step: 'Running security analysis...', delay: 3000 },
        { progress: 95, step: 'Generating report...', delay: 3500 }
      ]
      
      steps.forEach(({ progress, step, delay }) => {
        setTimeout(() => {
          if (isAnalyzing) {
            setAnalysisProgress(progress)
            setAnalysisStep(step)
          }
        }, delay)
      })
    } else {
      setAnalysisProgress(0)
      setAnalysisStep('')
      setStartTime(null)
    }
  }, [isAnalyzing])

  const exampleAddresses = [
    {
      label: 'System Program',
      address: '11111111111111111111111111111112',
      type: 'program' as const
    },
    {
      label: 'Token Program',
      address: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
      type: 'program' as const
    },
    {
      label: 'Jupiter Program',
      address: 'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4',
      type: 'program' as const
    }
  ]

  return (
    <>
    <Card className="bg-white/5 backdrop-blur-sm border-white/10">
      <CardHeader>
        <CardTitle className="text-white flex items-center space-x-2">
          <Search className="h-5 w-5 text-blue-400" />
          <span>Analyze Solana Address</span>
        </CardTitle>
        <CardDescription className="text-gray-300">
          Enter a Solana address, program ID, token mint, or transaction signature to analyze
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Input
              type="text"
              placeholder="Enter Solana address or transaction signature"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              className="bg-white/10 border-white/20 text-white placeholder:text-gray-400"
              disabled={isAnalyzing}
            />
            
            {/* Address Type Selection */}
            <div className="flex flex-wrap gap-2">
              {(['auto', 'wallet', 'program', 'token', 'transaction'] as const).map((type) => (
                <button
                  key={type}
                  type="button"
                  onClick={() => setAddressType(type)}
                  className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${
                    addressType === type
                      ? 'bg-blue-600 text-white'
                      : 'bg-white/10 text-gray-300 hover:bg-white/20'
                  }`}
                  disabled={isAnalyzing}
                >
                  {type === 'auto' ? 'Auto-detect' : type.charAt(0).toUpperCase() + type.slice(1)}
                </button>
              ))}
            </div>
          </div>

          {error && (
            <div className="flex items-center space-x-2 text-red-400 bg-red-400/10 p-3 rounded-lg">
              <AlertCircle className="h-4 w-4" />
              <span className="text-sm">{error}</span>
            </div>
          )}

          {isAnalyzing && (
            <div className="space-y-3 mb-4">
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-300">{analysisStep}</span>
                <span className="text-blue-400">{analysisProgress}%</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full transition-all duration-500 ease-out"
                  style={{ width: `${analysisProgress}%` }}
                ></div>
              </div>
              {startTime && (
                <div className="text-xs text-gray-400 text-center">
                  {analysisProgress < 95 ? (
                    'This may take 1-2 minutes for comprehensive analysis...'
                  ) : (
                    'Almost done! Finalizing results...'
                  )}
                </div>
              )}
            </div>
          )}

          <Button 
            type="submit" 
            className="w-full bg-blue-600 hover:bg-blue-700"
            disabled={isAnalyzing || !address.trim()}
          >
            {isAnalyzing ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Analyzing...
              </>
            ) : (
              <>
                <Search className="h-4 w-4 mr-2" />
                Analyze Address
              </>
            )}
          </Button>
        </form>

        {/* Example Addresses */}
        <div className="mt-6">
          <p className="text-sm text-gray-400 mb-3">Try these examples:</p>
          <div className="space-y-2">
            {exampleAddresses.map((example, index) => (
              <button
                key={index}
                onClick={() => {
                  setAddress(example.address)
                  setAddressType(example.type)
                }}
                className="w-full text-left p-3 bg-white/5 hover:bg-white/10 rounded-lg transition-colors group"
                disabled={isAnalyzing}
              >
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-white">{example.label}</p>
                    <p className="text-xs text-gray-400 font-mono">
                      {example.address.slice(0, 20)}...{example.address.slice(-8)}
                    </p>
                  </div>
                  <CheckCircle className="h-4 w-4 text-green-400 opacity-0 group-hover:opacity-100 transition-opacity" />
                </div>
              </button>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>

    <FirstTimeModal
      isOpen={showFirstTimeModal}
      onClose={() => {
        setShowFirstTimeModal(false)
        localStorage.setItem('qognita_has_seen_first_time_modal', 'true')
        setHasShownFirstTimeModal(true)
      }}
      onContinueAsGuest={() => {
        localStorage.setItem('qognita_has_seen_first_time_modal', 'true')
        setHasShownFirstTimeModal(true)
        performAnalysis()
      }}
    />
  </>
  )
}
