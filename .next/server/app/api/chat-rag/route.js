"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat-rag/route";
exports.ids = ["app/api/chat-rag/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat-rag%2Froute&page=%2Fapi%2Fchat-rag%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat-rag%2Froute.ts&appDir=%2Fhome%2Fakintolax%2Fwindsurf-project%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fakintolax%2Fwindsurf-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat-rag%2Froute&page=%2Fapi%2Fchat-rag%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat-rag%2Froute.ts&appDir=%2Fhome%2Fakintolax%2Fwindsurf-project%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fakintolax%2Fwindsurf-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_akintolax_windsurf_project_src_app_api_chat_rag_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/chat-rag/route.ts */ \"(rsc)/./src/app/api/chat-rag/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat-rag/route\",\n        pathname: \"/api/chat-rag\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat-rag/route\"\n    },\n    resolvedPagePath: \"/home/akintolax/windsurf-project/src/app/api/chat-rag/route.ts\",\n    nextConfigOutput,\n    userland: _home_akintolax_windsurf_project_src_app_api_chat_rag_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/chat-rag/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjaGF0LXJhZyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGY2hhdC1yYWclMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZjaGF0LXJhZyUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGYWtpbnRvbGF4JTJGd2luZHN1cmYtcHJvamVjdCUyRnNyYyUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGaG9tZSUyRmFraW50b2xheCUyRndpbmRzdXJmLXByb2plY3QmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDYztBQUMzRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL3FvZ25pdGEvPzMxZTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL2hvbWUvYWtpbnRvbGF4L3dpbmRzdXJmLXByb2plY3Qvc3JjL2FwcC9hcGkvY2hhdC1yYWcvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2NoYXQtcmFnL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvY2hhdC1yYWdcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2NoYXQtcmFnL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL2hvbWUvYWtpbnRvbGF4L3dpbmRzdXJmLXByb2plY3Qvc3JjL2FwcC9hcGkvY2hhdC1yYWcvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvY2hhdC1yYWcvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0LCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat-rag%2Froute&page=%2Fapi%2Fchat-rag%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat-rag%2Froute.ts&appDir=%2Fhome%2Fakintolax%2Fwindsurf-project%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fakintolax%2Fwindsurf-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/chat-rag/route.ts":
/*!***************************************!*\
  !*** ./src/app/api/chat-rag/route.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _lib_aiRouter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/aiRouter */ \"(rsc)/./src/lib/aiRouter.ts\");\n\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { message, userId, address, chatHistory } = body;\n        if (!message) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Message is required\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(`🤖 RAG Chat Request from user ${userId}: \"${message}\"`);\n        // Route the query through our robust AI router\n        const result = await (0,_lib_aiRouter__WEBPACK_IMPORTED_MODULE_1__.routeQuery)(message, address, chatHistory);\n        console.log(`✅ RAG Response generated (intent: ${result.intent})`);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            response: result.response,\n            intent: result.intent,\n            sources: result.sources,\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"RAG Chat API error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Internal server error\",\n            response: \"Sorry, I encountered an error processing your request. Please try again.\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET() {\n    return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n        message: \"Qognita RAG Chat API\",\n        version: \"2.0.0\",\n        capabilities: [\n            \"Intelligent intent classification\",\n            \"Live blockchain data queries via function calling\",\n            \"Solana documentation search via RAG\",\n            \"Hybrid analysis (docs + live data)\",\n            \"Source attribution and citations\",\n            \"Context-aware responses\"\n        ],\n        intents: [\n            \"on_chain_query - Live blockchain data analysis\",\n            \"doc_query - Documentation and concept explanations\",\n            \"hybrid_query - Combined documentation and live data\",\n            \"general - Greetings and general assistance\"\n        ]\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9jaGF0LXJhZy9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVEO0FBQ1o7QUFFcEMsZUFBZUUsS0FBS0MsT0FBb0I7SUFDN0MsSUFBSTtRQUNGLE1BQU1DLE9BQU8sTUFBTUQsUUFBUUUsSUFBSTtRQUMvQixNQUFNLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLFdBQVcsRUFBRSxHQUFHTDtRQUVsRCxJQUFJLENBQUNFLFNBQVM7WUFDWixPQUFPTixrRkFBWUEsQ0FBQ0ssSUFBSSxDQUN0QjtnQkFBRUssT0FBTztZQUFzQixHQUMvQjtnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUFDLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLDhCQUE4QixFQUFFTixPQUFPLEdBQUcsRUFBRUQsUUFBUSxDQUFDLENBQUM7UUFFbkUsK0NBQStDO1FBQy9DLE1BQU1RLFNBQVMsTUFBTWIseURBQVVBLENBQUNLLFNBQVNFLFNBQVNDO1FBRWxERyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxrQ0FBa0MsRUFBRUMsT0FBT0MsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUVqRSxPQUFPZixrRkFBWUEsQ0FBQ0ssSUFBSSxDQUFDO1lBQ3ZCVyxVQUFVRixPQUFPRSxRQUFRO1lBQ3pCRCxRQUFRRCxPQUFPQyxNQUFNO1lBQ3JCRSxTQUFTSCxPQUFPRyxPQUFPO1lBQ3ZCQyxXQUFXLElBQUlDLE9BQU9DLFdBQVc7UUFDbkM7SUFFRixFQUFFLE9BQU9WLE9BQU87UUFDZEUsUUFBUUYsS0FBSyxDQUFDLHVCQUF1QkE7UUFDckMsT0FBT1Ysa0ZBQVlBLENBQUNLLElBQUksQ0FDdEI7WUFDRUssT0FBTztZQUNQTSxVQUFVO1FBQ1osR0FDQTtZQUFFTCxRQUFRO1FBQUk7SUFFbEI7QUFDRjtBQUVPLGVBQWVVO0lBQ3BCLE9BQU9yQixrRkFBWUEsQ0FBQ0ssSUFBSSxDQUFDO1FBQ3ZCQyxTQUFTO1FBQ1RnQixTQUFTO1FBQ1RDLGNBQWM7WUFDWjtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7U0FDRDtRQUNEQyxTQUFTO1lBQ1A7WUFDQTtZQUNBO1lBQ0E7U0FDRDtJQUNIO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xb2duaXRhLy4vc3JjL2FwcC9hcGkvY2hhdC1yYWcvcm91dGUudHM/YjZjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInXG5pbXBvcnQgeyByb3V0ZVF1ZXJ5IH0gZnJvbSAnQC9saWIvYWlSb3V0ZXInXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpXG4gICAgY29uc3QgeyBtZXNzYWdlLCB1c2VySWQsIGFkZHJlc3MsIGNoYXRIaXN0b3J5IH0gPSBib2R5XG5cbiAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ01lc3NhZ2UgaXMgcmVxdWlyZWQnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKGDwn6SWIFJBRyBDaGF0IFJlcXVlc3QgZnJvbSB1c2VyICR7dXNlcklkfTogXCIke21lc3NhZ2V9XCJgKVxuXG4gICAgLy8gUm91dGUgdGhlIHF1ZXJ5IHRocm91Z2ggb3VyIHJvYnVzdCBBSSByb3V0ZXJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByb3V0ZVF1ZXJ5KG1lc3NhZ2UsIGFkZHJlc3MsIGNoYXRIaXN0b3J5KVxuXG4gICAgY29uc29sZS5sb2coYOKchSBSQUcgUmVzcG9uc2UgZ2VuZXJhdGVkIChpbnRlbnQ6ICR7cmVzdWx0LmludGVudH0pYClcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICByZXNwb25zZTogcmVzdWx0LnJlc3BvbnNlLFxuICAgICAgaW50ZW50OiByZXN1bHQuaW50ZW50LFxuICAgICAgc291cmNlczogcmVzdWx0LnNvdXJjZXMsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH0pXG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdSQUcgQ2hhdCBBUEkgZXJyb3I6JywgZXJyb3IpXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAge1xuICAgICAgICBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsXG4gICAgICAgIHJlc3BvbnNlOiAnU29ycnksIEkgZW5jb3VudGVyZWQgYW4gZXJyb3IgcHJvY2Vzc2luZyB5b3VyIHJlcXVlc3QuIFBsZWFzZSB0cnkgYWdhaW4uJ1xuICAgICAgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xuICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgIG1lc3NhZ2U6ICdRb2duaXRhIFJBRyBDaGF0IEFQSScsXG4gICAgdmVyc2lvbjogJzIuMC4wJyxcbiAgICBjYXBhYmlsaXRpZXM6IFtcbiAgICAgICdJbnRlbGxpZ2VudCBpbnRlbnQgY2xhc3NpZmljYXRpb24nLFxuICAgICAgJ0xpdmUgYmxvY2tjaGFpbiBkYXRhIHF1ZXJpZXMgdmlhIGZ1bmN0aW9uIGNhbGxpbmcnLFxuICAgICAgJ1NvbGFuYSBkb2N1bWVudGF0aW9uIHNlYXJjaCB2aWEgUkFHJyxcbiAgICAgICdIeWJyaWQgYW5hbHlzaXMgKGRvY3MgKyBsaXZlIGRhdGEpJyxcbiAgICAgICdTb3VyY2UgYXR0cmlidXRpb24gYW5kIGNpdGF0aW9ucycsXG4gICAgICAnQ29udGV4dC1hd2FyZSByZXNwb25zZXMnXG4gICAgXSxcbiAgICBpbnRlbnRzOiBbXG4gICAgICAnb25fY2hhaW5fcXVlcnkgLSBMaXZlIGJsb2NrY2hhaW4gZGF0YSBhbmFseXNpcycsXG4gICAgICAnZG9jX3F1ZXJ5IC0gRG9jdW1lbnRhdGlvbiBhbmQgY29uY2VwdCBleHBsYW5hdGlvbnMnLFxuICAgICAgJ2h5YnJpZF9xdWVyeSAtIENvbWJpbmVkIGRvY3VtZW50YXRpb24gYW5kIGxpdmUgZGF0YScsXG4gICAgICAnZ2VuZXJhbCAtIEdyZWV0aW5ncyBhbmQgZ2VuZXJhbCBhc3Npc3RhbmNlJ1xuICAgIF1cbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJyb3V0ZVF1ZXJ5IiwiUE9TVCIsInJlcXVlc3QiLCJib2R5IiwianNvbiIsIm1lc3NhZ2UiLCJ1c2VySWQiLCJhZGRyZXNzIiwiY2hhdEhpc3RvcnkiLCJlcnJvciIsInN0YXR1cyIsImNvbnNvbGUiLCJsb2ciLCJyZXN1bHQiLCJpbnRlbnQiLCJyZXNwb25zZSIsInNvdXJjZXMiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJHRVQiLCJ2ZXJzaW9uIiwiY2FwYWJpbGl0aWVzIiwiaW50ZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/chat-rag/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/aiRouter.ts":
/*!*****************************!*\
  !*** ./src/lib/aiRouter.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   routeQuery: () => (/* binding */ routeQuery)\n/* harmony export */ });\n/* harmony import */ var _lib_openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/openai */ \"(rsc)/./src/lib/openai.ts\");\n/* harmony import */ var _services_knowledgeService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/services/knowledgeService */ \"(rsc)/./src/services/knowledgeService.ts\");\n\n\n/**\n * The main AI Router - the \"brain\" that decides how to handle each query\n */ async function routeQuery(query, address, chatHistory) {\n    console.log(`🧠 AI Router processing: \"${query}\"`);\n    // === STEP 1: Intent Classification ===\n    const intentPrompt = `\n    Analyze the following user query and classify its intent.\n    Respond with ONLY one of the following JSON objects:\n    {\"intent\": \"on_chain_query\"} - if asking for live blockchain data (balances, transactions, risk scores, wallet analysis)\n    {\"intent\": \"doc_query\"} - if asking \"what is\", \"how to\", \"explain\" questions about Solana concepts\n    {\"intent\": \"hybrid_query\"} - if asking for explanation that requires both documentation and live data\n    {\"intent\": \"general\"} - if it's a general greeting or unclear request\n\n    Examples:\n    - \"What tokens does wallet ABC123 hold?\" → {\"intent\": \"on_chain_query\"}\n    - \"What is a Program Derived Address?\" → {\"intent\": \"doc_query\"}\n    - \"My PDA transaction failed with error 0x1771, why?\" → {\"intent\": \"hybrid_query\"}\n    - \"Hello, what can you do?\" → {\"intent\": \"general\"}\n\n    User Query: \"${query}\"\n  `;\n    try {\n        const intentResponse = await _lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.chat.completions.create({\n            model: \"gpt-4o\",\n            messages: [\n                {\n                    role: \"user\",\n                    content: intentPrompt\n                }\n            ],\n            response_format: {\n                type: \"json_object\"\n            },\n            temperature: 0,\n            max_tokens: 50\n        });\n        const intentResult = JSON.parse(intentResponse.choices[0].message.content || '{\"intent\": \"general\"}');\n        const intent = intentResult.intent;\n        console.log(`🎯 Intent classified as: ${intent}`);\n        // === STEP 2: Route to Appropriate Handler ===\n        switch(intent){\n            case \"on_chain_query\":\n                return await handleOnChainQuery(query, address, chatHistory);\n            case \"doc_query\":\n                return await handleDocQuery(query);\n            case \"hybrid_query\":\n                return await handleHybridQuery(query, address, chatHistory);\n            case \"general\":\n            default:\n                return await handleGeneralQuery(query);\n        }\n    } catch (error) {\n        console.error(\"Intent classification failed:\", error);\n        // Fallback to general handling\n        return await handleGeneralQuery(query);\n    }\n}\n/**\n * Handle live blockchain data queries using existing function calling tools\n */ async function handleOnChainQuery(query, address, chatHistory) {\n    console.log(\"\\uD83D\\uDCCA Handling on-chain query...\");\n    try {\n        // Call existing chat-enhanced API for function calling\n        const baseUrl =  true ? \"http://localhost:3000\" : 0;\n        const response = await fetch(`${baseUrl}/api/chat-enhanced`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                query: query,\n                address: address || \"N/A\",\n                chatHistory: chatHistory || []\n            })\n        });\n        const data = await response.json();\n        return {\n            response: data.response || \"Unable to fetch live blockchain data at this time.\",\n            intent: \"on_chain_query\",\n            sources: {\n                type: \"live_data\",\n                blockchain_data: data.toolResults\n            }\n        };\n    } catch (error) {\n        console.error(\"On-chain query failed:\", error);\n        return {\n            response: \"I encountered an error fetching live blockchain data. Please try again or rephrase your question.\",\n            intent: \"on_chain_query\"\n        };\n    }\n}\n/**\n * Handle documentation queries using RAG system\n */ async function handleDocQuery(query) {\n    console.log(\"\\uD83D\\uDCDA Handling documentation query...\");\n    try {\n        // Search the knowledge base for relevant documents\n        const matches = await _services_knowledgeService__WEBPACK_IMPORTED_MODULE_1__.KnowledgeService.searchKnowledgeBase(query, 5, 0.2);\n        if (!matches || matches.length === 0) {\n            return {\n                response: \"I don't have specific documentation about that topic in my knowledge base yet. Could you try rephrasing your question or ask about core Solana concepts like accounts, transactions, programs, or PDAs?\",\n                intent: \"doc_query\"\n            };\n        }\n        // Prepare context from matched documents\n        const context = matches.map((match)=>`**Source: ${match.source_title}**\\n${match.content}`).join(\"\\n\\n---\\n\\n\");\n        // Create comprehensive prompt with retrieved context\n        const finalPrompt = `\n      You are Qognita, an expert Solana AI assistant. Based ONLY on the following official Solana documentation, provide a clear, accurate, and helpful answer to the user's question.\n\n      If the documentation doesn't fully answer the question, acknowledge this and provide what information you can from the available context.\n\n      Documentation Context:\n      \"\"\"\n      ${context}\n      \"\"\"\n      \n      User Question: ${query}\n\n      Instructions:\n      - Provide a comprehensive but concise answer\n      - Use the documentation as your primary source\n      - Include relevant technical details and examples when appropriate\n      - Format your response with proper markdown for readability\n      - If you reference specific concepts, explain them briefly\n      \n      Answer:\n    `;\n        const completion = await _lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.chat.completions.create({\n            model: \"gpt-4o\",\n            messages: [\n                {\n                    role: \"user\",\n                    content: finalPrompt\n                }\n            ],\n            temperature: 0.3,\n            max_tokens: 1000\n        });\n        return {\n            response: completion.choices[0].message.content || \"I apologize, but I encountered an error generating a response.\",\n            intent: \"doc_query\",\n            sources: {\n                type: \"documentation\",\n                docs: matches.map((match)=>({\n                        content: match.content,\n                        source_url: match.source_url,\n                        source_title: match.source_title,\n                        similarity: match.similarity\n                    }))\n            }\n        };\n    } catch (error) {\n        console.error(\"Documentation query failed:\", error);\n        return {\n            response: \"I encountered an error while searching the documentation. Please try again.\",\n            intent: \"doc_query\"\n        };\n    }\n}\n/**\n * Handle hybrid queries that need both documentation and live data\n */ async function handleHybridQuery(query, address, chatHistory) {\n    console.log(\"\\uD83D\\uDD04 Handling hybrid query...\");\n    try {\n        // For MVP, start with documentation search and enhance with live data if needed\n        const docResult = await handleDocQuery(query);\n        // If we have an address or the query suggests live data is needed, also fetch that\n        const needsLiveData = address || query.toLowerCase().includes(\"transaction\") || query.toLowerCase().includes(\"failed\") || query.toLowerCase().includes(\"error\");\n        if (needsLiveData) {\n            const liveResult = await handleOnChainQuery(query, address, chatHistory);\n            // Combine both responses intelligently\n            const combinedPrompt = `\n        You are Qognita, a Solana AI assistant. The user asked: \"${query}\"\n\n        I have gathered both documentation and live blockchain data. Please provide a comprehensive response that combines both sources appropriately.\n\n        Documentation Response:\n        ${docResult.response}\n\n        Live Data Response:\n        ${liveResult.response}\n\n        Please create a unified, coherent response that leverages both the documentation context and the live data to fully answer the user's question. Focus on explaining the concept first, then showing how it applies to the specific live data.\n      `;\n            const completion = await _lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.chat.completions.create({\n                model: \"gpt-4o\",\n                messages: [\n                    {\n                        role: \"user\",\n                        content: combinedPrompt\n                    }\n                ],\n                temperature: 0.3,\n                max_tokens: 1200\n            });\n            return {\n                response: completion.choices[0].message.content || \"I apologize, but I encountered an error generating a response.\",\n                intent: \"hybrid_query\",\n                sources: {\n                    type: \"hybrid\",\n                    docs: docResult.sources?.docs,\n                    blockchain_data: liveResult.sources?.blockchain_data\n                }\n            };\n        }\n        // If no live data needed, return documentation result\n        return {\n            ...docResult,\n            intent: \"hybrid_query\"\n        };\n    } catch (error) {\n        console.error(\"Hybrid query failed:\", error);\n        return {\n            response: \"I encountered an error while processing your request. Please try again or break your question into smaller parts.\",\n            intent: \"hybrid_query\"\n        };\n    }\n}\n/**\n * Handle general queries and greetings\n */ async function handleGeneralQuery(query) {\n    console.log(\"\\uD83D\\uDCAC Handling general query...\");\n    const generalPrompt = `\n    You are Qognita, an expert AI assistant for everything Solana blockchain. The user said: \"${query}\"\n\n    Provide a helpful, friendly response. If it's a greeting, introduce your capabilities. If it's unclear what they want, guide them toward the types of questions you can answer.\n\n    You can help with:\n    🔍 Live blockchain analysis (wallet balances, token analysis, transaction history)\n    📚 Solana documentation (concepts, development guides, troubleshooting)\n    🛡️ Security analysis (token safety, smart contract risks)\n    🔧 Development help (Anchor, Rust, program development)\n\n    Keep your response concise and encouraging.\n  `;\n    try {\n        const completion = await _lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.chat.completions.create({\n            model: \"gpt-4o\",\n            messages: [\n                {\n                    role: \"user\",\n                    content: generalPrompt\n                }\n            ],\n            temperature: 0.4,\n            max_tokens: 400\n        });\n        return {\n            response: completion.choices[0].message.content || \"Hello! I'm Qognita, your Solana AI assistant. How can I help you today?\",\n            intent: \"general\"\n        };\n    } catch (error) {\n        console.error(\"General query failed:\", error);\n        return {\n            response: \"Hello! I'm Qognita, your AI assistant for everything Solana. I can help you with live blockchain data, documentation, security analysis, and development questions. What would you like to know?\",\n            intent: \"general\"\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFFM0NHLFFBQVFDLEdBQUcsQ0FBQztJQUVaLE1BQU0yRCxnQkFBZ0IsQ0FBQzs4RkFDbUUsRUFBRS9ELE1BQU07Ozs7Ozs7Ozs7O0VBV3BHLENBQUM7SUFFQyxJQUFJO1FBQ0EsTUFBTXFELGFBQWEsTUFBTXhELCtDQUFNQSxDQUFDVSxJQUFJLENBQUNDLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDO1lBQ3BEQyxPQUFPO1lBQ1BDLFVBQVU7Z0JBQUM7b0JBQUVDLE1BQU07b0JBQVFDLFNBQVNrRDtnQkFBYzthQUFFO1lBQ3BEL0MsYUFBYTtZQUNiQyxZQUFZO1FBQ2hCO1FBRUEsT0FBTztZQUNIZ0IsVUFBVW9CLFdBQVdoQyxPQUFPLENBQUMsRUFBRSxDQUFDQyxPQUFPLENBQUNULE9BQU8sSUFBSTtZQUNuRFUsUUFBUTtRQUNaO0lBRUosRUFBRSxPQUFPSyxPQUFPO1FBQ1p6QixRQUFReUIsS0FBSyxDQUFDLHlCQUF5QkE7UUFDdkMsT0FBTztZQUNISyxVQUFVO1lBQ1ZWLFFBQVE7UUFDWjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xb2duaXRhLy4vc3JjL2xpYi9haVJvdXRlci50cz8zNjhkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9wZW5haSB9IGZyb20gJ0AvbGliL29wZW5haSdcbmltcG9ydCB7IEtub3dsZWRnZVNlcnZpY2UgfSBmcm9tICdAL3NlcnZpY2VzL2tub3dsZWRnZVNlcnZpY2UnXG5cbmV4cG9ydCBpbnRlcmZhY2UgQUlSb3V0ZXJSZXNwb25zZSB7XG4gICAgcmVzcG9uc2U6IHN0cmluZ1xuICAgIGludGVudDogJ29uX2NoYWluX3F1ZXJ5JyB8ICdkb2NfcXVlcnknIHwgJ2h5YnJpZF9xdWVyeScgfCAnZ2VuZXJhbCdcbiAgICBzb3VyY2VzPzoge1xuICAgICAgICB0eXBlOiAnZG9jdW1lbnRhdGlvbicgfCAnbGl2ZV9kYXRhJyB8ICdoeWJyaWQnXG4gICAgICAgIGRvY3M/OiBBcnJheTx7XG4gICAgICAgICAgICBjb250ZW50OiBzdHJpbmdcbiAgICAgICAgICAgIHNvdXJjZV91cmw6IHN0cmluZ1xuICAgICAgICAgICAgc291cmNlX3RpdGxlOiBzdHJpbmdcbiAgICAgICAgICAgIHNpbWlsYXJpdHk6IG51bWJlclxuICAgICAgICB9PlxuICAgICAgICBibG9ja2NoYWluX2RhdGE/OiBhbnlcbiAgICB9XG59XG5cbi8qKlxuICogVGhlIG1haW4gQUkgUm91dGVyIC0gdGhlIFwiYnJhaW5cIiB0aGF0IGRlY2lkZXMgaG93IHRvIGhhbmRsZSBlYWNoIHF1ZXJ5XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByb3V0ZVF1ZXJ5KFxuICAgIHF1ZXJ5OiBzdHJpbmcsXG4gICAgYWRkcmVzcz86IHN0cmluZyB8IG51bGwsXG4gICAgY2hhdEhpc3Rvcnk/OiBhbnlbXVxuKTogUHJvbWlzZTxBSVJvdXRlclJlc3BvbnNlPiB7XG5cbiAgICBjb25zb2xlLmxvZyhg8J+noCBBSSBSb3V0ZXIgcHJvY2Vzc2luZzogXCIke3F1ZXJ5fVwiYClcblxuICAgIC8vID09PSBTVEVQIDE6IEludGVudCBDbGFzc2lmaWNhdGlvbiA9PT1cbiAgICBjb25zdCBpbnRlbnRQcm9tcHQgPSBgXG4gICAgQW5hbHl6ZSB0aGUgZm9sbG93aW5nIHVzZXIgcXVlcnkgYW5kIGNsYXNzaWZ5IGl0cyBpbnRlbnQuXG4gICAgUmVzcG9uZCB3aXRoIE9OTFkgb25lIG9mIHRoZSBmb2xsb3dpbmcgSlNPTiBvYmplY3RzOlxuICAgIHtcImludGVudFwiOiBcIm9uX2NoYWluX3F1ZXJ5XCJ9IC0gaWYgYXNraW5nIGZvciBsaXZlIGJsb2NrY2hhaW4gZGF0YSAoYmFsYW5jZXMsIHRyYW5zYWN0aW9ucywgcmlzayBzY29yZXMsIHdhbGxldCBhbmFseXNpcylcbiAgICB7XCJpbnRlbnRcIjogXCJkb2NfcXVlcnlcIn0gLSBpZiBhc2tpbmcgXCJ3aGF0IGlzXCIsIFwiaG93IHRvXCIsIFwiZXhwbGFpblwiIHF1ZXN0aW9ucyBhYm91dCBTb2xhbmEgY29uY2VwdHNcbiAgICB7XCJpbnRlbnRcIjogXCJoeWJyaWRfcXVlcnlcIn0gLSBpZiBhc2tpbmcgZm9yIGV4cGxhbmF0aW9uIHRoYXQgcmVxdWlyZXMgYm90aCBkb2N1bWVudGF0aW9uIGFuZCBsaXZlIGRhdGFcbiAgICB7XCJpbnRlbnRcIjogXCJnZW5lcmFsXCJ9IC0gaWYgaXQncyBhIGdlbmVyYWwgZ3JlZXRpbmcgb3IgdW5jbGVhciByZXF1ZXN0XG5cbiAgICBFeGFtcGxlczpcbiAgICAtIFwiV2hhdCB0b2tlbnMgZG9lcyB3YWxsZXQgQUJDMTIzIGhvbGQ/XCIg4oaSIHtcImludGVudFwiOiBcIm9uX2NoYWluX3F1ZXJ5XCJ9XG4gICAgLSBcIldoYXQgaXMgYSBQcm9ncmFtIERlcml2ZWQgQWRkcmVzcz9cIiDihpIge1wiaW50ZW50XCI6IFwiZG9jX3F1ZXJ5XCJ9XG4gICAgLSBcIk15IFBEQSB0cmFuc2FjdGlvbiBmYWlsZWQgd2l0aCBlcnJvciAweDE3NzEsIHdoeT9cIiDihpIge1wiaW50ZW50XCI6IFwiaHlicmlkX3F1ZXJ5XCJ9XG4gICAgLSBcIkhlbGxvLCB3aGF0IGNhbiB5b3UgZG8/XCIg4oaSIHtcImludGVudFwiOiBcImdlbmVyYWxcIn1cblxuICAgIFVzZXIgUXVlcnk6IFwiJHtxdWVyeX1cIlxuICBgXG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBpbnRlbnRSZXNwb25zZSA9IGF3YWl0IG9wZW5haS5jaGF0LmNvbXBsZXRpb25zLmNyZWF0ZSh7XG4gICAgICAgICAgICBtb2RlbDogXCJncHQtNG9cIixcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBbeyByb2xlOiAndXNlcicsIGNvbnRlbnQ6IGludGVudFByb21wdCB9XSxcbiAgICAgICAgICAgIHJlc3BvbnNlX2Zvcm1hdDogeyB0eXBlOiBcImpzb25fb2JqZWN0XCIgfSxcbiAgICAgICAgICAgIHRlbXBlcmF0dXJlOiAwLFxuICAgICAgICAgICAgbWF4X3Rva2VuczogNTBcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBpbnRlbnRSZXN1bHQgPSBKU09OLnBhcnNlKGludGVudFJlc3BvbnNlLmNob2ljZXNbMF0ubWVzc2FnZS5jb250ZW50IHx8ICd7XCJpbnRlbnRcIjogXCJnZW5lcmFsXCJ9JylcbiAgICAgICAgY29uc3QgaW50ZW50ID0gaW50ZW50UmVzdWx0LmludGVudFxuXG4gICAgICAgIGNvbnNvbGUubG9nKGDwn46vIEludGVudCBjbGFzc2lmaWVkIGFzOiAke2ludGVudH1gKVxuXG4gICAgICAgIC8vID09PSBTVEVQIDI6IFJvdXRlIHRvIEFwcHJvcHJpYXRlIEhhbmRsZXIgPT09XG4gICAgICAgIHN3aXRjaCAoaW50ZW50KSB7XG4gICAgICAgICAgICBjYXNlICdvbl9jaGFpbl9xdWVyeSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGhhbmRsZU9uQ2hhaW5RdWVyeShxdWVyeSwgYWRkcmVzcywgY2hhdEhpc3RvcnkpXG5cbiAgICAgICAgICAgIGNhc2UgJ2RvY19xdWVyeSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGhhbmRsZURvY1F1ZXJ5KHF1ZXJ5KVxuXG4gICAgICAgICAgICBjYXNlICdoeWJyaWRfcXVlcnknOlxuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBoYW5kbGVIeWJyaWRRdWVyeShxdWVyeSwgYWRkcmVzcywgY2hhdEhpc3RvcnkpXG5cbiAgICAgICAgICAgIGNhc2UgJ2dlbmVyYWwnOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgaGFuZGxlR2VuZXJhbFF1ZXJ5KHF1ZXJ5KVxuICAgICAgICB9XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdJbnRlbnQgY2xhc3NpZmljYXRpb24gZmFpbGVkOicsIGVycm9yKVxuICAgICAgICAvLyBGYWxsYmFjayB0byBnZW5lcmFsIGhhbmRsaW5nXG4gICAgICAgIHJldHVybiBhd2FpdCBoYW5kbGVHZW5lcmFsUXVlcnkocXVlcnkpXG4gICAgfVxufVxuXG4vKipcbiAqIEhhbmRsZSBsaXZlIGJsb2NrY2hhaW4gZGF0YSBxdWVyaWVzIHVzaW5nIGV4aXN0aW5nIGZ1bmN0aW9uIGNhbGxpbmcgdG9vbHNcbiAqL1xuYXN5bmMgZnVuY3Rpb24gaGFuZGxlT25DaGFpblF1ZXJ5KFxuICAgIHF1ZXJ5OiBzdHJpbmcsXG4gICAgYWRkcmVzcz86IHN0cmluZyB8IG51bGwsXG4gICAgY2hhdEhpc3Rvcnk/OiBhbnlbXVxuKTogUHJvbWlzZTxBSVJvdXRlclJlc3BvbnNlPiB7XG5cbiAgICBjb25zb2xlLmxvZygn8J+TiiBIYW5kbGluZyBvbi1jaGFpbiBxdWVyeS4uLicpXG5cbiAgICB0cnkge1xuICAgICAgICAvLyBDYWxsIGV4aXN0aW5nIGNoYXQtZW5oYW5jZWQgQVBJIGZvciBmdW5jdGlvbiBjYWxsaW5nXG4gICAgICAgIGNvbnN0IGJhc2VVcmwgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyBcbiAgICAgICAgICAgID8gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCcgXG4gICAgICAgICAgICA6IHByb2Nlc3MuZW52LlZFUkNFTF9VUkwgXG4gICAgICAgICAgICAgICAgPyBgaHR0cHM6Ly8ke3Byb2Nlc3MuZW52LlZFUkNFTF9VUkx9YCBcbiAgICAgICAgICAgICAgICA6ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7YmFzZVVybH0vYXBpL2NoYXQtZW5oYW5jZWRgLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgICAgICAgICAgYWRkcmVzczogYWRkcmVzcyB8fCAnTi9BJywgLy8gUHJvdmlkZSBhIGRlZmF1bHQgaWYgbm8gYWRkcmVzc1xuICAgICAgICAgICAgICAgIGNoYXRIaXN0b3J5OiBjaGF0SGlzdG9yeSB8fCBbXVxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pXG5cbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXNwb25zZTogZGF0YS5yZXNwb25zZSB8fCAnVW5hYmxlIHRvIGZldGNoIGxpdmUgYmxvY2tjaGFpbiBkYXRhIGF0IHRoaXMgdGltZS4nLFxuICAgICAgICAgICAgaW50ZW50OiAnb25fY2hhaW5fcXVlcnknLFxuICAgICAgICAgICAgc291cmNlczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaXZlX2RhdGEnLFxuICAgICAgICAgICAgICAgIGJsb2NrY2hhaW5fZGF0YTogZGF0YS50b29sUmVzdWx0c1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdPbi1jaGFpbiBxdWVyeSBmYWlsZWQ6JywgZXJyb3IpXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXNwb25zZTogJ0kgZW5jb3VudGVyZWQgYW4gZXJyb3IgZmV0Y2hpbmcgbGl2ZSBibG9ja2NoYWluIGRhdGEuIFBsZWFzZSB0cnkgYWdhaW4gb3IgcmVwaHJhc2UgeW91ciBxdWVzdGlvbi4nLFxuICAgICAgICAgICAgaW50ZW50OiAnb25fY2hhaW5fcXVlcnknXG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogSGFuZGxlIGRvY3VtZW50YXRpb24gcXVlcmllcyB1c2luZyBSQUcgc3lzdGVtXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZURvY1F1ZXJ5KHF1ZXJ5OiBzdHJpbmcpOiBQcm9taXNlPEFJUm91dGVyUmVzcG9uc2U+IHtcblxuICAgIGNvbnNvbGUubG9nKCfwn5OaIEhhbmRsaW5nIGRvY3VtZW50YXRpb24gcXVlcnkuLi4nKVxuXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gU2VhcmNoIHRoZSBrbm93bGVkZ2UgYmFzZSBmb3IgcmVsZXZhbnQgZG9jdW1lbnRzXG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSBhd2FpdCBLbm93bGVkZ2VTZXJ2aWNlLnNlYXJjaEtub3dsZWRnZUJhc2UocXVlcnksIDUsIDAuMilcblxuICAgICAgICBpZiAoIW1hdGNoZXMgfHwgbWF0Y2hlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6IFwiSSBkb24ndCBoYXZlIHNwZWNpZmljIGRvY3VtZW50YXRpb24gYWJvdXQgdGhhdCB0b3BpYyBpbiBteSBrbm93bGVkZ2UgYmFzZSB5ZXQuIENvdWxkIHlvdSB0cnkgcmVwaHJhc2luZyB5b3VyIHF1ZXN0aW9uIG9yIGFzayBhYm91dCBjb3JlIFNvbGFuYSBjb25jZXB0cyBsaWtlIGFjY291bnRzLCB0cmFuc2FjdGlvbnMsIHByb2dyYW1zLCBvciBQREFzP1wiLFxuICAgICAgICAgICAgICAgIGludGVudDogJ2RvY19xdWVyeSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFByZXBhcmUgY29udGV4dCBmcm9tIG1hdGNoZWQgZG9jdW1lbnRzXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBtYXRjaGVzXG4gICAgICAgICAgICAubWFwKG1hdGNoID0+IGAqKlNvdXJjZTogJHttYXRjaC5zb3VyY2VfdGl0bGV9KipcXG4ke21hdGNoLmNvbnRlbnR9YClcbiAgICAgICAgICAgIC5qb2luKCdcXG5cXG4tLS1cXG5cXG4nKVxuXG4gICAgICAgIC8vIENyZWF0ZSBjb21wcmVoZW5zaXZlIHByb21wdCB3aXRoIHJldHJpZXZlZCBjb250ZXh0XG4gICAgICAgIGNvbnN0IGZpbmFsUHJvbXB0ID0gYFxuICAgICAgWW91IGFyZSBRb2duaXRhLCBhbiBleHBlcnQgU29sYW5hIEFJIGFzc2lzdGFudC4gQmFzZWQgT05MWSBvbiB0aGUgZm9sbG93aW5nIG9mZmljaWFsIFNvbGFuYSBkb2N1bWVudGF0aW9uLCBwcm92aWRlIGEgY2xlYXIsIGFjY3VyYXRlLCBhbmQgaGVscGZ1bCBhbnN3ZXIgdG8gdGhlIHVzZXIncyBxdWVzdGlvbi5cblxuICAgICAgSWYgdGhlIGRvY3VtZW50YXRpb24gZG9lc24ndCBmdWxseSBhbnN3ZXIgdGhlIHF1ZXN0aW9uLCBhY2tub3dsZWRnZSB0aGlzIGFuZCBwcm92aWRlIHdoYXQgaW5mb3JtYXRpb24geW91IGNhbiBmcm9tIHRoZSBhdmFpbGFibGUgY29udGV4dC5cblxuICAgICAgRG9jdW1lbnRhdGlvbiBDb250ZXh0OlxuICAgICAgXCJcIlwiXG4gICAgICAke2NvbnRleHR9XG4gICAgICBcIlwiXCJcbiAgICAgIFxuICAgICAgVXNlciBRdWVzdGlvbjogJHtxdWVyeX1cblxuICAgICAgSW5zdHJ1Y3Rpb25zOlxuICAgICAgLSBQcm92aWRlIGEgY29tcHJlaGVuc2l2ZSBidXQgY29uY2lzZSBhbnN3ZXJcbiAgICAgIC0gVXNlIHRoZSBkb2N1bWVudGF0aW9uIGFzIHlvdXIgcHJpbWFyeSBzb3VyY2VcbiAgICAgIC0gSW5jbHVkZSByZWxldmFudCB0ZWNobmljYWwgZGV0YWlscyBhbmQgZXhhbXBsZXMgd2hlbiBhcHByb3ByaWF0ZVxuICAgICAgLSBGb3JtYXQgeW91ciByZXNwb25zZSB3aXRoIHByb3BlciBtYXJrZG93biBmb3IgcmVhZGFiaWxpdHlcbiAgICAgIC0gSWYgeW91IHJlZmVyZW5jZSBzcGVjaWZpYyBjb25jZXB0cywgZXhwbGFpbiB0aGVtIGJyaWVmbHlcbiAgICAgIFxuICAgICAgQW5zd2VyOlxuICAgIGBcblxuICAgICAgICBjb25zdCBjb21wbGV0aW9uID0gYXdhaXQgb3BlbmFpLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICAgICAgICAgIG1vZGVsOiBcImdwdC00b1wiLFxuICAgICAgICAgICAgbWVzc2FnZXM6IFt7IHJvbGU6ICd1c2VyJywgY29udGVudDogZmluYWxQcm9tcHQgfV0sXG4gICAgICAgICAgICB0ZW1wZXJhdHVyZTogMC4zLFxuICAgICAgICAgICAgbWF4X3Rva2VuczogMTAwMFxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXNwb25zZTogY29tcGxldGlvbi5jaG9pY2VzWzBdLm1lc3NhZ2UuY29udGVudCB8fCAnSSBhcG9sb2dpemUsIGJ1dCBJIGVuY291bnRlcmVkIGFuIGVycm9yIGdlbmVyYXRpbmcgYSByZXNwb25zZS4nLFxuICAgICAgICAgICAgaW50ZW50OiAnZG9jX3F1ZXJ5JyxcbiAgICAgICAgICAgIHNvdXJjZXM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZG9jdW1lbnRhdGlvbicsXG4gICAgICAgICAgICAgICAgZG9jczogbWF0Y2hlcy5tYXAobWF0Y2ggPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogbWF0Y2guY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlX3VybDogbWF0Y2guc291cmNlX3VybCxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlX3RpdGxlOiBtYXRjaC5zb3VyY2VfdGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHNpbWlsYXJpdHk6IG1hdGNoLnNpbWlsYXJpdHlcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRG9jdW1lbnRhdGlvbiBxdWVyeSBmYWlsZWQ6JywgZXJyb3IpXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXNwb25zZTogJ0kgZW5jb3VudGVyZWQgYW4gZXJyb3Igd2hpbGUgc2VhcmNoaW5nIHRoZSBkb2N1bWVudGF0aW9uLiBQbGVhc2UgdHJ5IGFnYWluLicsXG4gICAgICAgICAgICBpbnRlbnQ6ICdkb2NfcXVlcnknXG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogSGFuZGxlIGh5YnJpZCBxdWVyaWVzIHRoYXQgbmVlZCBib3RoIGRvY3VtZW50YXRpb24gYW5kIGxpdmUgZGF0YVxuICovXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVIeWJyaWRRdWVyeShcbiAgICBxdWVyeTogc3RyaW5nLFxuICAgIGFkZHJlc3M/OiBzdHJpbmcgfCBudWxsLFxuICAgIGNoYXRIaXN0b3J5PzogYW55W11cbik6IFByb21pc2U8QUlSb3V0ZXJSZXNwb25zZT4ge1xuXG4gICAgY29uc29sZS5sb2coJ/CflIQgSGFuZGxpbmcgaHlicmlkIHF1ZXJ5Li4uJylcblxuICAgIHRyeSB7XG4gICAgICAgIC8vIEZvciBNVlAsIHN0YXJ0IHdpdGggZG9jdW1lbnRhdGlvbiBzZWFyY2ggYW5kIGVuaGFuY2Ugd2l0aCBsaXZlIGRhdGEgaWYgbmVlZGVkXG4gICAgICAgIGNvbnN0IGRvY1Jlc3VsdCA9IGF3YWl0IGhhbmRsZURvY1F1ZXJ5KHF1ZXJ5KVxuXG4gICAgICAgIC8vIElmIHdlIGhhdmUgYW4gYWRkcmVzcyBvciB0aGUgcXVlcnkgc3VnZ2VzdHMgbGl2ZSBkYXRhIGlzIG5lZWRlZCwgYWxzbyBmZXRjaCB0aGF0XG4gICAgICAgIGNvbnN0IG5lZWRzTGl2ZURhdGEgPSBhZGRyZXNzIHx8XG4gICAgICAgICAgICBxdWVyeS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCd0cmFuc2FjdGlvbicpIHx8XG4gICAgICAgICAgICBxdWVyeS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdmYWlsZWQnKSB8fFxuICAgICAgICAgICAgcXVlcnkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnZXJyb3InKVxuXG4gICAgICAgIGlmIChuZWVkc0xpdmVEYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBsaXZlUmVzdWx0ID0gYXdhaXQgaGFuZGxlT25DaGFpblF1ZXJ5KHF1ZXJ5LCBhZGRyZXNzLCBjaGF0SGlzdG9yeSlcblxuICAgICAgICAgICAgLy8gQ29tYmluZSBib3RoIHJlc3BvbnNlcyBpbnRlbGxpZ2VudGx5XG4gICAgICAgICAgICBjb25zdCBjb21iaW5lZFByb21wdCA9IGBcbiAgICAgICAgWW91IGFyZSBRb2duaXRhLCBhIFNvbGFuYSBBSSBhc3Npc3RhbnQuIFRoZSB1c2VyIGFza2VkOiBcIiR7cXVlcnl9XCJcblxuICAgICAgICBJIGhhdmUgZ2F0aGVyZWQgYm90aCBkb2N1bWVudGF0aW9uIGFuZCBsaXZlIGJsb2NrY2hhaW4gZGF0YS4gUGxlYXNlIHByb3ZpZGUgYSBjb21wcmVoZW5zaXZlIHJlc3BvbnNlIHRoYXQgY29tYmluZXMgYm90aCBzb3VyY2VzIGFwcHJvcHJpYXRlbHkuXG5cbiAgICAgICAgRG9jdW1lbnRhdGlvbiBSZXNwb25zZTpcbiAgICAgICAgJHtkb2NSZXN1bHQucmVzcG9uc2V9XG5cbiAgICAgICAgTGl2ZSBEYXRhIFJlc3BvbnNlOlxuICAgICAgICAke2xpdmVSZXN1bHQucmVzcG9uc2V9XG5cbiAgICAgICAgUGxlYXNlIGNyZWF0ZSBhIHVuaWZpZWQsIGNvaGVyZW50IHJlc3BvbnNlIHRoYXQgbGV2ZXJhZ2VzIGJvdGggdGhlIGRvY3VtZW50YXRpb24gY29udGV4dCBhbmQgdGhlIGxpdmUgZGF0YSB0byBmdWxseSBhbnN3ZXIgdGhlIHVzZXIncyBxdWVzdGlvbi4gRm9jdXMgb24gZXhwbGFpbmluZyB0aGUgY29uY2VwdCBmaXJzdCwgdGhlbiBzaG93aW5nIGhvdyBpdCBhcHBsaWVzIHRvIHRoZSBzcGVjaWZpYyBsaXZlIGRhdGEuXG4gICAgICBgXG5cbiAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRpb24gPSBhd2FpdCBvcGVuYWkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIG1vZGVsOiBcImdwdC00b1wiLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbeyByb2xlOiAndXNlcicsIGNvbnRlbnQ6IGNvbWJpbmVkUHJvbXB0IH1dLFxuICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlOiAwLjMsXG4gICAgICAgICAgICAgICAgbWF4X3Rva2VuczogMTIwMFxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZTogY29tcGxldGlvbi5jaG9pY2VzWzBdLm1lc3NhZ2UuY29udGVudCB8fCAnSSBhcG9sb2dpemUsIGJ1dCBJIGVuY291bnRlcmVkIGFuIGVycm9yIGdlbmVyYXRpbmcgYSByZXNwb25zZS4nLFxuICAgICAgICAgICAgICAgIGludGVudDogJ2h5YnJpZF9xdWVyeScsXG4gICAgICAgICAgICAgICAgc291cmNlczoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaHlicmlkJyxcbiAgICAgICAgICAgICAgICAgICAgZG9jczogZG9jUmVzdWx0LnNvdXJjZXM/LmRvY3MsXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrY2hhaW5fZGF0YTogbGl2ZVJlc3VsdC5zb3VyY2VzPy5ibG9ja2NoYWluX2RhdGFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBubyBsaXZlIGRhdGEgbmVlZGVkLCByZXR1cm4gZG9jdW1lbnRhdGlvbiByZXN1bHRcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmRvY1Jlc3VsdCxcbiAgICAgICAgICAgIGludGVudDogJ2h5YnJpZF9xdWVyeSdcbiAgICAgICAgfVxuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignSHlicmlkIHF1ZXJ5IGZhaWxlZDonLCBlcnJvcilcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3BvbnNlOiAnSSBlbmNvdW50ZXJlZCBhbiBlcnJvciB3aGlsZSBwcm9jZXNzaW5nIHlvdXIgcmVxdWVzdC4gUGxlYXNlIHRyeSBhZ2FpbiBvciBicmVhayB5b3VyIHF1ZXN0aW9uIGludG8gc21hbGxlciBwYXJ0cy4nLFxuICAgICAgICAgICAgaW50ZW50OiAnaHlicmlkX3F1ZXJ5J1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEhhbmRsZSBnZW5lcmFsIHF1ZXJpZXMgYW5kIGdyZWV0aW5nc1xuICovXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVHZW5lcmFsUXVlcnkocXVlcnk6IHN0cmluZyk6IFByb21pc2U8QUlSb3V0ZXJSZXNwb25zZT4ge1xuXG4gICAgY29uc29sZS5sb2coJ/CfkqwgSGFuZGxpbmcgZ2VuZXJhbCBxdWVyeS4uLicpXG5cbiAgICBjb25zdCBnZW5lcmFsUHJvbXB0ID0gYFxuICAgIFlvdSBhcmUgUW9nbml0YSwgYW4gZXhwZXJ0IEFJIGFzc2lzdGFudCBmb3IgZXZlcnl0aGluZyBTb2xhbmEgYmxvY2tjaGFpbi4gVGhlIHVzZXIgc2FpZDogXCIke3F1ZXJ5fVwiXG5cbiAgICBQcm92aWRlIGEgaGVscGZ1bCwgZnJpZW5kbHkgcmVzcG9uc2UuIElmIGl0J3MgYSBncmVldGluZywgaW50cm9kdWNlIHlvdXIgY2FwYWJpbGl0aWVzLiBJZiBpdCdzIHVuY2xlYXIgd2hhdCB0aGV5IHdhbnQsIGd1aWRlIHRoZW0gdG93YXJkIHRoZSB0eXBlcyBvZiBxdWVzdGlvbnMgeW91IGNhbiBhbnN3ZXIuXG5cbiAgICBZb3UgY2FuIGhlbHAgd2l0aDpcbiAgICDwn5SNIExpdmUgYmxvY2tjaGFpbiBhbmFseXNpcyAod2FsbGV0IGJhbGFuY2VzLCB0b2tlbiBhbmFseXNpcywgdHJhbnNhY3Rpb24gaGlzdG9yeSlcbiAgICDwn5OaIFNvbGFuYSBkb2N1bWVudGF0aW9uIChjb25jZXB0cywgZGV2ZWxvcG1lbnQgZ3VpZGVzLCB0cm91Ymxlc2hvb3RpbmcpXG4gICAg8J+boe+4jyBTZWN1cml0eSBhbmFseXNpcyAodG9rZW4gc2FmZXR5LCBzbWFydCBjb250cmFjdCByaXNrcylcbiAgICDwn5SnIERldmVsb3BtZW50IGhlbHAgKEFuY2hvciwgUnVzdCwgcHJvZ3JhbSBkZXZlbG9wbWVudClcblxuICAgIEtlZXAgeW91ciByZXNwb25zZSBjb25jaXNlIGFuZCBlbmNvdXJhZ2luZy5cbiAgYFxuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29tcGxldGlvbiA9IGF3YWl0IG9wZW5haS5jaGF0LmNvbXBsZXRpb25zLmNyZWF0ZSh7XG4gICAgICAgICAgICBtb2RlbDogXCJncHQtNG9cIixcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBbeyByb2xlOiAndXNlcicsIGNvbnRlbnQ6IGdlbmVyYWxQcm9tcHQgfV0sXG4gICAgICAgICAgICB0ZW1wZXJhdHVyZTogMC40LFxuICAgICAgICAgICAgbWF4X3Rva2VuczogNDAwXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3BvbnNlOiBjb21wbGV0aW9uLmNob2ljZXNbMF0ubWVzc2FnZS5jb250ZW50IHx8ICdIZWxsbyEgSVxcJ20gUW9nbml0YSwgeW91ciBTb2xhbmEgQUkgYXNzaXN0YW50LiBIb3cgY2FuIEkgaGVscCB5b3UgdG9kYXk/JyxcbiAgICAgICAgICAgIGludGVudDogJ2dlbmVyYWwnXG4gICAgICAgIH1cblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0dlbmVyYWwgcXVlcnkgZmFpbGVkOicsIGVycm9yKVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzcG9uc2U6ICdIZWxsbyEgSVxcJ20gUW9nbml0YSwgeW91ciBBSSBhc3Npc3RhbnQgZm9yIGV2ZXJ5dGhpbmcgU29sYW5hLiBJIGNhbiBoZWxwIHlvdSB3aXRoIGxpdmUgYmxvY2tjaGFpbiBkYXRhLCBkb2N1bWVudGF0aW9uLCBzZWN1cml0eSBhbmFseXNpcywgYW5kIGRldmVsb3BtZW50IHF1ZXN0aW9ucy4gV2hhdCB3b3VsZCB5b3UgbGlrZSB0byBrbm93PycsXG4gICAgICAgICAgICBpbnRlbnQ6ICdnZW5lcmFsJ1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIm9wZW5haSIsIktub3dsZWRnZVNlcnZpY2UiLCJyb3V0ZVF1ZXJ5IiwicXVlcnkiLCJhZGRyZXNzIiwiY2hhdEhpc3RvcnkiLCJjb25zb2xlIiwibG9nIiwiaW50ZW50UHJvbXB0IiwiaW50ZW50UmVzcG9uc2UiLCJjaGF0IiwiY29tcGxldGlvbnMiLCJjcmVhdGUiLCJtb2RlbCIsIm1lc3NhZ2VzIiwicm9sZSIsImNvbnRlbnQiLCJyZXNwb25zZV9mb3JtYXQiLCJ0eXBlIiwidGVtcGVyYXR1cmUiLCJtYXhfdG9rZW5zIiwiaW50ZW50UmVzdWx0IiwiSlNPTiIsInBhcnNlIiwiY2hvaWNlcyIsIm1lc3NhZ2UiLCJpbnRlbnQiLCJoYW5kbGVPbkNoYWluUXVlcnkiLCJoYW5kbGVEb2NRdWVyeSIsImhhbmRsZUh5YnJpZFF1ZXJ5IiwiaGFuZGxlR2VuZXJhbFF1ZXJ5IiwiZXJyb3IiLCJiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIlZFUkNFTF9VUkwiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJzdHJpbmdpZnkiLCJkYXRhIiwianNvbiIsInNvdXJjZXMiLCJibG9ja2NoYWluX2RhdGEiLCJ0b29sUmVzdWx0cyIsIm1hdGNoZXMiLCJzZWFyY2hLbm93bGVkZ2VCYXNlIiwibGVuZ3RoIiwiY29udGV4dCIsIm1hcCIsIm1hdGNoIiwic291cmNlX3RpdGxlIiwiam9pbiIsImZpbmFsUHJvbXB0IiwiY29tcGxldGlvbiIsImRvY3MiLCJzb3VyY2VfdXJsIiwic2ltaWxhcml0eSIsImRvY1Jlc3VsdCIsIm5lZWRzTGl2ZURhdGEiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwibGl2ZVJlc3VsdCIsImNvbWJpbmVkUHJvbXB0IiwiZ2VuZXJhbFByb21wdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/aiRouter.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/openai.ts":
/*!***************************!*\
  !*** ./src/lib/openai.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   openai: () => (/* binding */ openai)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n\nif (!process.env.OPENAI_API_KEY) {\n    throw new Error(\"Missing OPENAI_API_KEY environment variable\");\n}\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (openai);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL29wZW5haS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkI7QUFFM0IsSUFBSSxDQUFDQyxRQUFRQyxHQUFHLENBQUNDLGNBQWMsRUFBRTtJQUM3QixNQUFNLElBQUlDLE1BQU07QUFDcEI7QUFFTyxNQUFNQyxTQUFTLElBQUlMLDhDQUFNQSxDQUFDO0lBQzdCTSxRQUFRTCxRQUFRQyxHQUFHLENBQUNDLGNBQWM7QUFDdEMsR0FBRTtBQUVGLGlFQUFlRSxNQUFNQSxFQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcW9nbml0YS8uL3NyYy9saWIvb3BlbmFpLnRzP2E1YzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9wZW5BSSBmcm9tICdvcGVuYWknXG5cbmlmICghcHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9LRVkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgT1BFTkFJX0FQSV9LRVkgZW52aXJvbm1lbnQgdmFyaWFibGUnKVxufVxuXG5leHBvcnQgY29uc3Qgb3BlbmFpID0gbmV3IE9wZW5BSSh7XG4gICAgYXBpS2V5OiBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSxcbn0pXG5cbmV4cG9ydCBkZWZhdWx0IG9wZW5haVxuIl0sIm5hbWVzIjpbIk9wZW5BSSIsInByb2Nlc3MiLCJlbnYiLCJPUEVOQUlfQVBJX0tFWSIsIkVycm9yIiwib3BlbmFpIiwiYXBpS2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/openai.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   supabaseAdmin: () => (/* binding */ supabaseAdmin)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://cerjdzrkwevucknlgbbk.supabase.co\";\nconst supabaseAnonKey = process.env.SUPABASE_ANON_KEY;\nconst supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n// Client for frontend operations\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Admin client for backend operations (has elevated permissions)\nconst supabaseAdmin = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceRoleKey, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3N1cGFiYXNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRDtBQUVwRCxNQUFNQyxjQUFjQywwQ0FBb0M7QUFDeEQsTUFBTUcsa0JBQWtCSCxRQUFRQyxHQUFHLENBQUNHLGlCQUFpQjtBQUNyRCxNQUFNQyx5QkFBeUJMLFFBQVFDLEdBQUcsQ0FBQ0sseUJBQXlCO0FBRXBFLGlDQUFpQztBQUMxQixNQUFNQyxXQUFXVCxtRUFBWUEsQ0FBQ0MsYUFBYUksaUJBQWdCO0FBRWxFLGlFQUFpRTtBQUMxRCxNQUFNSyxnQkFBZ0JWLG1FQUFZQSxDQUFDQyxhQUFhTSx3QkFBd0I7SUFDM0VJLE1BQU07UUFDRkMsa0JBQWtCO1FBQ2xCQyxnQkFBZ0I7SUFDcEI7QUFDSixHQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcW9nbml0YS8uL3NyYy9saWIvc3VwYWJhc2UudHM/MDZlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnXG5cbmNvbnN0IHN1cGFiYXNlVXJsID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIVxuY29uc3Qgc3VwYWJhc2VBbm9uS2V5ID0gcHJvY2Vzcy5lbnYuU1VQQUJBU0VfQU5PTl9LRVkhXG5jb25zdCBzdXBhYmFzZVNlcnZpY2VSb2xlS2V5ID0gcHJvY2Vzcy5lbnYuU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWSFcblxuLy8gQ2xpZW50IGZvciBmcm9udGVuZCBvcGVyYXRpb25zXG5leHBvcnQgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlQW5vbktleSlcblxuLy8gQWRtaW4gY2xpZW50IGZvciBiYWNrZW5kIG9wZXJhdGlvbnMgKGhhcyBlbGV2YXRlZCBwZXJtaXNzaW9ucylcbmV4cG9ydCBjb25zdCBzdXBhYmFzZUFkbWluID0gY3JlYXRlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZVNlcnZpY2VSb2xlS2V5LCB7XG4gICAgYXV0aDoge1xuICAgICAgICBhdXRvUmVmcmVzaFRva2VuOiBmYWxzZSxcbiAgICAgICAgcGVyc2lzdFNlc3Npb246IGZhbHNlXG4gICAgfVxufSlcblxuLy8gRGF0YWJhc2UgdHlwZXMgZm9yIG91ciBrbm93bGVkZ2UgYmFzZVxuZXhwb3J0IGludGVyZmFjZSBEb2N1bWVudENodW5rIHtcbiAgICBpZDogc3RyaW5nXG4gICAgY29udGVudDogc3RyaW5nXG4gICAgZW1iZWRkaW5nOiBudW1iZXJbXVxuICAgIHNvdXJjZV91cmw6IHN0cmluZ1xuICAgIHNvdXJjZV90aXRsZTogc3RyaW5nXG4gICAgY2h1bmtfaW5kZXg6IG51bWJlclxuICAgIGNyZWF0ZWRfYXQ6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERvY3VtZW50TWF0Y2ggZXh0ZW5kcyBEb2N1bWVudENodW5rIHtcbiAgICBzaW1pbGFyaXR5OiBudW1iZXJcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJzdXBhYmFzZVVybCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJzdXBhYmFzZUFub25LZXkiLCJTVVBBQkFTRV9BTk9OX0tFWSIsInN1cGFiYXNlU2VydmljZVJvbGVLZXkiLCJTVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZIiwic3VwYWJhc2UiLCJzdXBhYmFzZUFkbWluIiwiYXV0aCIsImF1dG9SZWZyZXNoVG9rZW4iLCJwZXJzaXN0U2Vzc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/knowledgeService.ts":
/*!******************************************!*\
  !*** ./src/services/knowledgeService.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KnowledgeService: () => (/* binding */ KnowledgeService)\n/* harmony export */ });\n/* harmony import */ var _lib_openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/openai */ \"(rsc)/./src/lib/openai.ts\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./src/lib/supabase.ts\");\n\n\nclass KnowledgeService {\n    // Generate embedding for a text using OpenAI\n    static async getEmbedding(text) {\n        try {\n            const response = await _lib_openai__WEBPACK_IMPORTED_MODULE_0__.openai.embeddings.create({\n                model: \"text-embedding-3-small\",\n                input: text.replace(/\\n/g, \" \")\n            });\n            return response.data[0].embedding;\n        } catch (error) {\n            console.error(\"Error generating embedding:\", error);\n            throw error;\n        }\n    }\n    /**\n     * Search the knowledge base for relevant documents\n     */ static async searchKnowledgeBase(query, matchCount = 5, threshold = 0.60) {\n        try {\n            // 1. Generate embedding for the query\n            const queryEmbedding = await this.getEmbedding(query);\n            // 2. Search for similar documents using the match_documents function\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.rpc(\"match_documents\", {\n                query_embedding: queryEmbedding,\n                match_threshold: threshold,\n                match_count: matchCount\n            });\n            if (error) {\n                console.error(\"Error searching knowledge base:\", error);\n                return [];\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Knowledge base search failed:\", error);\n            return [];\n        }\n    }\n    /**\n     * Store a document chunk in the knowledge base\n     */ static async storeChunk(content, sourceUrl, sourceTitle, chunkIndex) {\n        try {\n            // Generate embedding for the content\n            const embedding = await this.getEmbedding(content);\n            // Store in database\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"documents\").insert({\n                content,\n                embedding,\n                source_url: sourceUrl,\n                source_title: sourceTitle,\n                chunk_index: chunkIndex\n            });\n            if (error) {\n                console.error(\"Error storing document chunk:\", error);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Failed to store chunk:\", error);\n            return false;\n        }\n    }\n    /**\n     * Check if we have documents for a specific source\n     */ static async hasDocuments(sourceUrl) {\n        try {\n            const { count, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"documents\").select(\"id\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"source_url\", sourceUrl);\n            if (error) {\n                console.error(\"Error checking documents:\", error);\n                return false;\n            }\n            return (count || 0) > 0;\n        } catch (error) {\n            console.error(\"Failed to check documents:\", error);\n            return false;\n        }\n    }\n    /**\n     * Clear all documents for a specific source (useful for re-ingestion)\n     */ static async clearSource(sourceUrl) {\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"documents\").delete().eq(\"source_url\", sourceUrl);\n            if (error) {\n                console.error(\"Error clearing source:\", error);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Failed to clear source:\", error);\n            return false;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/knowledgeService.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/tr46","vendor-chunks/node-fetch","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/ms","vendor-chunks/event-target-shim","vendor-chunks/formdata-node","vendor-chunks/abort-controller","vendor-chunks/openai","vendor-chunks/@supabase","vendor-chunks/form-data-encoder","vendor-chunks/agentkeepalive","vendor-chunks/web-streams-polyfill","vendor-chunks/humanize-ms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat-rag%2Froute&page=%2Fapi%2Fchat-rag%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat-rag%2Froute.ts&appDir=%2Fhome%2Fakintolax%2Fwindsurf-project%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fakintolax%2Fwindsurf-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();