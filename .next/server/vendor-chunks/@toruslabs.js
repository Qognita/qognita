"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@toruslabs";
exports.ids = ["vendor-chunks/@toruslabs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACCOUNT_CATEGORY: () => (/* binding */ ACCOUNT_CATEGORY),\n/* harmony export */   ACTIVITY_ACTION: () => (/* binding */ ACTIVITY_ACTION),\n/* harmony export */   ACTIVITY_ACTION_ACCEPT_NFT_OFFER: () => (/* binding */ ACTIVITY_ACTION_ACCEPT_NFT_OFFER),\n/* harmony export */   ACTIVITY_ACTION_ALL: () => (/* binding */ ACTIVITY_ACTION_ALL),\n/* harmony export */   ACTIVITY_ACTION_BURN: () => (/* binding */ ACTIVITY_ACTION_BURN),\n/* harmony export */   ACTIVITY_ACTION_CANCEL_NFT_OFFER: () => (/* binding */ ACTIVITY_ACTION_CANCEL_NFT_OFFER),\n/* harmony export */   ACTIVITY_ACTION_CREATE_NFT_OFFER: () => (/* binding */ ACTIVITY_ACTION_CREATE_NFT_OFFER),\n/* harmony export */   ACTIVITY_ACTION_CREATE_TRUSTLINE: () => (/* binding */ ACTIVITY_ACTION_CREATE_TRUSTLINE),\n/* harmony export */   ACTIVITY_ACTION_RECEIVE: () => (/* binding */ ACTIVITY_ACTION_RECEIVE),\n/* harmony export */   ACTIVITY_ACTION_REMOVE_TRUSTLINE: () => (/* binding */ ACTIVITY_ACTION_REMOVE_TRUSTLINE),\n/* harmony export */   ACTIVITY_ACTION_SEND: () => (/* binding */ ACTIVITY_ACTION_SEND),\n/* harmony export */   ACTIVITY_ACTION_TOPUP: () => (/* binding */ ACTIVITY_ACTION_TOPUP),\n/* harmony export */   ACTIVITY_PERIOD_ALL: () => (/* binding */ ACTIVITY_PERIOD_ALL),\n/* harmony export */   ACTIVITY_PERIOD_MONTH_ONE: () => (/* binding */ ACTIVITY_PERIOD_MONTH_ONE),\n/* harmony export */   ACTIVITY_PERIOD_MONTH_SIX: () => (/* binding */ ACTIVITY_PERIOD_MONTH_SIX),\n/* harmony export */   ACTIVITY_PERIOD_WEEK_ONE: () => (/* binding */ ACTIVITY_PERIOD_WEEK_ONE),\n/* harmony export */   ACTIVITY_STATUS_CANCELLED: () => (/* binding */ ACTIVITY_STATUS_CANCELLED),\n/* harmony export */   ACTIVITY_STATUS_CANCELLING: () => (/* binding */ ACTIVITY_STATUS_CANCELLING),\n/* harmony export */   ACTIVITY_STATUS_PENDING: () => (/* binding */ ACTIVITY_STATUS_PENDING),\n/* harmony export */   ACTIVITY_STATUS_SUCCESSFUL: () => (/* binding */ ACTIVITY_STATUS_SUCCESSFUL),\n/* harmony export */   ACTIVITY_STATUS_UNSUCCESSFUL: () => (/* binding */ ACTIVITY_STATUS_UNSUCCESSFUL),\n/* harmony export */   BROADCAST_CHANNELS: () => (/* binding */ BROADCAST_CHANNELS),\n/* harmony export */   BROADCAST_CHANNELS_MSGS: () => (/* binding */ BROADCAST_CHANNELS_MSGS),\n/* harmony export */   BUTTON_POSITION: () => (/* binding */ BUTTON_POSITION),\n/* harmony export */   BaseBlockTracker: () => (/* binding */ BaseBlockTracker),\n/* harmony export */   BaseController: () => (/* binding */ BaseController),\n/* harmony export */   BaseCurrencyController: () => (/* binding */ BaseCurrencyController),\n/* harmony export */   BaseEmbedController: () => (/* binding */ BaseEmbedController),\n/* harmony export */   BaseKeyringController: () => (/* binding */ BaseKeyringController),\n/* harmony export */   BasePreferencesController: () => (/* binding */ BasePreferencesController),\n/* harmony export */   BaseTransactionStateManager: () => (/* binding */ BaseTransactionStateManager),\n/* harmony export */   BroadcastChannelHandler: () => (/* binding */ BroadcastChannelHandler),\n/* harmony export */   CHAIN_NAMESPACES: () => (/* binding */ CHAIN_NAMESPACES),\n/* harmony export */   COMMUNICATION_JRPC_METHODS: () => (/* binding */ COMMUNICATION_JRPC_METHODS),\n/* harmony export */   COMMUNICATION_NOTIFICATIONS: () => (/* binding */ COMMUNICATION_NOTIFICATIONS),\n/* harmony export */   CONFIRMATION_STRATEGY: () => (/* binding */ CONFIRMATION_STRATEGY),\n/* harmony export */   CommunicationWindowManager: () => (/* binding */ CommunicationWindowManager),\n/* harmony export */   ControllerEvents: () => (/* binding */ ControllerEvents),\n/* harmony export */   DEFAULT_PREFERENCES: () => (/* binding */ DEFAULT_PREFERENCES),\n/* harmony export */   FEATURES_CONFIRM_WINDOW: () => (/* binding */ FEATURES_CONFIRM_WINDOW),\n/* harmony export */   FEATURES_DEFAULT_POPUP_WINDOW: () => (/* binding */ FEATURES_DEFAULT_POPUP_WINDOW),\n/* harmony export */   FEATURES_DEFAULT_WALLET_WINDOW: () => (/* binding */ FEATURES_DEFAULT_WALLET_WINDOW),\n/* harmony export */   FEATURES_PROVIDER_CHANGE_WINDOW: () => (/* binding */ FEATURES_PROVIDER_CHANGE_WINDOW),\n/* harmony export */   LOGIN_PROVIDER: () => (/* binding */ LOGIN_PROVIDER),\n/* harmony export */   PAYMENT_PROVIDER: () => (/* binding */ PAYMENT_PROVIDER),\n/* harmony export */   POPUP_LOADED: () => (/* binding */ POPUP_LOADED),\n/* harmony export */   POPUP_RESULT: () => (/* binding */ POPUP_RESULT),\n/* harmony export */   PROVIDER_JRPC_METHODS: () => (/* binding */ PROVIDER_JRPC_METHODS),\n/* harmony export */   PROVIDER_NOTIFICATIONS: () => (/* binding */ PROVIDER_NOTIFICATIONS),\n/* harmony export */   PopupHandler: () => (/* binding */ PopupHandler),\n/* harmony export */   PopupStoreChannel: () => (/* binding */ PopupStoreChannel),\n/* harmony export */   PopupWithBcHandler: () => (/* binding */ PopupWithBcHandler),\n/* harmony export */   RedirectHandler: () => (/* binding */ RedirectHandler),\n/* harmony export */   SETUP_COMPLETE: () => (/* binding */ SETUP_COMPLETE),\n/* harmony export */   StreamWindow: () => (/* binding */ StreamWindow),\n/* harmony export */   TRANSACTION_TYPES: () => (/* binding */ TRANSACTION_TYPES),\n/* harmony export */   TX_EVENTS: () => (/* binding */ TX_EVENTS),\n/* harmony export */   TransactionStatus: () => (/* binding */ TransactionStatus),\n/* harmony export */   UserError: () => (/* binding */ UserError),\n/* harmony export */   WSApiClient: () => (/* binding */ WSApiClient),\n/* harmony export */   addressSlicer: () => (/* binding */ addressSlicer),\n/* harmony export */   authServer: () => (/* binding */ authServer),\n/* harmony export */   broadcastChannelOptions: () => (/* binding */ broadcastChannelOptions),\n/* harmony export */   cloneDeep: () => (/* binding */ cloneDeep),\n/* harmony export */   concatSig: () => (/* binding */ concatSig),\n/* harmony export */   createChangeProviderMiddlewareMiddleware: () => (/* binding */ createChangeProviderMiddlewareMiddleware),\n/* harmony export */   createCommunicationMiddleware: () => (/* binding */ createCommunicationMiddleware),\n/* harmony export */   createEventEmitterProxy: () => (/* binding */ createEventEmitterProxy),\n/* harmony export */   createFetchConfigFromReq: () => (/* binding */ createFetchConfigFromReq),\n/* harmony export */   createFetchMiddleware: () => (/* binding */ createFetchMiddleware),\n/* harmony export */   createGenericJRPCMiddleware: () => (/* binding */ createGenericJRPCMiddleware),\n/* harmony export */   createInflightCacheMiddleware: () => (/* binding */ createInflightCacheMiddleware),\n/* harmony export */   createLoggerMiddleware: () => (/* binding */ createLoggerMiddleware),\n/* harmony export */   createOriginMiddleware: () => (/* binding */ createOriginMiddleware),\n/* harmony export */   createRandomId: () => (/* binding */ createRandomId),\n/* harmony export */   createSwappableProxy: () => (/* binding */ createSwappableProxy),\n/* harmony export */   createTopupMiddleware: () => (/* binding */ createTopupMiddleware),\n/* harmony export */   formatDate: () => (/* binding */ formatDate),\n/* harmony export */   formatSmallNumbers: () => (/* binding */ formatSmallNumbers),\n/* harmony export */   formatTime: () => (/* binding */ formatTime),\n/* harmony export */   getCustomDeviceInfo: () => (/* binding */ getCustomDeviceInfo),\n/* harmony export */   getHeaders: () => (/* binding */ getHeaders),\n/* harmony export */   getPopupFeatures: () => (/* binding */ getPopupFeatures),\n/* harmony export */   getTxStatusText: () => (/* binding */ getTxStatusText),\n/* harmony export */   handleRedirectParameters: () => (/* binding */ handleRedirectParameters),\n/* harmony export */   hashMessage: () => (/* binding */ hashMessage),\n/* harmony export */   intToHex: () => (/* binding */ intToHex),\n/* harmony export */   isUnauthorizedError: () => (/* binding */ isUnauthorizedError),\n/* harmony export */   omitBy: () => (/* binding */ omitBy),\n/* harmony export */   padWithZeroes: () => (/* binding */ padWithZeroes),\n/* harmony export */   pickBy: () => (/* binding */ pickBy),\n/* harmony export */   randomId: () => (/* binding */ randomId),\n/* harmony export */   signChallenge: () => (/* binding */ signChallenge),\n/* harmony export */   signMessage: () => (/* binding */ signMessage),\n/* harmony export */   significantDigits: () => (/* binding */ significantDigits),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   timeout: () => (/* binding */ timeout$1),\n/* harmony export */   transactionMatchesNetwork: () => (/* binding */ transactionMatchesNetwork),\n/* harmony export */   verifySignedChallenge: () => (/* binding */ verifySignedChallenge)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @toruslabs/openlogin-utils */ \"(ssr)/./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @toruslabs/broadcast-channel */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/broadcastChannel.esm.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! bowser */ \"(ssr)/./node_modules/bowser/src/bowser.js\");\n/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! jwt-decode */ \"(ssr)/./node_modules/jwt-decode/build/esm/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Controller class that provides configuration, state management, and subscriptions\n */ class BaseController extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.SafeEventEmitter {\n    /**\n   * Creates a BaseController instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */ constructor({ config = {}, state = {} }){\n        super();\n        // Use assign since generics can't be spread: https://git.io/vpRhY\n        /**\n     * Default options used to configure this controller\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"defaultConfig\", {});\n        /**\n     * Default state set on this controller\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"defaultState\", {});\n        /**\n     * Determines if listeners are notified of state changes\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"disabled\", false);\n        /**\n     * Name of this controller used during composition\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"name\", \"BaseController\");\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"initialConfig\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"initialState\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"internalConfig\", this.defaultConfig);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"internalState\", this.defaultState);\n        this.initialState = state;\n        this.initialConfig = config;\n    }\n    /**\n   * Retrieves current controller configuration options\n   *\n   * @returns - Current configuration\n   */ get config() {\n        return this.internalConfig;\n    }\n    /**\n   * Retrieves current controller state\n   *\n   * @returns - Current state\n   */ get state() {\n        return this.internalState;\n    }\n    /**\n   * Updates controller configuration\n   *\n   * @param config - New configuration options\n   * @param overwrite - Overwrite config instead of merging\n   * @param fullUpdate - Boolean that defines if the update is partial or not\n   */ configure(config, overwrite = false, fullUpdate = true) {\n        if (fullUpdate) {\n            this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n            for(const key in this.internalConfig){\n                if (typeof this.internalConfig[key] !== \"undefined\") {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    this[key] = this.internalConfig[key];\n                }\n            }\n        } else {\n            for(const key in config){\n                /* istanbul ignore else */ if (typeof this.internalConfig[key] !== \"undefined\") {\n                    this.internalConfig[key] = config[key];\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n    /**\n   * Updates controller state\n   *\n   * @param state - New state\n   * @param overwrite - Overwrite state instead of merging\n   */ update(state, overwrite = false) {\n        this.internalState = overwrite ? _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, state) : _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.internalState), state);\n        this.emit(\"store\", this.internalState);\n    }\n    /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns - This controller instance\n   */ initialize() {\n        this.internalState = this.defaultState;\n        this.internalConfig = this.defaultConfig;\n        this.configure(this.initialConfig);\n        this.update(this.initialState);\n        return this;\n    }\n}\nconst sec = 1000;\nconst calculateSum = (accumulator, currentValue)=>accumulator + currentValue;\nconst blockTrackerEvents = [\n    \"sync\",\n    \"latest\"\n];\nclass BaseBlockTracker extends BaseController {\n    constructor({ config = {}, state = {} }){\n        super({\n            config,\n            state\n        });\n        // config\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"name\", \"BaseBlockTracker\");\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"_blockResetTimeout\", void 0);\n        this.defaultState = {\n            _currentBlock: {\n                idempotencyKey: \"\"\n            },\n            _isRunning: false\n        };\n        this.defaultConfig = {\n            blockResetDuration: 20 * sec\n        };\n        this.initialize();\n        // bind functions for internal use\n        this._onNewListener = this._onNewListener.bind(this);\n        this._onRemoveListener = this._onRemoveListener.bind(this);\n        this._resetCurrentBlock = this._resetCurrentBlock.bind(this);\n        // listen for handler changes\n        this._setupInternalEvents();\n    }\n    isRunning() {\n        return this.state._isRunning;\n    }\n    getCurrentBlock() {\n        return this.state._currentBlock;\n    }\n    async getLatestBlock() {\n        // return if available\n        if (this.state._currentBlock.idempotencyKey) {\n            return this.state._currentBlock;\n        }\n        // wait for a new latest block\n        const latestBlock = await new Promise((resolve)=>{\n            this.once(\"latest\", (block)=>{\n                if (block) {\n                    resolve(block);\n                }\n            });\n        });\n        // return newly set current block\n        return latestBlock;\n    }\n    // dont allow module consumer to remove our internal event listeners\n    removeAllListeners(eventName) {\n        if (eventName) {\n            super.removeAllListeners(eventName);\n        } else {\n            super.removeAllListeners();\n        }\n        // re-add internal events\n        this._setupInternalEvents();\n        // trigger stop check just in case\n        this._onRemoveListener();\n        return this;\n    }\n    /**\n   * To be implemented in subclass.\n   */ _start() {\n    // default behavior is noop\n    }\n    /**\n   * To be implemented in subclass.\n   */ _end() {\n    // default behavior is noop\n    }\n    _newPotentialLatest(newBlock) {\n        const currentBlock = this.state._currentBlock;\n        // only update if block number is higher\n        if (currentBlock && newBlock.idempotencyKey === currentBlock.idempotencyKey) {\n            return;\n        }\n        this._setCurrentBlock(newBlock);\n    }\n    _setupInternalEvents() {\n        // first remove listeners for idempotency\n        this.removeListener(\"newListener\", this._onNewListener);\n        this.removeListener(\"removeListener\", this._onRemoveListener);\n        // then add them\n        this.on(\"removeListener\", this._onRemoveListener);\n        this.on(\"newListener\", this._onNewListener);\n    }\n    _onNewListener() {\n        this._maybeStart();\n    }\n    _onRemoveListener() {\n        // `removeListener` is called *after* the listener is removed\n        if (this._getBlockTrackerEventCount() > 0) {\n            return;\n        }\n        this._maybeEnd();\n    }\n    _maybeStart() {\n        if (this.state._isRunning) {\n            return;\n        }\n        this.state._isRunning = true;\n        // cancel setting latest block to stale\n        this._cancelBlockResetTimeout();\n        this._start();\n    }\n    _maybeEnd() {\n        if (!this.state._isRunning) {\n            return;\n        }\n        this.state._isRunning = false;\n        this._setupBlockResetTimeout();\n        this._end();\n    }\n    _getBlockTrackerEventCount() {\n        return blockTrackerEvents.map((eventName)=>this.listenerCount(eventName)).reduce(calculateSum);\n    }\n    _setCurrentBlock(newBlock) {\n        const oldBlock = this.state._currentBlock;\n        this.update({\n            _currentBlock: newBlock\n        });\n        this.emit(\"latest\", newBlock);\n        this.emit(\"sync\", {\n            oldBlock,\n            newBlock\n        });\n    }\n    _setupBlockResetTimeout() {\n        // clear any existing timeout\n        this._cancelBlockResetTimeout();\n        // clear latest block when stale\n        this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this.config.blockResetDuration);\n        // nodejs - dont hold process open\n        if (this._blockResetTimeout.unref) {\n            this._blockResetTimeout.unref();\n        }\n    }\n    _cancelBlockResetTimeout() {\n        if (this._blockResetTimeout) {\n            clearTimeout(this._blockResetTimeout);\n        }\n    }\n    _resetCurrentBlock() {\n        this.update({\n            _currentBlock: {\n                idempotencyKey: \"\"\n            }\n        });\n    }\n}\nconst filterNoop = ()=>true;\nconst internalEvents = [\n    \"newListener\",\n    \"removeListener\"\n];\nconst externalEventFilter = (name)=>!internalEvents.includes(name);\nfunction getRawListeners(eventEmitter, name) {\n    // prefer native\n    return typeof eventEmitter.rawListeners !== \"undefined\" ? eventEmitter.rawListeners(name) : eventEmitter.listeners(name);\n}\nfunction createEventEmitterProxy(initialTarget, opts) {\n    // parse options\n    const finalOpts = opts || {};\n    let eventFilter = finalOpts.eventFilter || filterNoop;\n    if (typeof eventFilter === \"string\" && eventFilter === \"skipInternal\") eventFilter = externalEventFilter;\n    if (typeof eventFilter !== \"function\") throw new Error(\"createEventEmitterProxy - Invalid eventFilter\");\n    let target = initialTarget;\n    let setTarget = (newTarget)=>{\n        const oldTarget = target;\n        target = newTarget;\n        oldTarget.eventNames().filter(eventFilter).forEach((name)=>{\n            getRawListeners(oldTarget, name).forEach((handler)=>{\n                newTarget.on(name, handler);\n            });\n        });\n        // remove old listeners\n        oldTarget.removeAllListeners();\n    };\n    const proxy = new Proxy({}, {\n        get: (_, name)=>{\n            // override `setTarget` access\n            if (name === \"setTarget\") return setTarget;\n            return target[name];\n        },\n        set: (_, name, value)=>{\n            // allow `setTarget` overrides\n            if (name === \"setTarget\") {\n                setTarget = value;\n                return true;\n            }\n            target[name] = value;\n            return true;\n        }\n    });\n    return proxy;\n}\nfunction createSwappableProxy(initialTarget) {\n    let target = initialTarget;\n    let setTarget = (newTarget)=>{\n        target = newTarget;\n    };\n    const proxy = new Proxy({}, {\n        get: (_, name)=>{\n            // override `setTarget` access\n            if (name === \"setTarget\") return setTarget;\n            return target[name];\n        },\n        set: (_, name, value)=>{\n            // allow `setTarget` overrides\n            if (name === \"setTarget\") {\n                setTarget = value;\n                return true;\n            }\n            target[name] = value;\n            return true;\n        }\n    });\n    return proxy;\n}\n// every ten minutes\nconst POLLING_INTERVAL = 600000;\nclass BaseCurrencyController extends BaseController {\n    constructor({ config = {}, state }){\n        super({\n            config,\n            state\n        });\n        this.defaultState = {\n            currentCurrency: \"usd\",\n            conversionRate: 0,\n            conversionDate: \"N/A\",\n            nativeCurrency: \"ETH\"\n        };\n        this.defaultConfig = {\n            pollInterval: POLLING_INTERVAL\n        };\n        this.initialize();\n    }\n    //\n    // PUBLIC METHODS\n    //\n    getNativeCurrency() {\n        return this.state.nativeCurrency;\n    }\n    setNativeCurrency(nativeCurrency) {\n        this.update({\n            nativeCurrency,\n            ticker: nativeCurrency\n        });\n    }\n    getCurrentCurrency() {\n        return this.state.currentCurrency;\n    }\n    setCurrentCurrency(currentCurrency) {\n        this.update({\n            currentCurrency\n        });\n    }\n    /**\n   * A getter for the conversionRate property\n   *\n   * @returns The conversion rate from ETH to the selected currency.\n   *\n   */ getConversionRate() {\n        return this.state.conversionRate;\n    }\n    setConversionRate(conversionRate) {\n        this.update({\n            conversionRate\n        });\n    }\n    /**\n   * A getter for the conversionDate property\n   *\n   * @returns The date at which the conversion rate was set. Expressed in milliseconds since midnight of\n   * January 1, 1970\n   *\n   */ getConversionDate() {\n        return this.state.conversionDate;\n    }\n    setConversionDate(conversionDate) {\n        this.update({\n            conversionDate\n        });\n    }\n}\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n    height: 660,\n    width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n    height: 740,\n    width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n    height: 700,\n    width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n    height: 700,\n    width: 450\n};\nconst POPUP_LOADED = \"popup_loaded\";\nconst POPUP_RESULT = \"popup_result\";\nconst SETUP_COMPLETE = \"setup_complete\";\nconst ACTIVITY_ACTION_ALL = \"walletActivity.allTransactions\";\nconst ACTIVITY_ACTION_SEND = \"walletActivity.send\";\nconst ACTIVITY_ACTION_BURN = \"walletActivity.burn\";\nconst ACTIVITY_ACTION_RECEIVE = \"walletActivity.receive\";\nconst ACTIVITY_ACTION_TOPUP = \"walletActivity.topup\";\nconst ACTIVITY_ACTION_CREATE_TRUSTLINE = \"walletActivity.createTrustline\";\nconst ACTIVITY_ACTION_REMOVE_TRUSTLINE = \"walletActivity.removeTrustline\";\nconst ACTIVITY_ACTION_CREATE_NFT_OFFER = \"walletActivity.createNftOffer\";\nconst ACTIVITY_ACTION_ACCEPT_NFT_OFFER = \"walletActivity.acceptNftOffer\";\nconst ACTIVITY_ACTION_CANCEL_NFT_OFFER = \"walletActivity.cancelNftOffer\";\nconst ACTIVITY_PERIOD_ALL = \"walletActivity.all\";\nconst ACTIVITY_PERIOD_WEEK_ONE = \"walletActivity.lastOneWeek\";\nconst ACTIVITY_PERIOD_MONTH_ONE = \"walletActivity.lastOneMonth\";\nconst ACTIVITY_PERIOD_MONTH_SIX = \"walletActivity.lastSixMonts\";\nconst ACTIVITY_STATUS_SUCCESSFUL = \"walletActivity.successful\";\nconst ACTIVITY_STATUS_UNSUCCESSFUL = \"walletActivity.unsuccessful\";\nconst ACTIVITY_STATUS_PENDING = \"walletActivity.pending\";\nconst ACTIVITY_STATUS_CANCELLED = \"walletActivity.cancelled\";\nconst ACTIVITY_STATUS_CANCELLING = \"walletActivity.cancelling\";\nconst COMMUNICATION_NOTIFICATIONS = {\n    IFRAME_STATUS: \"iframe_status\",\n    // Tell embed to close the window\n    CLOSE_WINDOW: \"close_window\",\n    USER_LOGGED_IN: \"user_logged_in\",\n    USER_LOGGED_OUT: \"user_logged_out\"\n};\nconst COMMUNICATION_JRPC_METHODS = {\n    LOGOUT: \"logout\",\n    WALLET_INSTANCE_ID: \"wallet_instance_id\",\n    USER_INFO: \"user_info\",\n    SET_PROVIDER: \"set_provider\",\n    TOPUP: \"topup\",\n    IFRAME_STATUS: \"iframe_status\",\n    // user has closed the window from embed's side\n    CLOSED_WINDOW: \"closed_window\",\n    WINDOW_BLOCKED: \"window_blocked\",\n    GET_PROVIDER_STATE: \"get_provider_state\",\n    LOGIN_WITH_PRIVATE_KEY: \"login_with_private_key\",\n    SHOW_WALLET_CONNECT: \"show_wallet_connect\",\n    SHOW_CHECKOUT: \"show_checkout\",\n    SHOW_WALLET_UI: \"show_wallet_ui\",\n    LOGIN_WITH_SESSION_ID: \"login_with_session_id\"\n};\nconst PROVIDER_JRPC_METHODS = {\n    GET_PROVIDER_STATE: \"wallet_get_provider_state\"\n};\nconst PROVIDER_NOTIFICATIONS = {\n    ACCOUNTS_CHANGED: \"wallet_accounts_changed\",\n    CHAIN_CHANGED: \"wallet_chain_changed\",\n    UNLOCK_STATE_CHANGED: \"wallet_unlock_state_changed\"\n};\nconst BROADCAST_CHANNELS = {\n    REDIRECT_CHANNEL: \"redirect_channel\",\n    PROVIDER_CHANGE_CHANNEL: \"torus_provider_change_channel\",\n    TRANSACTION_CHANNEL: \"torus_channel\",\n    MESSAGE_CHANNEL: \"torus_message_channel\",\n    WALLET_LOGOUT_CHANNEL: \"wallet_logout_channel\",\n    WALLET_SELECTED_ADDRESS_CHANNEL: \"wallet_selected_address_channel\",\n    WALLET_NETWORK_CHANGE_CHANNEL: \"wallet_network_change_channel\",\n    WALLET_ACCOUNT_IMPORT_CHANNEL: \"wallet_account_import_channel\",\n    THEME_CHANGE: \"theme_change_channel\",\n    TOP_UP_CHANNEL: \"top_up_channel\"\n};\nconst BROADCAST_CHANNELS_MSGS = {\n    LOGOUT: \"logout\",\n    ACCOUNT_IMPORTED: \"account_imported\",\n    SELECTED_ADDRESS_CHANGE: \"selected_address_change\",\n    NETWORK_CHANGE: \"network_change\",\n    SET_THEME: \"set_theme\"\n};\nlet ControllerEvents = /*#__PURE__*/ function(ControllerEvents) {\n    ControllerEvents[\"UserUnauthorized\"] = \"user.unauthorized\";\n    return ControllerEvents;\n}({});\nfunction createChangeProviderMiddlewareMiddleware({ changeProvider }) {\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (request, response, next)=>{\n        const { method } = request;\n        if (method !== COMMUNICATION_JRPC_METHODS.SET_PROVIDER) return next();\n        if (!changeProvider) throw new Error(\"CommunicationMiddleware - opts.changeProvider not provided\");\n        response.result = await changeProvider(request);\n    });\n}\nfunction createTopupMiddleware({ topup }) {\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (request, response, next)=>{\n        const { method } = request;\n        if (method !== COMMUNICATION_JRPC_METHODS.TOPUP) return next();\n        if (!topup) throw new Error(\"CommunicationMiddleware - opts.topup not provided\");\n        response.result = await topup(request);\n    });\n}\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (request, response, next)=>{\n        const { method } = request;\n        if (method !== targetMethod) return next();\n        if (!handler) throw new Error(`CommunicationMiddleware - ${targetMethod} not provided`);\n        const result = await handler(request);\n        if (!result) {\n            return next();\n        }\n        response.result = result;\n        return undefined;\n    });\n}\nfunction createCommunicationMiddleware(providerHandlers) {\n    const { getUserInfo, getWalletInstanceId, topup, logout, changeProvider, setIFrameStatus, handleWindowRpc, getProviderState, loginWithPrivateKey, showWalletConnect, showCheckout, showWalletUi, showWindowBlockAlert, loginWithSessionId } = providerHandlers;\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.mergeMiddleware)([\n        createChangeProviderMiddlewareMiddleware({\n            changeProvider\n        }),\n        createTopupMiddleware({\n            topup\n        }),\n        (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createScaffoldMiddleware)({\n            [COMMUNICATION_JRPC_METHODS.LOGOUT]: logout,\n            [COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID]: getWalletInstanceId,\n            [COMMUNICATION_JRPC_METHODS.USER_INFO]: getUserInfo,\n            [COMMUNICATION_JRPC_METHODS.IFRAME_STATUS]: setIFrameStatus,\n            // Do this in the orchestrator because communicationWindowManager needs to be passed into PopupHandlers\n            [COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW]: handleWindowRpc,\n            [COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE]: getProviderState,\n            [COMMUNICATION_JRPC_METHODS.SHOW_WALLET_CONNECT]: showWalletConnect,\n            [COMMUNICATION_JRPC_METHODS.SHOW_CHECKOUT]: showCheckout,\n            [COMMUNICATION_JRPC_METHODS.SHOW_WALLET_UI]: showWalletUi,\n            [COMMUNICATION_JRPC_METHODS.WINDOW_BLOCKED]: showWindowBlockAlert\n        }),\n        createGenericJRPCMiddleware(COMMUNICATION_JRPC_METHODS.LOGIN_WITH_PRIVATE_KEY, loginWithPrivateKey),\n        createGenericJRPCMiddleware(COMMUNICATION_JRPC_METHODS.LOGIN_WITH_SESSION_ID, loginWithSessionId)\n    ]);\n}\nclass BaseEmbedController extends BaseController {\n    constructor({ config = {}, state }){\n        super({\n            config,\n            state\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"_communicationProviderProxy\", void 0);\n        this.defaultState = {\n            isIFrameFullScreen: true,\n            oauthModalVisibility: false,\n            loginInProgress: false,\n            dappMetadata: {\n                name: \"\",\n                icon: \"\"\n            },\n            web3AuthClientId: \"\",\n            web3AuthNetwork: \"mainnet\",\n            whiteLabel: null,\n            confirmationStrategy: \"popup\"\n        };\n        this.initialize();\n    }\n    /**\n   * Called by orchestrator once while initializing the class\n   * @param handlers - JRPC handlers for provider\n   * @returns - provider - Returns the providerProxy\n   */ initializeProvider(handlers) {\n        const engine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.JRPCEngine();\n        const communicationMiddleware = createCommunicationMiddleware(handlers);\n        engine.push(communicationMiddleware);\n        const communicationProvider = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.providerFromEngine)(engine);\n        this.setCommunicationProvider(communicationProvider);\n    }\n    setCommunicationProvider(communicationProvider) {\n        if (this._communicationProviderProxy) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            this._communicationProviderProxy.setTarget(communicationProvider);\n        } else {\n            this._communicationProviderProxy = createSwappableProxy(communicationProvider);\n        }\n    }\n}\nclass CommunicationWindowManager extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.SafeEventEmitter {\n    constructor(...args){\n        super(...args);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleWindowRpc\", (request, response, next, end)=>{\n            const { method, params } = request;\n            if (method === COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW) {\n                const { windowId } = params;\n                // I've been informed that a window has been closed\n                this.emit(`${windowId}:closed`);\n                response.result = true;\n                end();\n            } else {\n                next();\n            }\n        });\n    }\n}\nconst BUTTON_POSITION = {\n    BOTTOM_LEFT: \"bottom-left\",\n    TOP_LEFT: \"top-left\",\n    BOTTOM_RIGHT: \"bottom-right\",\n    TOP_RIGHT: \"top-right\"\n};\nconst CONFIRMATION_STRATEGY = {\n    POPUP: \"popup\",\n    MODAL: \"modal\",\n    AUTO_APPROVE: \"auto-approve\",\n    DEFAULT: \"default\"\n};\n/**\n * State change callbacks\n */ /**\n * Base controller configuration\n */ /**\n * Base state representation\n */ const LOGIN_PROVIDER = {\n    GOOGLE: \"google\",\n    FACEBOOK: \"facebook\",\n    REDDIT: \"reddit\",\n    DISCORD: \"discord\",\n    TWITCH: \"twitch\",\n    APPLE: \"apple\",\n    LINE: \"line\",\n    GITHUB: \"github\",\n    KAKAO: \"kakao\",\n    LINKEDIN: \"linkedin\",\n    TWITTER: \"twitter\",\n    WEIBO: \"weibo\",\n    WECHAT: \"wechat\",\n    EMAIL_PASSWORDLESS: \"email_passwordless\",\n    SMS_PASSWORDLESS: \"sms_passwordless\"\n};\n/**\n * {@label loginProviderType}\n */ const PAYMENT_PROVIDER = {\n    MOONPAY: \"moonpay\",\n    WYRE: \"wyre\",\n    RAMPNETWORK: \"rampnetwork\",\n    XANPOOL: \"xanpool\",\n    MERCURYO: \"mercuryo\",\n    TRANSAK: \"transak\"\n};\nfunction omitBy(object, predicate) {\n    // Create a new object to store the results\n    const result = {};\n    // Iterate over all own properties of the object\n    for (const [key, value] of Object.entries(object)){\n        if (!predicate(value, key)) {\n            result[key] = value;\n        }\n    }\n    return result;\n}\nfunction pickBy(object, predicate) {\n    // Create a new object to store the results\n    const result = {};\n    for (const [key, value] of Object.entries(object)){\n        if (predicate(value, key)) {\n            result[key] = value;\n        }\n    }\n    return result;\n}\nfunction cloneDeep(object) {\n    try {\n        return structuredClone(object);\n    } catch (error) {\n        return JSON.parse(JSON.stringify(object));\n    }\n}\nconst authServer = \"https://authjs.web3auth.io\";\nconst signChallenge = async (payload, chainNamespace)=>{\n    const t = chainNamespace === \"solana\" ? \"sip99\" : \"eip191\";\n    const header = {\n        t\n    };\n    const network = chainNamespace === \"solana\" ? \"solana\" : \"ethereum\";\n    const data = {\n        payload,\n        header,\n        network\n    };\n    const res = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${authServer}/siww/get`, data);\n    if (!res.success) {\n        throw new Error(\"Failed to authenticate user, Please reach out to Web3Auth Support team\");\n    }\n    return res.challenge;\n};\nconst verifySignedChallenge = async (chainNamespace, signedMessage, challenge, issuer, sessionTime, clientId, web3AuthNetwork, audience, additionalMetadata)=>{\n    var _window$location;\n    const t = chainNamespace === \"solana\" ? \"sip99\" : \"eip191\";\n    const sigData = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n        signature: {\n            s: signedMessage,\n            t\n        },\n        message: challenge,\n        issuer,\n        audience: audience || ( false ? 0 : \"com://reactnative\"),\n        timeout: sessionTime\n    }, additionalMetadata || {});\n    const idTokenRes = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${authServer}/siww/verify`, sigData, {\n        headers: {\n            client_id: clientId,\n            wallet_provider: issuer,\n            web3auth_network: web3AuthNetwork\n        }\n    });\n    if (!idTokenRes.success) {\n        loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"Failed to authenticate user, ,message verification failed\", idTokenRes.error);\n        throw new Error(\"Failed to authenticate user, ,message verification failed\");\n    }\n    return idTokenRes.token;\n};\nconst getTxStatusText = (txStatus)=>{\n    switch(txStatus){\n        case \"rejected\":\n        case \"unapproved\":\n        case \"failed\":\n            return ACTIVITY_STATUS_UNSUCCESSFUL;\n        case \"confirmed\":\n            return ACTIVITY_STATUS_SUCCESSFUL;\n        case \"submitted\":\n            return ACTIVITY_STATUS_PENDING;\n        case \"cancelled\":\n            return ACTIVITY_STATUS_CANCELLED;\n        default:\n            return \"\";\n    }\n};\n/**\n * General utility functions\n */ function intToHex(i) {\n    const hex = i.toString(16);\n    return `0x${hex}`;\n}\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */ const randomId = ()=>Math.random().toString(36).slice(2);\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */ function padWithZeroes(hexString, targetLength) {\n    if (hexString !== \"\" && !/^[a-f0-9]+$/iu.test(hexString)) {\n        throw new Error(`Expected an unprefixed hex string. Received: ${hexString}`);\n    }\n    if (targetLength < 0) {\n        throw new Error(`Expected a non-negative integer target length. Received: ${targetLength}`);\n    }\n    return String.prototype.padStart.call(hexString, targetLength, \"0\");\n}\n/**\n * Concatenate an extended ECDSA signature into a hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature.\n */ function concatSig(v, r, s) {\n    const rSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.fromSigned)(r);\n    const sSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.fromSigned)(s);\n    const vSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.bytesToBigInt)(v);\n    const rStr = padWithZeroes(Buffer.from((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.toUnsigned)(rSig)).toString(\"hex\"), 64);\n    const sStr = padWithZeroes(Buffer.from((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.toUnsigned)(sSig)).toString(\"hex\"), 64);\n    const vStr = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.stripHexPrefix)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.bigIntToHex)(vSig));\n    return (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.addHexPrefix)(rStr.concat(sStr, vStr));\n}\nfunction timeout$1(duration) {\n    return new Promise((resolve)=>{\n        const timeoutRef = window.setTimeout(()=>{\n            resolve();\n            window.clearTimeout(timeoutRef);\n        }, duration);\n    });\n}\nconst getHeaders = (jwt, publicAddress)=>{\n    return {\n        headers: {\n            Authorization: `Bearer ${jwt}`,\n            \"Content-Type\": \"application/json; charset=utf-8\",\n            \"public-address\": publicAddress\n        }\n    };\n};\n/**\n * Text/number formatting utilities\n */ const formatSmallNumbers = (number, currency = \"usd\", noTilde = false)=>{\n    const finalNumber = bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].isBigNumber(number) ? number.toNumber() : number;\n    if (!Number.isFinite(finalNumber)) return \"\";\n    const value = currency.toLowerCase() === \"usd\" ? parseFloat(Number(finalNumber).toFixed(2)) : parseFloat(Number(finalNumber).toFixed(5));\n    const tilde = value > 0 ? \"~ \" : \"\";\n    return `${currency.toLowerCase() === \"usd\" || noTilde ? \"\" : tilde}${Number(value)} ${currency.toUpperCase()}`;\n};\nconst addressSlicer = (address, sliceLength = 5)=>{\n    if (!address) return \"\";\n    if (address.length < 11) {\n        return address;\n    }\n    if (typeof address !== \"string\") return \"\";\n    return `${address.slice(0, sliceLength)}...${address.slice(-sliceLength)}`;\n};\nconst significantDigits = (number, perc = false, length_ = 2)=>{\n    let input = !bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].isBigNumber(number) ? new bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](number) : number;\n    if (input.isZero()) return input;\n    if (perc) {\n        input = input.times(new bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](100));\n    }\n    let depth;\n    if (input.gte(new bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](1))) {\n        depth = length_;\n    } else {\n        depth = length_ - 1 + Math.ceil(Math.log10(new bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](\"1\").div(input).toNumber()));\n    }\n    const shift = new bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](10).pow(new bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](depth));\n    const roundedNumber = Math.round(shift.times(input).toNumber()) / shift.toNumber();\n    return roundedNumber;\n};\nconst formatDate = (inputDate)=>{\n    const monthList = [\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sep\",\n        \"Oct\",\n        \"Nov\",\n        \"Dec\"\n    ];\n    const date = new Date(inputDate);\n    const day = date.getDate();\n    const month = monthList[date.getMonth()];\n    const year = date.getFullYear();\n    return `${day} ${month} ${year}`;\n};\nconst formatTime = (time)=>{\n    return new Date(time).toTimeString().slice(0, 8);\n};\n/**\n * Network utilities\n */ const transactionMatchesNetwork = (transaction, chainId)=>{\n    if (typeof transaction.chainId !== \"undefined\") {\n        return transaction.chainId === chainId;\n    }\n    return false;\n};\n/**\n * Signing utils\n */ const hashMessage = (message)=>{\n    const bufferedMessage = Buffer.from(message, \"utf8\");\n    const el = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.hashPersonalMessage)(bufferedMessage);\n    return Buffer.from(el);\n};\nconst signMessage = async (privateKey, data)=>{\n    const privKey = Buffer.from(privateKey, \"hex\");\n    const message = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.stripHexPrefix)(data);\n    const msgSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.ecsign)(Buffer.from(message, \"hex\"), privKey);\n    const rawMsgSig = concatSig(Buffer.from((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.bigIntToBytes)(msgSig.v)), Buffer.from(msgSig.r), Buffer.from(msgSig.s));\n    return rawMsgSig;\n};\n/**\n * popup handler utils\n */ function getPopupFeatures({ width: w, height: h }) {\n    // Fixes dual-screen position                             Most browsers      Firefox\n    const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n    const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n    const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n    const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n    const systemZoom = 1; // No reliable estimate\n    const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n    const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n    const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n    return features;\n}\nconst broadcastChannelOptions = {\n    type: \"server\",\n    // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n    webWorkerSupport: false // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n};\nfunction getCustomDeviceInfo() {\n    var _navigator;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if ((_navigator = navigator) !== null && _navigator !== void 0 && _navigator.brave) {\n        return {\n            browser: \"Brave\"\n        };\n    }\n}\nclass UserError extends Error {\n}\nconst handleRedirectParameters = (hash, queryParameters)=>{\n    const hashParameters = {};\n    const hashUrl = new URL(`${window.location.origin}/?${hash.slice(1)}`);\n    hashUrl.searchParams.forEach((value, key)=>{\n        hashParameters[key] = value;\n    });\n    let instanceParameters = {};\n    let error = \"\";\n    if (!queryParameters.windowId) {\n        if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n            instanceParameters = JSON.parse((0,_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_6__.safeatob)(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n            error = hashParameters.error_description || hashParameters.error || error;\n        } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n            instanceParameters = JSON.parse((0,_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_6__.safeatob)(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n            if (queryParameters.error) error = queryParameters.error;\n        }\n    }\n    return {\n        error,\n        instanceParameters,\n        hashParameters\n    };\n};\nfunction sleep(ms) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, ms);\n    });\n}\nconst isUnauthorizedError = (error)=>{\n    return error instanceof Response && error.status === 401;\n};\nclass BaseKeyringController extends BaseController {\n    constructor({ config = {}, state }){\n        var _state$wallets;\n        super({\n            config,\n            state\n        });\n        this.defaultState = {\n            wallets: (_state$wallets = state.wallets) !== null && _state$wallets !== void 0 ? _state$wallets : []\n        };\n        this.initialize();\n    }\n    // for signing auth message\n    async signAuthMessage(address, message) {\n        const keyring = this.state.wallets.find((x)=>x.address === address);\n        if (!keyring) {\n            throw new Error(\"key does not exist\");\n        }\n        const hashedMessage = hashMessage(message).toString(\"hex\");\n        const rawMessageSig = await signMessage(keyring.privateKey, hashedMessage);\n        return rawMessageSig;\n    }\n}\nconst RETRIABLE_ERRORS = [\n    // ignore server overload errors\n    \"Gateway timeout\",\n    \"ETIMEDOUT\",\n    // ignore server sent html error pages\n    // or truncated json responses\n    \"failed to parse response body\",\n    // ignore errors where http req failed to establish\n    \"Failed to fetch\"\n];\nfunction checkForHttpErrors(fetchRes) {\n    // check for errors\n    switch(fetchRes.status){\n        case 405:\n            throw _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotFound();\n        case 418:\n            throw _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.internal({\n                message: `Request is being rate limited.`,\n                data: {\n                    cause: fetchRes\n                }\n            });\n        case 503:\n        case 504:\n            throw _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.internal({\n                message: `Gateway timeout. The request took too long to process.` + `This can happen when querying over too wide a block range.`\n            });\n    }\n}\nfunction timeout(duration) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, duration);\n    });\n}\nfunction parseResponse(fetchRes, body) {\n    // check for error code\n    if (fetchRes.status !== 200) {\n        throw _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.internal({\n            message: `Non-200 status code: '${fetchRes.status}'`,\n            data: body\n        });\n    }\n    // check for rpc error\n    if (body.error) {\n        throw _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.internal({\n            data: body.error\n        });\n    }\n    // return successful result\n    return body.result;\n}\nfunction createFetchConfigFromReq({ req, rpcTarget, originHttpHeaderKey }) {\n    const parsedUrl = new URL(rpcTarget);\n    // prepare payload\n    // copy only canonical json rpc properties\n    const payload = {\n        id: req.id,\n        jsonrpc: req.jsonrpc,\n        method: req.method,\n        params: req.params\n    };\n    // extract 'origin' parameter from request\n    const originDomain = req.origin;\n    // serialize request body\n    const serializedPayload = JSON.stringify(payload);\n    // configure fetch params\n    const fetchParams = {\n        method: \"POST\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        },\n        body: serializedPayload\n    };\n    // optional: add request origin as header\n    if (originHttpHeaderKey && originDomain) {\n        fetchParams.headers[originHttpHeaderKey] = originDomain;\n    }\n    return {\n        fetchUrl: parsedUrl.href,\n        fetchParams\n    };\n}\nfunction createFetchMiddleware({ rpcTarget, originHttpHeaderKey }) {\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (req, res, _next)=>{\n        const { fetchUrl, fetchParams } = createFetchConfigFromReq({\n            req,\n            rpcTarget,\n            originHttpHeaderKey\n        });\n        // attempt request multiple times\n        const maxAttempts = 5;\n        const retryInterval = 1000;\n        for(let attempt = 0; attempt < maxAttempts; attempt++){\n            try {\n                const fetchRes = await fetch(fetchUrl, fetchParams);\n                // check for http errrors\n                checkForHttpErrors(fetchRes);\n                // parse response body\n                const fetchBody = await fetchRes.json();\n                const result = parseResponse(fetchRes, fetchBody);\n                // set result and exit retry loop\n                res.result = result;\n                return;\n            } catch (err) {\n                const errMsg = (err.message || err).toString();\n                const isRetriable = RETRIABLE_ERRORS.some((phrase)=>errMsg.includes(phrase));\n                // re-throw error if not retriable\n                if (!isRetriable) {\n                    throw err;\n                }\n            }\n            // delay before retrying\n            await timeout(retryInterval);\n        }\n    });\n}\nfunction deferredPromise() {\n    let resolve;\n    const promise = new Promise((_resolve)=>{\n        resolve = _resolve;\n    });\n    return {\n        resolve,\n        promise\n    };\n}\nfunction createInflightCacheMiddleware({ cacheIdentifierForRequest }) {\n    const inflightRequests = {};\n    async function createActiveRequestHandler(res, activeRequestHandlers) {\n        const { resolve, promise } = deferredPromise();\n        activeRequestHandlers.push((handledRes)=>{\n            // append a copy of the result and error to the response\n            res.result = cloneDeep(handledRes.result);\n            res.error = cloneDeep(handledRes.error);\n            resolve();\n        });\n        return promise;\n    }\n    function handleActiveRequest(res, activeRequestHandlers) {\n        // use setTimeout so we can resolve our original request first\n        setTimeout(()=>{\n            activeRequestHandlers.forEach((handler)=>{\n                try {\n                    handler(res);\n                } catch (err) {\n                    // catch error so all requests are handled correctly\n                    loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(err);\n                }\n            });\n        });\n    }\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (req, res, next)=>{\n        // allow cach to be skipped if so specified\n        if (req.skipCache) {\n            return next();\n        }\n        // get cacheId, if cacheable\n        const cacheId = cacheIdentifierForRequest(req);\n        // if not cacheable, skip\n        if (!cacheId) {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"Request is not cacheable, proceeding. req = %o\", req);\n            return next();\n        }\n        // check for matching requests\n        let activeRequestHandlers = inflightRequests[cacheId];\n        // if found, wait for the active request to be handled\n        if (activeRequestHandlers) {\n            // setup the response listener and wait for it to be called\n            // it will handle copying the result and request fields\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"Running %i handler(s) for request %o\", activeRequestHandlers.length, req);\n            await createActiveRequestHandler(res, activeRequestHandlers);\n            return undefined;\n        }\n        // setup response handler array for subsequent requests\n        activeRequestHandlers = [];\n        inflightRequests[cacheId] = activeRequestHandlers;\n        // allow request to be handled normally\n        loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"Carrying original request forward %o\", req);\n        await next();\n        // clear inflight requests\n        delete inflightRequests[cacheId];\n        // schedule activeRequestHandlers to be handled\n        loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"Running %i collected handler(s) for request %o\", activeRequestHandlers.length, req);\n        handleActiveRequest(res, activeRequestHandlers);\n        // complete\n        return undefined;\n    });\n}\nfunction createLoggerMiddleware(options) {\n    return function loggerMiddleware(request, response, next) {\n        next((callback)=>{\n            if (response.error) {\n                loglevel__WEBPACK_IMPORTED_MODULE_4___default().warn(\"Error in RPC response:\\n\", response);\n            }\n            if (request.isTorusInternal) return;\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(`RPC (${options.origin}):`, request, \"->\", response);\n            callback();\n        });\n    };\n}\nfunction createOriginMiddleware(options) {\n    return function originMiddleware(request, _, next) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        request.origin = options.origin;\n        next();\n    };\n}\nconst createRandomId = ()=>Math.random().toString(36).substring(2);\nconst CHAIN_NAMESPACES = {\n    EIP155: \"eip155\",\n    SOLANA: \"solana\",\n    CASPER: \"casper\",\n    XRPL: \"xrpl\",\n    OTHER: \"other\"\n};\n// eip155 for all evm chains\n/**\n * Custom network properties\n * @example isEIP1559Compatible: true etc.\n */ /**\n *\n */ class BroadcastChannelHandler {\n    constructor(channelPrefix, instanceId){\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"bc\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"channel\", void 0);\n        const queryParameters = new URLSearchParams(window.location.search);\n        const windowId = queryParameters.get(\"windowId\");\n        this.channel = `${channelPrefix}_${instanceId}_${windowId}`;\n        this.bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(this.channel, broadcastChannelOptions);\n    }\n    getMessageFromChannel() {\n        return new Promise((resolve, reject)=>{\n            this.bc.addEventListener(\"message\", async (ev)=>{\n                this.bc.close();\n                if (ev.error) {\n                    reject(ev.error);\n                } else {\n                    resolve(ev.data);\n                }\n            });\n            this.bc.postMessage({\n                data: {\n                    type: POPUP_LOADED\n                }\n            });\n        });\n    }\n}\nclass StreamWindow extends BaseController {\n    constructor({ config, state = {} }){\n        super({\n            config,\n            state\n        });\n        // if window has been closed by users\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"closed\", false);\n        this.initialize();\n    }\n    async open() {\n        return new Promise((resolve, reject)=>{\n            const { communicationEngine, communicationWindowManager } = this.config;\n            let popupSuccess = false;\n            communicationWindowManager.once(`${this.state.windowId}:closed`, ()=>{\n                this.closed = true;\n            });\n            // Window is not open yet\n            if (!this.state.windowId) {\n                // since, we're opening window now, no need to tell window anything\n                this.update({\n                    windowId: randomId()\n                });\n                if (typeof this.config.handleWindowBlockAlert !== \"function\") reject(new Error(\"handleWindowBlockAlert is not a function\"));\n                communicationWindowManager.once(`${this.state.windowId}:iframe-opened`, ()=>{\n                    // this means iframe is full screen now\n                    // there might be multiple block alerts at a time. so, we don't set iframe to close after handling this here\n                    this.config.handleWindowBlockAlert({\n                        windowId: this.state.windowId,\n                        finalUrl: this.state.url.href\n                    }).then(resolve).catch(reject);\n                });\n                // Tell the other party to maximize the iframe\n                communicationEngine.emit(\"notification\", {\n                    method: COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS,\n                    params: {\n                        isFullScreen: true,\n                        rid: this.state.windowId\n                    }\n                });\n            } else {\n                // this is a pre-opened window. so, we need to tell it to redirect to correct url. it's currently waiting on /redirect and uses `RedirectHandler` code\n                // Send this window with `windowId` the url to open via bc\n                const channelName = `${BROADCAST_CHANNELS.REDIRECT_CHANNEL}_${this.config.instanceId}_${this.state.windowId}`;\n                const bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(channelName, broadcastChannelOptions);\n                bc.addEventListener(\"message\", async (ev)=>{\n                    try {\n                        loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(ev, `receiving data on channel: ${bc.name}`);\n                        const { error } = ev;\n                        if (error) {\n                            // Popup says some error. so, we say it's not really opened\n                            reject(new Error(error));\n                            return;\n                        }\n                        const { message } = ev.data;\n                        if (message === POPUP_LOADED) {\n                            popupSuccess = true;\n                            await bc.postMessage({\n                                data: {\n                                    url: this.state.url.href,\n                                    message: \"\" // No need of a msg\n                                }\n                            });\n                            resolve(this);\n                            bc.close();\n                        }\n                    } catch (error) {\n                        reject(error);\n                        bc.close();\n                        // Something went wrong. so, we close that window\n                        this.close();\n                    }\n                });\n                // We don't know if the other end is ready to receive this msg. So, we keep writing until it receives and sends back something\n                // we need backoff strategy\n                // we need to wait for first attempt to succeed/fail until the second attempt\n                // If we get 429, we need to wait for a while and then try again\n                const postMsg = async ()=>{\n                    // this never throws\n                    const localResponse = await bc.postMessage({\n                        data: {\n                            message: SETUP_COMPLETE\n                        }\n                    });\n                    return localResponse;\n                };\n                let currentDelay = bc.type === \"server\" ? 1000 : 200;\n                const recursiveFn = async ()=>{\n                    if (!popupSuccess && !this.closed) {\n                        const localResponse = await postMsg();\n                        if (bc.type === \"server\") {\n                            const serverResponse = localResponse;\n                            if (serverResponse.status >= 400) {\n                                // We need to wait for a while and then try again\n                                currentDelay = Math.round(currentDelay * 1.5);\n                            }\n                        }\n                        await sleep(currentDelay);\n                        await recursiveFn();\n                    }\n                };\n                recursiveFn();\n            }\n        });\n    }\n    close() {\n        const { communicationEngine } = this.config;\n        communicationEngine.emit(\"notification\", {\n            method: COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW,\n            params: {\n                windowId: this.state.windowId\n            }\n        });\n    }\n}\n/*\nScenarios:\n1. Open a normal popup window and no communication with it - Use PopupHandler\n2. Open a popup window and communicate with it - Use PopupWithBcHandler (can initiate communication by waiting for window to open or not)\n\n3. If window is already opened, pass in windowId to the popup handler. \n   This will establish communication with the popup window and sends it a new url to redirect to\n\n\nIf you're trying to open a window and it gets blocked (happens if you're in iframe or delay b/w click and opening window),\n  StreamWindow is invoked and it writes in a channel to display a message to the user\n\nOnce user clicks on that modal/dialog, we pre-open the window and pass in the windowId (goes to 3)\n*/ /**\n * Handles popup window management.\n * For broadcast channel communication, use url with `instanceId` coded into state parameter.\n * This state parameter will be passed across redirects according to OAuth spec.\n */ class PopupHandler extends BaseController {\n    constructor({ config, state }){\n        super({\n            config,\n            state\n        });\n        // this.id = randomId()\n        // Add in dapp storage key to all popups as a hash parameter\n        this.defaultConfig = {\n            features: getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW),\n            target: \"_blank\",\n            communicationEngine: null,\n            communicationWindowManager: null,\n            timeout: 30000,\n            instanceId: \"\",\n            handleWindowBlockAlert: null\n        };\n        this.defaultState = {\n            windowTimer: null,\n            window: null,\n            iClosedWindow: false,\n            windowId: \"\",\n            url: state.url\n        };\n        this.initialize();\n        this._setupTimer();\n    }\n    async open() {\n        // if window is already open\n        const { target, features, communicationEngine, communicationWindowManager } = this.config;\n        const { windowId, url } = this.state;\n        // No window has been pre-opened\n        if (!windowId) {\n            // try to open a window first\n            let localWindow = window.open(url.href, target, features);\n            let finalWindowId = \"\";\n            if (!localWindow) {\n                // if it's blocked, open StreamWindow\n                const streamWindow = new StreamWindow({\n                    config: {\n                        communicationEngine,\n                        communicationWindowManager,\n                        instanceId: this.config.instanceId,\n                        handleWindowBlockAlert: this.config.handleWindowBlockAlert\n                    },\n                    state: {\n                        url\n                    }\n                });\n                streamWindow.open();\n                finalWindowId = streamWindow.state.windowId;\n                localWindow = streamWindow;\n            }\n            this.update({\n                window: localWindow,\n                windowId: finalWindowId || randomId()\n            });\n            return;\n        }\n        // A window has been pre-opened with a query parameter `windowId`\n        const localWindow = new StreamWindow({\n            config: {\n                communicationEngine,\n                communicationWindowManager,\n                instanceId: this.config.instanceId,\n                handleWindowBlockAlert: this.config.handleWindowBlockAlert\n            },\n            state: {\n                url,\n                windowId\n            }\n        });\n        this.update({\n            window: localWindow,\n            windowId: localWindow.state.windowId\n        });\n        await localWindow.open();\n    }\n    close() {\n        this.update({\n            iClosedWindow: true\n        });\n        const { window: window1 } = this.state;\n        if (window1) window1.close();\n    }\n    _setupTimer() {\n        const timer = window.setInterval(()=>{\n            const { window: window1, windowTimer, iClosedWindow } = this.state;\n            if (window1 && window1.closed) {\n                if (windowTimer) clearInterval(windowTimer);\n                setTimeout(()=>{\n                    if (!iClosedWindow) {\n                        this.emit(\"close\");\n                    }\n                    this.update({\n                        iClosedWindow: false,\n                        window: null\n                    });\n                }, this.config.timeout);\n            }\n            if (window1 === null && windowTimer) clearInterval(windowTimer);\n        }, 500);\n        this.update({\n            windowTimer: timer\n        });\n    }\n}\n// Always listening channels. Hence, no window id\nclass PopupStoreChannel {\n    constructor({ instanceId, handleLogout, handleAccountImport, handleNetworkChange, handleSelectedAddressChange, handleThemeChange }){\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleLogout\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleAccountImport\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleNetworkChange\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleThemeChange\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleSelectedAddressChange\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"instanceId\", void 0);\n        this.instanceId = instanceId;\n        this.handleLogout = handleLogout;\n        this.handleAccountImport = handleAccountImport;\n        this.handleNetworkChange = handleNetworkChange;\n        this.handleSelectedAddressChange = handleSelectedAddressChange;\n        this.handleThemeChange = handleThemeChange;\n    }\n    setupStoreChannels() {\n        this.logoutChannel();\n        this.importAccountChannel();\n        this.networkChangeChannel();\n        this.selectedAddressChangeChannel();\n        this.themeChangedChannel();\n    }\n    logoutChannel() {\n        const logoutChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_LOGOUT_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n        logoutChannel.addEventListener(\"message\", (ev)=>{\n            var _ev$data;\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"received logout message\", ev);\n            if (!ev.error && ((_ev$data = ev.data) === null || _ev$data === void 0 ? void 0 : _ev$data.type) === BROADCAST_CHANNELS_MSGS.LOGOUT) {\n                loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"Logging Out\");\n                this.handleLogout();\n            }\n        });\n    }\n    importAccountChannel() {\n        const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_ACCOUNT_IMPORT_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n        walletAccountImportChannel.addEventListener(\"message\", (ev)=>{\n            var _ev$data2;\n            if (!ev.error && ((_ev$data2 = ev.data) === null || _ev$data2 === void 0 ? void 0 : _ev$data2.type) === BROADCAST_CHANNELS_MSGS.ACCOUNT_IMPORTED) {\n                var _ev$data3;\n                this.handleAccountImport((_ev$data3 = ev.data) === null || _ev$data3 === void 0 ? void 0 : _ev$data3.privKey);\n            }\n        });\n    }\n    networkChangeChannel() {\n        const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_NETWORK_CHANGE_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n        walletAccountImportChannel.addEventListener(\"message\", (ev)=>{\n            var _ev$data4;\n            if (!ev.error && ((_ev$data4 = ev.data) === null || _ev$data4 === void 0 ? void 0 : _ev$data4.type) === BROADCAST_CHANNELS_MSGS.NETWORK_CHANGE) {\n                var _ev$data5;\n                this.handleNetworkChange((_ev$data5 = ev.data) === null || _ev$data5 === void 0 ? void 0 : _ev$data5.network);\n            }\n        });\n    }\n    themeChangedChannel() {\n        const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.THEME_CHANGE}_${this.instanceId}`, broadcastChannelOptions);\n        walletAccountImportChannel.addEventListener(\"message\", (ev)=>{\n            var _ev$data6;\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().info({\n                ev\n            });\n            if (!ev.error && ((_ev$data6 = ev.data) === null || _ev$data6 === void 0 ? void 0 : _ev$data6.type) === BROADCAST_CHANNELS_MSGS.SET_THEME) {\n                var _ev$data7;\n                this.handleThemeChange((_ev$data7 = ev.data) === null || _ev$data7 === void 0 ? void 0 : _ev$data7.theme);\n            }\n        });\n    }\n    selectedAddressChangeChannel() {\n        const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_SELECTED_ADDRESS_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n        walletAccountImportChannel.addEventListener(\"message\", (ev)=>{\n            var _ev$data8;\n            if (!ev.error && ((_ev$data8 = ev.data) === null || _ev$data8 === void 0 ? void 0 : _ev$data8.type) === BROADCAST_CHANNELS_MSGS.SELECTED_ADDRESS_CHANGE) {\n                var _ev$data9;\n                this.handleSelectedAddressChange((_ev$data9 = ev.data) === null || _ev$data9 === void 0 ? void 0 : _ev$data9.selectedAddress);\n            }\n        });\n    }\n}\n/**\n * PopupWithBcHandler is a PopupHandler which uses broadcast channel to communicate with the popup window.\n */ class PopupWithBcHandler extends PopupHandler {\n    constructor({ config, state, channelPrefix }){\n        super({\n            config,\n            state\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"channelPrefix\", void 0);\n        this.channelPrefix = channelPrefix;\n    }\n    /**\n   * Receives the data from popup window and closes the window\n   * @param successExtraFn - Extra function to be called after the data is received\n   * @returns The data to be received\n   */ handle(successExtraFn) {\n        const channelName = `${this.channelPrefix}_${this.config.instanceId}_${this.state.windowId}`;\n        const bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(channelName, broadcastChannelOptions);\n        return new Promise((resolve, reject)=>{\n            const closeListener = ()=>{\n                bc.close();\n                reject(new UserError(\"user closed popup\"));\n                this.removeListener(\"close\", closeListener);\n            };\n            this.on(\"close\", closeListener);\n            bc.addEventListener(\"message\", async (ev)=>{\n                loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(ev, `receiving data on channel: ${bc.name}`);\n                try {\n                    const { error, data } = ev;\n                    if (error) {\n                        reject(new Error(error));\n                        return;\n                    }\n                    if (successExtraFn) await successExtraFn.call(this, data);\n                    resolve(data);\n                } catch (error) {\n                    reject(error);\n                } finally{\n                    bc.close();\n                    this.close();\n                }\n            });\n            this.open().then(()=>{\n                loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(`opened window ${bc.name}`);\n                // Opened window. yay.  let the bc events do their job\n                return undefined;\n            }).catch((err)=>{\n                loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(err, \"something went wrong while opening window\");\n                reject(err);\n            });\n        });\n    }\n    /**\n   * Use this if we have to send large payloads which don't fit in query/hash params.\n   * Waits for ack that popup window is ready to receive data.\n   * Receives the data from popup window and closes the window\n   * @param payload - The data to be sent to the popup window once we have ack that window is ready to receive data\n   * @param successExtraFn - Extra function to be called after the data is received\n   * @returns The data to be received\n   */ handleWithHandshake(payload, successExtraFn) {\n        const channelName = `${this.channelPrefix}_${this.config.instanceId}_${this.state.windowId}`;\n        const bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(channelName, broadcastChannelOptions);\n        return new Promise((resolve, reject)=>{\n            const closeListener = ()=>{\n                bc.close();\n                reject(new UserError(\"user closed popup\"));\n                this.removeListener(\"close\", closeListener);\n            };\n            this.on(\"close\", closeListener);\n            bc.addEventListener(\"message\", async (ev)=>{\n                try {\n                    loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(ev, `receiving data on channel: ${bc.name}`);\n                    const { error, data } = ev;\n                    if (error) {\n                        reject(new Error(error));\n                        return;\n                    }\n                    // Do handshake\n                    const { type = \"\" } = data;\n                    if (type === POPUP_LOADED) {\n                        // Hack with generic to use the same type for both send and receive\n                        await bc.postMessage({\n                            data: payload\n                        });\n                    } else if (type === POPUP_RESULT) {\n                        if (successExtraFn) await successExtraFn.call(this, data);\n                        resolve(data);\n                        // Must only close the bc after result is done\n                        bc.close();\n                        this.close();\n                    }\n                } catch (error) {\n                    reject(error);\n                    bc.close();\n                    this.close();\n                }\n            });\n            this.open().then(()=>{\n                loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(`opened window ${bc.name}`);\n                // Opened window. yay.  let the bc events do their job\n                return undefined;\n            }).catch((err)=>{\n                loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(err, \"something went wrong while opening window\");\n                reject(err);\n            });\n        });\n    }\n}\nclass RedirectHandler {\n    // private hashParameters: Record<string, string>;\n    constructor(instanceId){\n        // private error: string;\n        // this is sessionid post login\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"instanceId\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"finalQueryParams\", {});\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"instanceParameters\", void 0);\n        const { hash } = window.location;\n        const queryParameters = new URLSearchParams(window.location.search);\n        queryParameters.forEach((value, key)=>{\n            this.finalQueryParams[key] = value;\n        });\n        const { instanceParameters } = handleRedirectParameters(hash, this.finalQueryParams);\n        // this.error = error;\n        this.instanceParameters = instanceParameters;\n        // this.hashParameters = hashParameters;\n        this.instanceId = instanceId;\n    }\n    async handle() {\n        return new Promise((resolve, reject)=>{\n            const { finalQueryParams, instanceParameters } = this;\n            let bc;\n            try {\n                // used for login case. there's no windowId here\n                // if (!finalQueryParams.windowId) {\n                //   bc = new BroadcastChannel(`${BROADCAST_CHANNELS.REDIRECT_CHANNEL}_${instanceParameters.instanceId}`, broadcastChannelOptions);\n                //   bc.addEventListener(\"message\", async (ev) => {\n                //     if (ev.error) {\n                //       reject(ev.error);\n                //       window.close();\n                //     } else {\n                //       resolve();\n                //       bc.close();\n                //       log.info(\"posted\", { finalQueryParams, hashParameters, instanceParameters });\n                //     }\n                //   });\n                //   bc.postMessage({\n                //     data: {\n                //       instanceParams: instanceParameters,\n                //       hashParams: hashParameters,\n                //       queryParams: finalQueryParams,\n                //     },\n                //     error,\n                //   });\n                //   setTimeout(() => {\n                //     resolve();\n                //     window.location.href = window.location.origin + window.location.search + window.location.hash;\n                //   }, 5000);\n                // } else {\n                const channelName = `${BROADCAST_CHANNELS.REDIRECT_CHANNEL}_${this.instanceId || instanceParameters.instanceId}_${finalQueryParams.windowId || instanceParameters.windowId}`;\n                bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(channelName, broadcastChannelOptions);\n                bc.addEventListener(\"message\", async (ev)=>{\n                    const { url, message } = ev.data;\n                    if (url) {\n                        resolve();\n                        window.location.href = url;\n                    } else if (message === SETUP_COMPLETE) {\n                        await bc.postMessage({\n                            data: {\n                                windowId: finalQueryParams.windowId,\n                                message: POPUP_LOADED\n                            }\n                        });\n                    }\n                    if (ev.error && ev.error !== \"\") {\n                        loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(ev.error);\n                        resolve();\n                        bc.close();\n                    }\n                });\n            // }\n            } catch (err) {\n                loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(err, \"something went wrong\");\n                reject(err);\n                if (bc) bc.close();\n                window.close();\n            }\n        });\n    }\n}\nvar HTTP_METHOD = /*#__PURE__*/ function(HTTP_METHOD) {\n    HTTP_METHOD[HTTP_METHOD[\"GET\"] = 0] = \"GET\";\n    HTTP_METHOD[HTTP_METHOD[\"POST\"] = 1] = \"POST\";\n    HTTP_METHOD[HTTP_METHOD[\"PUT\"] = 2] = \"PUT\";\n    HTTP_METHOD[HTTP_METHOD[\"PATCH\"] = 3] = \"PATCH\";\n    HTTP_METHOD[HTTP_METHOD[\"DELETE\"] = 4] = \"DELETE\";\n    return HTTP_METHOD;\n}(HTTP_METHOD || {});\nconst constructAuthHeaders = ({ jwtToken, publicAddress })=>{\n    return {\n        headers: {\n            Authorization: `Bearer ${jwtToken}`,\n            \"public-address\": publicAddress\n        }\n    };\n};\nconst withUnauthorizedHandler = async (fn, emitter)=>{\n    try {\n        const response = await fn();\n        return response;\n    } catch (e) {\n        if (isUnauthorizedError(e)) {\n            emitter.emit(ControllerEvents.UserUnauthorized);\n        }\n        throw e;\n    }\n};\nconst jwtTokenExpired = (jwt)=>{\n    const decoded = (0,jwt_decode__WEBPACK_IMPORTED_MODULE_9__.jwtDecode)(jwt);\n    const jwtExpiry = decoded.exp * 1000;\n    const currentTime = new Date().getTime();\n    return currentTime >= jwtExpiry;\n};\nconst WSApiClient = (baseApiUrl, emitter)=>{\n    const authRequest = (method, url, data, authCredentials, customOptions)=>{\n        if (jwtTokenExpired(authCredentials.jwtToken)) {\n            emitter.emit(ControllerEvents.UserUnauthorized);\n            // eslint-disable-next-line @typescript-eslint/no-throw-literal\n            throw new Response(null, {\n                status: 401,\n                statusText: \"Unauthorized\"\n            });\n        }\n        const headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }, constructAuthHeaders(authCredentials));\n        if (method === HTTP_METHOD.GET) {\n            return withUnauthorizedHandler(()=>(0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.get)(url, headers, customOptions), emitter);\n        }\n        if (method === HTTP_METHOD.POST) {\n            return withUnauthorizedHandler(()=>(0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(url, data, headers, customOptions), emitter);\n        }\n        if (method === HTTP_METHOD.PUT) {\n            return withUnauthorizedHandler(()=>(0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.put)(url, data, headers, customOptions), emitter);\n        }\n        if (method === HTTP_METHOD.PATCH) {\n            return withUnauthorizedHandler(()=>(0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.patch)(url, data, headers, customOptions), emitter);\n        }\n        if (method === HTTP_METHOD.DELETE) {\n            return withUnauthorizedHandler(()=>(0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.remove)(url, data, headers, customOptions), emitter);\n        }\n    };\n    return {\n        authGet: (url, authCredentials, customOptions)=>authRequest(HTTP_METHOD.GET, `${baseApiUrl}/${url}`, {}, authCredentials, customOptions),\n        authPost: (url, data, authCredentials, customOptions)=>authRequest(HTTP_METHOD.POST, `${baseApiUrl}/${url}`, data, authCredentials, customOptions),\n        authPut: (url, data, authCredentials, customOptions)=>authRequest(HTTP_METHOD.PUT, `${baseApiUrl}/${url}`, data, authCredentials, customOptions),\n        authPatch: (url, data, authCredentials, customOptions)=>authRequest(HTTP_METHOD.PATCH, `${baseApiUrl}/${url}`, data, authCredentials, customOptions),\n        authRemove: (url, data, authCredentials, customOptions)=>authRequest(HTTP_METHOD.DELETE, `${baseApiUrl}/${url}`, data, authCredentials, customOptions)\n    };\n};\nconst ACTIVITY_ACTION = {\n    ACTIVITY_ACTION_ALL: \"walletActivity.allTransactions\",\n    ACTIVITY_ACTION_SEND: \"walletActivity.send\",\n    ACTIVITY_ACTION_RECEIVE: \"walletActivity.receive\",\n    ACTIVITY_ACTION_TOPUP: \"walletActivity.topup\"\n};\nconst ACCOUNT_CATEGORY = {\n    NORMAL: \"normal\",\n    THRESHOLD: \"threshold\",\n    IMPORTED: \"imported\",\n    // we have private key here\n    APP_SCOPED: \"app_scoped\",\n    ACCOUNT_ABSTRACTION: \"account_abstraction\",\n    EXTERNAL: \"external\",\n    // like metamask, wallet connect\n    MPC: \"mpc\",\n    SFA: \"sfa\"\n};\n/**\n * Preferences controller state\n */ /**\n * @param address - address of the user\n * @param jwtToken - if jwt token already exists, it will be used instead of fetching from backend\n * @param calledFromEmbed - if called from embed\n * @param userInfo - optional user info\n * @param rehydrate - Rehydrate the preferences from the local storage\n */ // By default, poll every 3 minutes\nconst DEFAULT_INTERVAL = 180 * 1000;\nconst DEFAULT_PREFERENCES = {\n    selectedCurrency: \"USD\",\n    theme: \"dark\",\n    locale: \"en\",\n    accountType: ACCOUNT_CATEGORY.NORMAL,\n    contacts: [],\n    jwtToken: \"\",\n    fetchedPastTx: [],\n    pastTransactions: [],\n    paymentTx: [],\n    defaultPublicAddress: \"\",\n    customTokens: [],\n    customNfts: [],\n    crashReport: true,\n    userInfo: {\n        aggregateVerifier: \"\",\n        email: \"\",\n        name: \"\",\n        profileImage: \"\",\n        typeOfLogin: LOGIN_PROVIDER.GOOGLE,\n        verifier: \"\",\n        verifierId: \"\"\n    }\n};\n/**\n * Controller that stores shared settings and exposes convenience methods\n */ class BasePreferencesController extends BaseController {\n    /**\n   * Creates a PreferencesController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */ constructor({ config, state, defaultPreferences, signAuthMessage, validateSignMessage }){\n        super({\n            config,\n            state\n        });\n        /**\n     * Name of this controller used during composition\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"name\", \"PreferencesController\");\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"iframeOrigin\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"wsApiClient\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"signAuthMessage\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"validateSignMessage\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"defaultPreferences\", void 0);\n        if (!config.api) {\n            throw new Error(\"PreferencesController - no api specified in config.\");\n        }\n        this.defaultState = {\n            identities: {},\n            selectedAddress: \"\",\n            lastErrorMessage: \"\",\n            lastSuccessMessage: \"\"\n        };\n        this.defaultConfig = {\n            api: config.api,\n            pollInterval: DEFAULT_INTERVAL\n        };\n        this.initialize();\n        this.defaultPreferences = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, DEFAULT_PREFERENCES), defaultPreferences);\n        this.signAuthMessage = signAuthMessage;\n        this.validateSignMessage = validateSignMessage;\n        this.wsApiClient = WSApiClient(this.config.api, this);\n    }\n    setIframeOrigin(origin) {\n        this.iframeOrigin = origin;\n    }\n    getAddressState(address) {\n        const selectedAddress = address || this.state.selectedAddress;\n        return this.state.identities[selectedAddress];\n    }\n    /**\n   * Sets selected address\n   *\n   * @param selectedAddress - casper account hash\n   */ setSelectedAddress(selectedAddress) {\n        this.update({\n            selectedAddress\n        });\n    }\n    async getUser(address) {\n        const user = await this.wsApiClient.authGet(\"user?fetchTx=false\", this.authCredentials(address), {\n            useAPIKey: true\n        });\n        return user.data;\n    }\n    async createUser(params) {\n        const { selectedCurrency, theme, verifier, verifierId, locale, address, idToken, type, web3AuthNetwork } = params;\n        const userPayload = {\n            default_currency: selectedCurrency,\n            theme,\n            verifier,\n            verifier_id: verifierId,\n            locale,\n            idToken,\n            account_type: type,\n            web3auth_network: web3AuthNetwork\n        };\n        await this.wsApiClient.authPost(\"user\", userPayload, this.authCredentials(address), {\n            useAPIKey: true\n        });\n        this.updateState({\n            theme,\n            defaultPublicAddress: address,\n            selectedCurrency,\n            locale,\n            accountType: type\n        }, address);\n    }\n    async storeUserLogin(params) {\n        const { verifierId, verifier, options, address, idToken, web3AuthClientId, web3AuthNetwork, sessionPubKey, loginMode } = params;\n        if (!options.rehydrate) {\n            const browser = bowser__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getParser(window.navigator.userAgent);\n            const specialBrowser = getCustomDeviceInfo();\n            const recordLoginPayload = {\n                os: browser.getOSName(),\n                os_version: browser.getOSVersion() || \"unidentified\",\n                browser: (specialBrowser === null || specialBrowser === void 0 ? void 0 : specialBrowser.browser) || browser.getBrowserName() || \"unidentified\",\n                browser_version: browser.getBrowserVersion() || \"unidentified\",\n                platform: browser.getPlatform().type || \"desktop\",\n                hostname: this.iframeOrigin,\n                verifier,\n                verifier_id: verifierId,\n                idToken,\n                web3auth_client_id: web3AuthClientId,\n                web3auth_network: web3AuthNetwork,\n                session_pub_key: sessionPubKey,\n                login_mode: loginMode\n            };\n            await this.wsApiClient.authPost(\"user/recordLogin\", recordLoginPayload, this.authCredentials(address), {\n                useAPIKey: true\n            });\n        }\n    }\n    async setCrashReport(isEnabled) {\n        var _this$getAddressState;\n        if (isEnabled === ((_this$getAddressState = this.getAddressState()) === null || _this$getAddressState === void 0 ? void 0 : _this$getAddressState.crashReport)) return true;\n        try {\n            await this.wsApiClient.authPatch(\"user\", {\n                enable_crash_reporter: isEnabled\n            }, this.authCredentials(), {\n                useAPIKey: true\n            });\n            this.updateState({\n                crashReport: isEnabled\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(error);\n            return false;\n        }\n    }\n    async setUserTheme(theme) {\n        var _this$getAddressState2;\n        if (theme === ((_this$getAddressState2 = this.getAddressState()) === null || _this$getAddressState2 === void 0 ? void 0 : _this$getAddressState2.theme)) return true;\n        try {\n            await this.wsApiClient.authPatch(\"user\", {\n                theme\n            }, this.authCredentials(), {\n                useAPIKey: true\n            });\n            this.updateState({\n                theme\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(error);\n            return false;\n        }\n    }\n    async setUserLocale(locale) {\n        var _this$getAddressState3;\n        if (locale === ((_this$getAddressState3 = this.getAddressState()) === null || _this$getAddressState3 === void 0 ? void 0 : _this$getAddressState3.locale)) return;\n        try {\n            await this.wsApiClient.authPatch(\"user\", {\n                locale\n            }, this.authCredentials(), {\n                useAPIKey: true\n            });\n            this.updateState({\n                locale\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to set locale\", error);\n            return false;\n        }\n    }\n    async setSelectedCurrency(payload) {\n        var _this$getAddressState4;\n        if (payload.selectedCurrency === ((_this$getAddressState4 = this.getAddressState()) === null || _this$getAddressState4 === void 0 ? void 0 : _this$getAddressState4.selectedCurrency)) return true;\n        try {\n            await this.wsApiClient.authPatch(\"user\", {\n                default_currency: payload.selectedCurrency\n            }, this.authCredentials(), {\n                useAPIKey: true\n            });\n            this.updateState({\n                selectedCurrency: payload.selectedCurrency\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(error);\n            return false;\n        }\n    }\n    async addContact(contact) {\n        try {\n            var _this$getAddressState5;\n            const response = await this.wsApiClient.authPost(\"contact\", contact, this.authCredentials(), {\n                useAPIKey: true\n            });\n            this.updateState({\n                contacts: [\n                    ...((_this$getAddressState5 = this.getAddressState()) === null || _this$getAddressState5 === void 0 ? void 0 : _this$getAddressState5.contacts) || [],\n                    response.data\n                ]\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to add contact\", error);\n            return false;\n        }\n    }\n    async deleteContact(contactId) {\n        try {\n            var _this$getAddressState6;\n            const response = await this.wsApiClient.authRemove(`contact/${contactId}`, {}, this.authCredentials(), {\n                useAPIKey: true\n            });\n            const finalContacts = (_this$getAddressState6 = this.getAddressState()) === null || _this$getAddressState6 === void 0 ? void 0 : _this$getAddressState6.contacts.filter((contact)=>contact.id !== response.data.id);\n            if (finalContacts) this.updateState({\n                contacts: [\n                    ...finalContacts\n                ]\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to delete contact\", error);\n            return false;\n        }\n    }\n    async revokeDiscord(idToken) {\n        try {\n            const resp = await this.wsApiClient.authPost(\"revoke/discord\", {\n                token: idToken\n            }, this.authCredentials(), {\n                useAPIKey: true\n            });\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(resp);\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(error);\n        }\n    }\n    async patchPastTx(body, address) {\n        try {\n            const response = await this.wsApiClient.authPatch(\"transaction\", body, this.authCredentials(address), {\n                useAPIKey: true\n            });\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"successfully patched\", response);\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to patch tx\", error);\n        }\n    }\n    async postPastTx(tx, address) {\n        try {\n            const response = await this.wsApiClient.authPost(\"transaction\", tx, this.authCredentials(address), {\n                useAPIKey: true\n            });\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"successfully posted tx\", response);\n            return response;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(error, \"unable to insert transaction\");\n        }\n    }\n    async getWalletOrders(address) {\n        try {\n            const response = await this.wsApiClient.authGet(\"transaction\", this.authCredentials(address), {\n                useAPIKey: true\n            });\n            return response.success ? response.data ? response.data : [] : [];\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to get wallet orders tx\", error);\n            return [];\n        }\n    }\n    async getTopUpOrders(address) {\n        try {\n            const response = await this.wsApiClient.authGet(\"transaction\", this.authCredentials(address), {\n                useAPIKey: true\n            });\n            return response.data || [];\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to fetch past Top up orders\", error);\n        }\n    }\n    async getBillBoardData() {\n        try {\n            const response = await this.wsApiClient.authGet(\"billboard\", this.authCredentials(), {\n                useAPIKey: true\n            });\n            return response.success ? response.data : [];\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to get billboard data\", error);\n            return [];\n        }\n    }\n    async getMessageForSigning(publicAddress, web3AuthIdToken) {\n        const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${this.config.api}/auth/message`, {\n            public_address: publicAddress,\n            id_token: web3AuthIdToken\n        }, {}, {\n            useAPIKey: true\n        });\n        return response.message;\n    }\n    async getTwitterId(payload) {\n        const res = await this.wsApiClient.authGet(`twitter?screen_name=${payload.nick}`, this.authCredentials(), {\n            useAPIKey: true\n        });\n        return `${payload.typeOfLogin.toLowerCase()}|${res.data.toString()}`;\n    }\n    async sendEmail(payload) {\n        return this.wsApiClient.authPost(\"transaction/sendemail\", payload.emailObject, this.authCredentials(), {\n            useAPIKey: true\n        });\n    }\n    async refreshJwt() {\n        const address = this.state.selectedAddress;\n        const messageToSign = await this.getMessageForSigning(address);\n        await this.validateSignMessage(messageToSign);\n        const signedMessage = await this.signAuthMessage(address, messageToSign);\n        const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${this.config.api}/auth/verify`, {\n            challenge: messageToSign,\n            public_address: address,\n            signed_message: signedMessage\n        }, {}, {\n            useAPIKey: true\n        });\n        this.updateState({\n            jwtToken: response.token\n        }, address);\n    }\n    async getDappList() {\n        try {\n            const response = await this.wsApiClient.authGet(\"dapps\", this.authCredentials(), {\n                useAPIKey: true\n            });\n            return response.success ? response.data : [];\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to get dapps list\", error);\n            return [];\n        }\n    }\n    /**\n   * Strategy\n   * For account type: threshold, normal (web3auth login)\n   * idToken from web3auth login must be present. We use it directly\n   *\n   * For account type: app_scoped, IMPORTED\n   * idToken from web3auth login must be present. We request a message for signing using the idToken\n   * and sign it using the private key of the account. We then send the signed message to the backend\n   * to verify the signature and return a new jwtToken that includes the app_scoped address\n   *\n   * For account type: Account abstraction\n   * idToken from web3auth login must be present. We use it to exchange for a new jwtToken.\n   * Because backend can derive AA address from public address and issue this token easily.\n   *\n   * For account type: external\n   * idToken from web3auth `authenticateUser` (siww) login must be present. We use it directly\n   */ async init(params) {\n        const { address, userInfo, idToken, metadata = {}, type } = params;\n        if (this.getAddressState(address)) return;\n        let jwtToken;\n        switch(type){\n            case ACCOUNT_CATEGORY.IMPORTED:\n                {\n                    if (!idToken) throw new Error(\"Web3Auth idToken must be present\");\n                    const messageToSign = await this.getMessageForSigning(address, idToken);\n                    await this.validateSignMessage(messageToSign);\n                    const signedMessage = await this.signAuthMessage(address, messageToSign);\n                    const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${this.config.api}/auth/verify`, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                        challenge: messageToSign,\n                        account_type: type,\n                        public_address: address,\n                        signed_message: signedMessage,\n                        verifier: userInfo.aggregateVerifier || userInfo.verifier,\n                        verifier_id: userInfo.verifierId\n                    }, metadata), {}, {\n                        useAPIKey: true\n                    });\n                    jwtToken = response.token;\n                    break;\n                }\n            case ACCOUNT_CATEGORY.EXTERNAL:\n                {\n                    if (!idToken) throw new Error(\"SIWW idToken must be present\");\n                    const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${this.config.api}/auth/verify`, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                        account_type: type,\n                        public_address: address,\n                        id_token: idToken,\n                        verifier: userInfo.aggregateVerifier || userInfo.verifier,\n                        verifier_id: userInfo.verifierId\n                    }, metadata), {}, {\n                        useAPIKey: true\n                    });\n                    jwtToken = response.token;\n                    break;\n                }\n            case ACCOUNT_CATEGORY.ACCOUNT_ABSTRACTION:\n                {\n                    if (!idToken) throw new Error(\"Web3Auth idToken must be present\");\n                    const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${this.config.api}/auth/verify`, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                        public_address: address,\n                        id_token: idToken,\n                        verifier: userInfo.aggregateVerifier || userInfo.verifier,\n                        verifier_id: userInfo.verifierId,\n                        account_type: type\n                    }, metadata), {}, {\n                        useAPIKey: true\n                    });\n                    jwtToken = response.token;\n                    break;\n                }\n            case ACCOUNT_CATEGORY.MPC:\n            case ACCOUNT_CATEGORY.SFA:\n                {\n                    if (!metadata.signatures) throw new Error(\"MPC signatures must be present\");\n                    const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${this.config.api}/auth/verify`, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                        public_address: address,\n                        verifier: userInfo.aggregateVerifier || userInfo.verifier,\n                        verifier_id: userInfo.verifierId,\n                        account_type: type\n                    }, metadata), {}, {\n                        useAPIKey: true\n                    });\n                    jwtToken = response.token;\n                    break;\n                }\n            case ACCOUNT_CATEGORY.NORMAL:\n            case ACCOUNT_CATEGORY.THRESHOLD:\n            case ACCOUNT_CATEGORY.APP_SCOPED:\n            default:\n                if (!idToken) throw new Error(\"Web3Auth idToken must be present\");\n                jwtToken = idToken;\n                break;\n        }\n        this.updateState({\n            jwtToken,\n            userInfo,\n            accountType: type !== null && type !== void 0 ? type : this.defaultPreferences.accountType\n        }, address);\n    }\n    updateState(preferences, address) {\n        const selectedAddress = address || this.state.selectedAddress;\n        const currentState = this.getAddressState(selectedAddress) || cloneDeep(this.defaultPreferences);\n        const mergedState = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, currentState), preferences);\n        this.update({\n            identities: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.state.identities), {}, {\n                [selectedAddress]: mergedState\n            })\n        });\n        return mergedState;\n    }\n    authCredentials(address) {\n        var _this$getAddressState7;\n        const selectedAddress = address || this.state.selectedAddress;\n        const jwtToken = ((_this$getAddressState7 = this.getAddressState(selectedAddress)) === null || _this$getAddressState7 === void 0 ? void 0 : _this$getAddressState7.jwtToken) || \"\";\n        return {\n            jwtToken,\n            publicAddress: selectedAddress\n        };\n    }\n    headers(address) {\n        var _this$getAddressState8;\n        const selectedAddress = address || this.state.selectedAddress;\n        return getHeaders(((_this$getAddressState8 = this.getAddressState(selectedAddress)) === null || _this$getAddressState8 === void 0 ? void 0 : _this$getAddressState8.jwtToken) || \"\", selectedAddress);\n    }\n}\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */ let TransactionStatus = /*#__PURE__*/ function(TransactionStatus) {\n    TransactionStatus[\"approved\"] = \"approved\";\n    TransactionStatus[\"cancelled\"] = \"cancelled\";\n    TransactionStatus[\"cancelling\"] = \"cancelling\";\n    TransactionStatus[\"confirmed\"] = \"confirmed\";\n    TransactionStatus[\"failed\"] = \"failed\";\n    TransactionStatus[\"finalized\"] = \"finalized\";\n    TransactionStatus[\"processed\"] = \"processed\";\n    TransactionStatus[\"rejected\"] = \"rejected\";\n    TransactionStatus[\"signed\"] = \"signed\";\n    TransactionStatus[\"submitted\"] = \"submitted\";\n    TransactionStatus[\"unapproved\"] = \"unapproved\";\n    TransactionStatus[\"dropped\"] = \"dropped\";\n    TransactionStatus[\"expired\"] = \"expired\";\n    TransactionStatus[\"pending\"] = \"pending\";\n    return TransactionStatus;\n}({});\nconst TRANSACTION_TYPES = {\n    CANCEL: \"cancel\",\n    RETRY: \"retry\",\n    CONTRACT_INTERACTION: \"contractInteraction\",\n    DEPLOY_CONTRACT: \"contractDeployment\",\n    WASM_BASED_DEPLOY: \"wasmBasedDeploy\",\n    STANDARD_TRANSACTION: \"transaction\",\n    STANDARD_PAYMENT_TRANSACTION: \"payment_transaction\",\n    // specific to chains like solana and casper\n    SENT_ETHER: \"sentEther\",\n    TOKEN_METHOD_TRANSFER: \"transfer\",\n    TOKEN_METHOD_TRANSFER_FROM: \"transferFrom\",\n    TOKEN_METHOD_APPROVE: \"approve\",\n    COLLECTIBLE_METHOD_SAFE_TRANSFER_FROM: \"safeTransferFrom\",\n    SET_APPROVAL_FOR_ALL: \"setApprovalForAll\"\n};\nconst TX_EVENTS = {\n    TX_WARNING: \"tx:warning\",\n    TX_ERROR: \"tx:error\",\n    TX_FAILED: \"tx:failed\",\n    TX_CONFIRMED: \"tx:confirmed\",\n    TX_DROPPED: \"tx:dropped\",\n    TX_EXPIRED: \"tx:expired\",\n    TX_STATUS_UPDATE: \"tx:status_update\",\n    TX_UNAPPROVED: \"tx:unapproved\",\n    TX_RETRY: \"tx:retry\",\n    TX_BLOCK_UPDATE: \"tx:block_update\"\n};\n/**\n * Transaction controller configuration\n */ /**\n * Transaction controller state\n */ /**\n * Result\n *\n * result - Promise resolving to a new transaction hash\n * transactionMeta - Meta information about this new transaction\n */ class BaseTransactionStateManager extends BaseController {\n    constructor({ config, state, getCurrentChainId }){\n        super({\n            config,\n            state\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"getCurrentChainId\", void 0);\n        this.defaultConfig = {\n            txHistoryLimit: 40\n        };\n        this.defaultState = {\n            transactions: {},\n            unapprovedTxs: {},\n            currentNetworkTxsList: []\n        };\n        this.initialize();\n        this.getCurrentChainId = getCurrentChainId;\n    }\n    getUnapprovedTxList() {\n        const chainId = this.getCurrentChainId();\n        return pickBy(this.state.transactions, (transaction)=>transaction.status === TransactionStatus.unapproved && transactionMatchesNetwork(transaction, chainId));\n    }\n    getTransaction(txId) {\n        const { transactions } = this.state;\n        return transactions[txId];\n    }\n    updateTransaction(txMeta) {\n        // commit txMeta to state\n        const txId = txMeta.id;\n        txMeta.updated_at = new Date().toISOString();\n        this.update({\n            transactions: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.state.transactions), {}, {\n                [txId]: txMeta\n            })\n        });\n    }\n    setTxStatusRejected(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.rejected);\n        this._deleteTransaction(txId);\n    }\n    /**\n   * The implementing controller can override this functionality and add custom logic + call super.()\n   */ setTxStatusUnapproved(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.unapproved);\n    }\n    setTxStatusApproved(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.approved);\n    }\n    setTxStatusSigned(txId, isFinalStep) {\n        this._setTransactionStatus(txId, TransactionStatus.signed, isFinalStep);\n    }\n    setTxStatusSubmitted(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.submitted);\n    }\n    setTxStatusDropped(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.dropped);\n    }\n    setTxStatusExpired(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.expired);\n    }\n    setTxStatusConfirmed(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.confirmed);\n    }\n    setTxStatusFailed(txId, error_) {\n        const error = !error_ ? new Error(\"Internal torus failure\") : error_;\n        const txMeta = this.getTransaction(txId);\n        txMeta.error = error;\n        this.updateTransaction(txMeta);\n        this._setTransactionStatus(txId, TransactionStatus.failed);\n    }\n    /**\n   * Method to determine if the transaction is in a final state\n   * @param status - Transaction status\n   * @returns boolean if the transaction is in a final state\n   */ isFinalState(status) {\n        return status === TransactionStatus.rejected || status === TransactionStatus.submitted || status === TransactionStatus.confirmed || status === TransactionStatus.failed || status === TransactionStatus.cancelled || status === TransactionStatus.expired;\n    }\n    /**\n   * Filters out the unapproved transactions from state\n   */ clearUnapprovedTxs() {\n        this.update({\n            transactions: omitBy(this.state.transactions, (transaction)=>transaction.status === TransactionStatus.unapproved)\n        });\n    }\n    /**\n   * will append new transactions to old txns.\n   */ _addTransactionsToState(transactions) {\n        this.update({\n            transactions: transactions.reduce((result, newTx)=>{\n                result[newTx.id] = newTx;\n                return result;\n            }, this.state.transactions)\n        });\n    }\n    /**\n   * will set new txns, override existing if any in state.\n   */ _setTransactionsToState(transactions) {\n        this.update({\n            transactions: transactions.reduce((result, newTx)=>{\n                result[newTx.id] = newTx;\n                return result;\n            }, {})\n        });\n    }\n    _deleteTransaction(targetTransactionId) {\n        const { transactions } = this.state;\n        delete transactions[targetTransactionId];\n        this.update({\n            transactions\n        });\n    }\n    _deleteTransactions(targetTransactionIds) {\n        const { transactions } = this.state;\n        targetTransactionIds.forEach((transactionId)=>{\n            delete transactions[transactionId];\n        });\n        this.update({\n            transactions\n        });\n    }\n    _setTransactionStatus(txId, status, isFinalStep) {\n        const txMeta = this.getTransaction(txId);\n        if (!txMeta) {\n            return;\n        }\n        txMeta.status = status;\n        // only updating status so no validation required on txn.\n        this.updateTransaction(txMeta);\n        this.emit(TX_EVENTS.TX_STATUS_UPDATE, {\n            txId,\n            status\n        });\n        if (this.isFinalState(status) || isFinalStep) {\n            this.emit(`${txMeta.id}:finished`, txMeta);\n        } else {\n            this.emit(`${txMeta.id}:${status}`, txId);\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/broadcastChannel.esm.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/broadcastChannel.esm.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BroadcastChannel: () => (/* binding */ BroadcastChannel$1),\n/* harmony export */   IndexedDbMethod: () => (/* binding */ IndexeDbMethod),\n/* harmony export */   LocalStorageMethod: () => (/* binding */ LocalstorageMethod),\n/* harmony export */   NativeMethod: () => (/* binding */ NativeMethod),\n/* harmony export */   OPEN_BROADCAST_CHANNELS: () => (/* binding */ OPEN_BROADCAST_CHANNELS),\n/* harmony export */   ServerMethod: () => (/* binding */ ServerMethod),\n/* harmony export */   chooseMethod: () => (/* binding */ chooseMethod),\n/* harmony export */   enforceOptions: () => (/* binding */ enforceOptions)\n/* harmony export */ });\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var oblivious_set__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! oblivious-set */ \"(ssr)/./node_modules/oblivious-set/dist/esm/src/index.js\");\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! socket.io-client */ \"(ssr)/./node_modules/socket.io-client/build/esm-debug/index.js\");\n/* harmony import */ var _toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/eccrypto */ \"(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js\");\n/* harmony import */ var _toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/metadata-helpers */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js\");\n\n\n\n\n\n// import Bowser from 'bowser';\n/**\n * returns true if the given object is a promise\n */ function isPromise(obj) {\n    if (obj && typeof obj.then === \"function\") {\n        return true;\n    } else {\n        return false;\n    }\n}\nPromise.resolve(false);\nPromise.resolve(true);\nconst PROMISE_RESOLVED_VOID = Promise.resolve();\nfunction sleep(time, resolveWith) {\n    if (!time) time = 0;\n    return new Promise((res)=>setTimeout(()=>res(resolveWith), time));\n}\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n/**\n * https://stackoverflow.com/a/8084248\n */ function randomToken() {\n    return Math.random().toString(36).substring(2);\n}\nlet lastMs = 0;\n/**\n * returns the current time in micro-seconds,\n * WARNING: This is a pseudo-function\n * Performance.now is not reliable in webworkers, so we just make sure to never return the same time.\n * This is enough in browsers, and this function will not be used in nodejs.\n * The main reason for this hack is to ensure that BroadcastChannel behaves equal to production when it is used in fast-running unit tests.\n */ function microSeconds$5() {\n    let ret = Date.now() * 1000; // milliseconds to microseconds\n    if (ret <= lastMs) {\n        ret = lastMs + 1;\n    }\n    lastMs = ret;\n    return ret;\n}\n// the problem is only in iframes. we should default to server in case of iframes.\n// storage scoping is present in all browsers now\n// Safari and other browsers support native Broadcast channel now. It's in LS.\n// test here: https://pubkey.github.io/broadcast-channel/e2e.html?methodType=native\n// https://caniuse.com/broadcastchannel\n// export function are3PCSupported() {\n//     if (typeof navigator === 'undefined') return false;\n//     const browserInfo = Bowser.parse(navigator.userAgent);\n//     log.info(JSON.stringify(browserInfo), 'current browser info');\n//     let thirdPartyCookieSupport = true;\n//     // brave\n//     if (navigator.brave) {\n//         thirdPartyCookieSupport = false;\n//     }\n//     // All webkit & gecko engine instances use itp (intelligent tracking prevention -\n//     // https://webkit.org/tracking-prevention/#intelligent-tracking-prevention-itp)\n//     if (browserInfo.engine.name === Bowser.ENGINE_MAP.WebKit || browserInfo.engine.name === Bowser.ENGINE_MAP.Gecko) {\n//         thirdPartyCookieSupport = false;\n//     }\n//     return thirdPartyCookieSupport;\n// }\nconst log = loglevel__WEBPACK_IMPORTED_MODULE_0___default().getLogger(\"broadcast-channel\");\nlog.setLevel(\"error\");\nconst microSeconds$4 = microSeconds$5;\nconst type$4 = \"native\";\nfunction create$4(channelName) {\n    const state = {\n        time: microSeconds$5(),\n        messagesCallback: null,\n        bc: new BroadcastChannel(channelName),\n        subFns: [] // subscriberFunctions\n    };\n    state.bc.onmessage = (msg)=>{\n        if (state.messagesCallback) {\n            state.messagesCallback(msg.data);\n        }\n    };\n    return state;\n}\nfunction close$4(channelState) {\n    channelState.bc.close();\n    channelState.subFns = [];\n}\nfunction postMessage$4(channelState, messageJson) {\n    try {\n        channelState.bc.postMessage(messageJson, false);\n        return PROMISE_RESOLVED_VOID;\n    } catch (err) {\n        return Promise.reject(err);\n    }\n}\nfunction onMessage$4(channelState, fn1) {\n    channelState.messagesCallback = fn1;\n}\nfunction canBeUsed$4() {\n    /**\n   * in the electron-renderer, isNode will be true even if we are in browser-context\n   * so we also check if window is undefined\n   */ if (true) return false;\n    if (typeof BroadcastChannel === \"function\") {\n        if (BroadcastChannel._pubkey) {\n            throw new Error(\"BroadcastChannel: Do not overwrite window.BroadcastChannel with this module, this is not a polyfill\");\n        }\n        return true;\n    } else return false;\n}\nfunction averageResponseTime$4() {\n    return 150;\n}\nvar NativeMethod = {\n    create: create$4,\n    close: close$4,\n    onMessage: onMessage$4,\n    postMessage: postMessage$4,\n    canBeUsed: canBeUsed$4,\n    type: type$4,\n    averageResponseTime: averageResponseTime$4,\n    microSeconds: microSeconds$4\n};\nfunction fillOptionsWithDefaults() {\n    let originalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const options = JSON.parse(JSON.stringify(originalOptions));\n    // main\n    if (typeof options.webWorkerSupport === \"undefined\") options.webWorkerSupport = true;\n    // indexed-db\n    if (!options.idb) options.idb = {};\n    //  after this time the messages get deleted\n    if (!options.idb.ttl) options.idb.ttl = 1000 * 45;\n    if (!options.idb.fallbackInterval) options.idb.fallbackInterval = 150;\n    //  handles abrupt db onclose events.\n    if (originalOptions.idb && typeof originalOptions.idb.onclose === \"function\") options.idb.onclose = originalOptions.idb.onclose;\n    // localstorage\n    if (!options.localstorage) options.localstorage = {};\n    if (!options.localstorage.removeTimeout) options.localstorage.removeTimeout = 1000 * 60;\n    // server\n    if (!options.server) options.server = {};\n    if (!options.server.url) options.server.url = \"https://session.web3auth.io\";\n    if (!options.server.removeTimeout) options.server.removeTimeout = 1000 * 60 * 5; // 5 minutes\n    // custom methods\n    if (originalOptions.methods) options.methods = originalOptions.methods;\n    return options;\n}\n/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n *\n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */ const microSeconds$3 = microSeconds$5;\nconst DB_PREFIX = \"pubkey.broadcast-channel-0-\";\nconst OBJECT_STORE_ID = \"messages\";\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */ const TRANSACTION_SETTINGS = {\n    durability: \"relaxed\"\n};\nconst type$3 = \"idb\";\nfunction getIdb() {\n    if (typeof indexedDB !== \"undefined\") return indexedDB;\n    if (false) {}\n    return false;\n}\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */ function commitIndexedDBTransaction(tx) {\n    if (tx.commit) {\n        tx.commit();\n    }\n}\nfunction createDatabase(channelName) {\n    const IndexedDB = getIdb();\n    // create table\n    const dbName = DB_PREFIX + channelName;\n    /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */ const openRequest = IndexedDB.open(dbName);\n    openRequest.onupgradeneeded = (ev)=>{\n        const db = ev.target.result;\n        db.createObjectStore(OBJECT_STORE_ID, {\n            keyPath: \"id\",\n            autoIncrement: true\n        });\n    };\n    const dbPromise = new Promise((res, rej)=>{\n        openRequest.onerror = (ev)=>rej(ev);\n        openRequest.onsuccess = ()=>{\n            res(openRequest.result);\n        };\n    });\n    return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */ function writeMessage(db, readerUuid, messageJson) {\n    const time = Date.now();\n    const writeObject = {\n        uuid: readerUuid,\n        time,\n        data: messageJson\n    };\n    const tx = db.transaction([\n        OBJECT_STORE_ID\n    ], \"readwrite\", TRANSACTION_SETTINGS);\n    return new Promise((res, rej)=>{\n        tx.oncomplete = ()=>res();\n        tx.onerror = (ev)=>rej(ev);\n        const objectStore = tx.objectStore(OBJECT_STORE_ID);\n        objectStore.add(writeObject);\n        commitIndexedDBTransaction(tx);\n    });\n}\nfunction getAllMessages(db) {\n    const tx = db.transaction(OBJECT_STORE_ID, \"readonly\", TRANSACTION_SETTINGS);\n    const objectStore = tx.objectStore(OBJECT_STORE_ID);\n    const ret = [];\n    return new Promise((res)=>{\n        objectStore.openCursor().onsuccess = (ev)=>{\n            const cursor = ev.target.result;\n            if (cursor) {\n                ret.push(cursor.value);\n                //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n                cursor.continue();\n            } else {\n                commitIndexedDBTransaction(tx);\n                res(ret);\n            }\n        };\n    });\n}\nfunction getMessagesHigherThan(db, lastCursorId) {\n    const tx = db.transaction(OBJECT_STORE_ID, \"readonly\", TRANSACTION_SETTINGS);\n    const objectStore = tx.objectStore(OBJECT_STORE_ID);\n    const ret = [];\n    let keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n    /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */ if (objectStore.getAll) {\n        const getAllRequest = objectStore.getAll(keyRangeValue);\n        return new Promise((res, rej)=>{\n            getAllRequest.onerror = (err)=>rej(err);\n            getAllRequest.onsuccess = function(e) {\n                res(e.target.result);\n            };\n        });\n    }\n    function openCursor() {\n        // Occasionally Safari will fail on IDBKeyRange.bound, this\n        // catches that error, having it open the cursor to the first\n        // item. When it gets data it will advance to the desired key.\n        try {\n            keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n            return objectStore.openCursor(keyRangeValue);\n        } catch (e) {\n            return objectStore.openCursor();\n        }\n    }\n    return new Promise((res, rej)=>{\n        const openCursorRequest = openCursor();\n        openCursorRequest.onerror = (err)=>rej(err);\n        openCursorRequest.onsuccess = (ev)=>{\n            const cursor = ev.target.result;\n            if (cursor) {\n                if (cursor.value.id < lastCursorId + 1) {\n                    cursor.continue(lastCursorId + 1);\n                } else {\n                    ret.push(cursor.value);\n                    cursor.continue();\n                }\n            } else {\n                commitIndexedDBTransaction(tx);\n                res(ret);\n            }\n        };\n    });\n}\nfunction removeMessagesById(db, ids) {\n    const tx = db.transaction([\n        OBJECT_STORE_ID\n    ], \"readwrite\", TRANSACTION_SETTINGS);\n    const objectStore = tx.objectStore(OBJECT_STORE_ID);\n    return Promise.all(ids.map((id)=>{\n        const deleteRequest = objectStore.delete(id);\n        return new Promise((res)=>{\n            deleteRequest.onsuccess = ()=>res();\n        });\n    }));\n}\nfunction getOldMessages(db, ttl) {\n    const olderThen = Date.now() - ttl;\n    const tx = db.transaction(OBJECT_STORE_ID, \"readonly\", TRANSACTION_SETTINGS);\n    const objectStore = tx.objectStore(OBJECT_STORE_ID);\n    const ret = [];\n    return new Promise((res)=>{\n        objectStore.openCursor().onsuccess = (ev)=>{\n            const cursor = ev.target.result;\n            if (cursor) {\n                const msgObk = cursor.value;\n                if (msgObk.time < olderThen) {\n                    ret.push(msgObk);\n                    //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n                    cursor.continue();\n                } else {\n                    // no more old messages,\n                    commitIndexedDBTransaction(tx);\n                    res(ret);\n                    return;\n                }\n            } else {\n                res(ret);\n            }\n        };\n    });\n}\nfunction cleanOldMessages(db, ttl) {\n    return getOldMessages(db, ttl).then((tooOld)=>{\n        return removeMessagesById(db, tooOld.map((msg)=>msg.id));\n    });\n}\nfunction create$3(channelName, options) {\n    options = fillOptionsWithDefaults(options);\n    return createDatabase(channelName).then((db)=>{\n        const state = {\n            closed: false,\n            lastCursorId: 0,\n            channelName,\n            options,\n            uuid: randomToken(),\n            /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */ eMIs: new oblivious_set__WEBPACK_IMPORTED_MODULE_4__.ObliviousSet(options.idb.ttl * 2),\n            // ensures we do not read messages in parrallel\n            writeBlockPromise: PROMISE_RESOLVED_VOID,\n            messagesCallback: null,\n            readQueuePromises: [],\n            db,\n            time: microSeconds$5()\n        };\n        /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */ db.onclose = function() {\n            state.closed = true;\n            if (options.idb.onclose) options.idb.onclose();\n        };\n        /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */ _readLoop(state);\n        return state;\n    });\n}\nfunction _readLoop(state) {\n    if (state.closed) return;\n    readNewMessages(state).then(()=>sleep(state.options.idb.fallbackInterval)).then(()=>_readLoop(state));\n}\nfunction _filterMessage(msgObj, state) {\n    if (msgObj.uuid === state.uuid) return false; // send by own\n    if (state.eMIs.has(msgObj.id)) return false; // already emitted\n    if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n    return true;\n}\n/**\n * reads all new messages from the database and emits them\n */ function readNewMessages(state) {\n    // channel already closed\n    if (state.closed) return PROMISE_RESOLVED_VOID;\n    // if no one is listening, we do not need to scan for new messages\n    if (!state.messagesCallback) return PROMISE_RESOLVED_VOID;\n    return getMessagesHigherThan(state.db, state.lastCursorId).then((newerMessages)=>{\n        const useMessages = newerMessages/**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */ .filter((msgObj)=>!!msgObj).map((msgObj)=>{\n            if (msgObj.id > state.lastCursorId) {\n                state.lastCursorId = msgObj.id;\n            }\n            return msgObj;\n        }).filter((msgObj)=>_filterMessage(msgObj, state)).sort((msgObjA, msgObjB)=>msgObjA.time - msgObjB.time); // sort by time\n        useMessages.forEach((msgObj)=>{\n            if (state.messagesCallback) {\n                state.eMIs.add(msgObj.id);\n                state.messagesCallback(msgObj.data);\n            }\n        });\n        return PROMISE_RESOLVED_VOID;\n    });\n}\nfunction close$3(channelState) {\n    channelState.closed = true;\n    channelState.db.close();\n}\nfunction postMessage$3(channelState, messageJson) {\n    channelState.writeBlockPromise = channelState.writeBlockPromise.then(()=>writeMessage(channelState.db, channelState.uuid, messageJson)).then(()=>{\n        if (randomInt(0, 10) === 0) {\n            /* await (do not await) */ cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n        }\n    });\n    return channelState.writeBlockPromise;\n}\nfunction onMessage$3(channelState, fn1, time) {\n    channelState.messagesCallbackTime = time;\n    channelState.messagesCallback = fn1;\n    readNewMessages(channelState);\n}\nfunction canBeUsed$3() {\n    const idb = getIdb();\n    if (!idb) return false;\n    return true;\n}\nfunction averageResponseTime$3(options) {\n    return options.idb.fallbackInterval * 2;\n}\nvar IndexeDbMethod = {\n    getIdb,\n    createDatabase,\n    create: create$3,\n    close: close$3,\n    onMessage: onMessage$3,\n    postMessage: postMessage$3,\n    canBeUsed: canBeUsed$3,\n    type: type$3,\n    averageResponseTime: averageResponseTime$3,\n    microSeconds: microSeconds$3,\n    writeMessage,\n    getAllMessages,\n    cleanOldMessages,\n    getMessagesHigherThan,\n    getOldMessages\n};\n/**\n * A localStorage-only method which uses localstorage and its 'storage'-event\n * This does not work inside of webworkers because they have no access to locastorage\n * This is basically implemented to support IE9 or your grandmothers toaster.\n * @link https://caniuse.com/#feat=namevalue-storage\n * @link https://caniuse.com/#feat=indexeddb\n */ const microSeconds$2 = microSeconds$5;\nconst KEY_PREFIX$1 = \"pubkey.broadcastChannel-\";\nconst type$2 = \"localstorage\";\n/**\n * copied from crosstab\n * @link https://github.com/tejacques/crosstab/blob/master/src/crosstab.js#L32\n */ function getLocalStorage() {\n    let localStorage;\n    if (true) return null;\n    try {\n        localStorage = window.localStorage;\n        localStorage = window[\"ie8-eventlistener/storage\"] || window.localStorage;\n    } catch (e) {\n    // New versions of Firefox throw a Security exception\n    // if cookies are disabled. See\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1028153\n    }\n    return localStorage;\n}\nfunction storageKey$1(channelName) {\n    return KEY_PREFIX$1 + channelName;\n}\n/**\n * writes the new message to the storage\n * and fires the storage-event so other readers can find it\n */ function postMessage$2(channelState, messageJson) {\n    return new Promise((res)=>{\n        sleep().then(()=>{\n            const key = storageKey$1(channelState.channelName);\n            const writeObj = {\n                token: randomToken(),\n                time: Date.now(),\n                data: messageJson,\n                uuid: channelState.uuid\n            };\n            const value = JSON.stringify(writeObj);\n            getLocalStorage().setItem(key, value);\n            /**\n       * StorageEvent does not fire the 'storage' event\n       * in the window that changes the state of the local storage.\n       * So we fire it manually\n       */ const ev = document.createEvent(\"Event\");\n            ev.initEvent(\"storage\", true, true);\n            ev.key = key;\n            ev.newValue = value;\n            window.dispatchEvent(ev);\n            res();\n        });\n    });\n}\nfunction addStorageEventListener(channelName, fn1) {\n    const key = storageKey$1(channelName);\n    const listener = (ev)=>{\n        if (ev.key === key) {\n            fn1(JSON.parse(ev.newValue));\n        }\n    };\n    window.addEventListener(\"storage\", listener);\n    return listener;\n}\nfunction removeStorageEventListener(listener) {\n    window.removeEventListener(\"storage\", listener);\n}\nfunction create$2(channelName, options) {\n    options = fillOptionsWithDefaults(options);\n    if (!canBeUsed$2()) {\n        throw new Error(\"BroadcastChannel: localstorage cannot be used\");\n    }\n    const uuid = randomToken();\n    /**\n   * eMIs\n   * contains all messages that have been emitted before\n   * @type {ObliviousSet}\n   */ const eMIs = new oblivious_set__WEBPACK_IMPORTED_MODULE_4__.ObliviousSet(options.localstorage.removeTimeout);\n    const state = {\n        channelName,\n        uuid,\n        time: microSeconds$5(),\n        eMIs\n    };\n    state.listener = addStorageEventListener(channelName, (msgObj)=>{\n        if (!state.messagesCallback) return; // no listener\n        if (msgObj.uuid === uuid) return; // own message\n        if (!msgObj.token || eMIs.has(msgObj.token)) return; // already emitted\n        if (msgObj.data.time && msgObj.data.time < state.messagesCallbackTime) return; // too old\n        eMIs.add(msgObj.token);\n        state.messagesCallback(msgObj.data);\n    });\n    return state;\n}\nfunction close$2(channelState) {\n    removeStorageEventListener(channelState.listener);\n}\nfunction onMessage$2(channelState, fn1, time) {\n    channelState.messagesCallbackTime = time;\n    channelState.messagesCallback = fn1;\n}\nfunction canBeUsed$2() {\n    const ls = getLocalStorage();\n    if (!ls) return false;\n    try {\n        const key = \"__broadcastchannel_check\";\n        ls.setItem(key, \"works\");\n        ls.removeItem(key);\n    } catch (e) {\n        // Safari 10 in private mode will not allow write access to local\n        // storage and fail with a QuotaExceededError. See\n        // https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API#Private_Browsing_Incognito_modes\n        return false;\n    }\n    return true;\n}\nfunction averageResponseTime$2() {\n    const defaultTime = 120;\n    const userAgent = navigator.userAgent.toLowerCase();\n    if (userAgent.includes(\"safari\") && !userAgent.includes(\"chrome\")) {\n        // safari is much slower so this time is higher\n        return defaultTime * 2;\n    }\n    return defaultTime;\n}\nvar LocalstorageMethod = {\n    getLocalStorage,\n    create: create$2,\n    close: close$2,\n    onMessage: onMessage$2,\n    postMessage: postMessage$2,\n    canBeUsed: canBeUsed$2,\n    type: type$2,\n    averageResponseTime: averageResponseTime$2,\n    microSeconds: microSeconds$2,\n    storageKey: storageKey$1,\n    addStorageEventListener,\n    removeStorageEventListener\n};\n/**\n * A localStorage-only method which uses localstorage and its 'storage'-event\n * This does not work inside of webworkers because they have no access to locastorage\n * This is basically implemented to support IE9 or your grandmothers toaster.\n * @link https://caniuse.com/#feat=namevalue-storage\n * @link https://caniuse.com/#feat=indexeddb\n */ const microSeconds$1 = microSeconds$5;\nconst KEY_PREFIX = \"pubkey.broadcastChannel-\";\nconst type$1 = \"server\";\nlet SOCKET_CONN_INSTANCE = null;\n// used to decide to reconnect socket e.g. when socket connection is disconnected unexpectedly\nconst runningChannels = new Set();\nfunction storageKey(channelName) {\n    return KEY_PREFIX + channelName;\n}\n/**\n * writes the new message to the storage\n * and fires the storage-event so other readers can find it\n */ function postMessage$1(channelState, messageJson) {\n    return new Promise((res, rej)=>{\n        sleep().then(async ()=>{\n            const key = storageKey(channelState.channelName);\n            const channelEncPrivKey = (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.keccak256)(Buffer.from(key, \"utf8\"));\n            const encData = await (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.encryptData)(channelEncPrivKey.toString(\"hex\"), {\n                token: randomToken(),\n                time: Date.now(),\n                data: messageJson,\n                uuid: channelState.uuid\n            });\n            const body = {\n                sameOriginCheck: true,\n                sameIpCheck: true,\n                key: (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.getPublic)(channelEncPrivKey).toString(\"hex\"),\n                data: encData,\n                signature: (await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.sign)(channelEncPrivKey, (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.keccak256)(Buffer.from(encData, \"utf8\")))).toString(\"hex\")\n            };\n            if (channelState.timeout) body.timeout = channelState.timeout;\n            return fetch(channelState.serverUrl + \"/channel/set\", {\n                method: \"POST\",\n                body: JSON.stringify(body),\n                headers: {\n                    \"Content-Type\": \"application/json; charset=utf-8\"\n                }\n            }).then(res).catch(rej);\n        });\n    });\n}\nfunction getSocketInstance(serverUrl) {\n    if (SOCKET_CONN_INSTANCE) {\n        return SOCKET_CONN_INSTANCE;\n    }\n    const SOCKET_CONN = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_1__.io)(serverUrl, {\n        transports: [\n            \"websocket\",\n            \"polling\"\n        ],\n        // use WebSocket first, if available\n        withCredentials: true,\n        reconnectionDelayMax: 10000,\n        reconnectionAttempts: 10\n    });\n    SOCKET_CONN.on(\"connect_error\", (err)=>{\n        // revert to classic upgrade\n        SOCKET_CONN.io.opts.transports = [\n            \"polling\",\n            \"websocket\"\n        ];\n        log.error(\"connect error\", err);\n    });\n    SOCKET_CONN.on(\"connect\", async ()=>{\n        const { engine } = SOCKET_CONN.io;\n        log.debug(\"initially connected to\", engine.transport.name); // in most cases, prints \"polling\"\n        engine.once(\"upgrade\", ()=>{\n            // called when the transport is upgraded (i.e. from HTTP long-polling to WebSocket)\n            log.debug(\"upgraded\", engine.transport.name); // in most cases, prints \"websocket\"\n        });\n        engine.once(\"close\", (reason)=>{\n            // called when the underlying connection is closed\n            log.debug(\"connection closed\", reason);\n        });\n    });\n    SOCKET_CONN.on(\"error\", (err)=>{\n        log.error(\"socket errored\", err);\n        SOCKET_CONN.disconnect();\n    });\n    SOCKET_CONN_INSTANCE = SOCKET_CONN;\n    return SOCKET_CONN;\n}\nfunction setupSocketConnection(serverUrl, channelState, fn1) {\n    const socketConn = getSocketInstance(serverUrl);\n    const key = storageKey(channelState.channelName);\n    const channelEncPrivKey = (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.keccak256)(Buffer.from(key, \"utf8\"));\n    const channelPubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.getPublic)(channelEncPrivKey).toString(\"hex\");\n    if (socketConn.connected) {\n        socketConn.emit(\"check_auth_status\", channelPubKey, {\n            sameOriginCheck: true,\n            sameIpCheck: true\n        });\n    } else {\n        socketConn.once(\"connect\", ()=>{\n            log.debug(\"connected with socket\");\n            socketConn.emit(\"check_auth_status\", channelPubKey, {\n                sameOriginCheck: true,\n                sameIpCheck: true\n            });\n        });\n    }\n    const reconnect = ()=>{\n        socketConn.once(\"connect\", async ()=>{\n            if (runningChannels.has(channelState.channelName)) {\n                socketConn.emit(\"check_auth_status\", channelPubKey, {\n                    sameOriginCheck: true,\n                    sameIpCheck: true\n                });\n            }\n        });\n    };\n    const visibilityListener = ()=>{\n        // if channel is closed, then remove the listener.\n        if (!socketConn || !runningChannels.has(channelState.channelName)) {\n            document.removeEventListener(\"visibilitychange\", visibilityListener);\n            return;\n        }\n        // if not connected, then wait for connection and ping server for latest msg.\n        if (!socketConn.connected && document.visibilityState === \"visible\") {\n            reconnect();\n        }\n    };\n    const listener = async (ev)=>{\n        try {\n            const decData = await (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.decryptData)(channelEncPrivKey.toString(\"hex\"), ev);\n            log.info(decData);\n            fn1(decData);\n        } catch (error) {\n            log.error(error);\n        }\n    };\n    socketConn.on(\"disconnect\", ()=>{\n        log.debug(\"socket disconnected\");\n        if (runningChannels.has(channelState.channelName)) {\n            log.error(\"socket disconnected unexpectedly, reconnecting socket\");\n            reconnect();\n        }\n    });\n    socketConn.on(`${channelPubKey}_success`, listener);\n    if (typeof document !== \"undefined\") document.addEventListener(\"visibilitychange\", visibilityListener);\n    return socketConn;\n}\nfunction create$1(channelName, options) {\n    options = fillOptionsWithDefaults(options);\n    const uuid = randomToken();\n    /**\n   * eMIs\n   * contains all messages that have been emitted before\n   * @type {ObliviousSet}\n   */ const eMIs = new oblivious_set__WEBPACK_IMPORTED_MODULE_4__.ObliviousSet(options.server.removeTimeout);\n    const state = {\n        channelName,\n        uuid,\n        eMIs,\n        // emittedMessagesIds\n        serverUrl: options.server.url,\n        time: microSeconds$5()\n    };\n    if (options.server.timeout) state.timeout = options.server.timeout;\n    setupSocketConnection(options.server.url, state, (msgObj)=>{\n        if (!state.messagesCallback) return; // no listener\n        if (msgObj.uuid === state.uuid) return; // own message\n        if (!msgObj.token || state.eMIs.has(msgObj.token)) return; // already emitted\n        // if (msgObj.data.time && msgObj.data.time < state.messagesCallbackTime) return; // too old\n        state.eMIs.add(msgObj.token);\n        state.messagesCallback(msgObj.data);\n    });\n    runningChannels.add(channelName);\n    return state;\n}\nfunction close$1(channelState) {\n    runningChannels.delete(channelState.channelName);\n// give 2 sec for all msgs which are in transit to be consumed\n// by receiver.\n// window.setTimeout(() => {\n//     removeStorageEventListener(channelState);\n//     SOCKET_CONN_INSTANCE = null;\n// }, 1000);\n}\nfunction onMessage$1(channelState, fn1, time) {\n    channelState.messagesCallbackTime = time;\n    channelState.messagesCallback = fn1;\n}\nfunction canBeUsed$1() {\n    return true;\n}\nfunction averageResponseTime$1() {\n    const defaultTime = 500;\n    // TODO: Maybe increase it based on operation\n    return defaultTime;\n}\nvar ServerMethod = {\n    create: create$1,\n    close: close$1,\n    onMessage: onMessage$1,\n    postMessage: postMessage$1,\n    canBeUsed: canBeUsed$1,\n    type: type$1,\n    averageResponseTime: averageResponseTime$1,\n    microSeconds: microSeconds$1\n};\nconst microSeconds = microSeconds$5;\nconst type = \"simulate\";\nconst SIMULATE_CHANNELS = new Set();\nconst SIMULATE_DELAY_TIME = 5;\nfunction create(channelName) {\n    const state = {\n        time: microSeconds$5(),\n        name: channelName,\n        messagesCallback: null\n    };\n    SIMULATE_CHANNELS.add(state);\n    return state;\n}\nfunction close(channelState) {\n    SIMULATE_CHANNELS.delete(channelState);\n}\nfunction postMessage(channelState, messageJson) {\n    return new Promise((res)=>setTimeout(()=>{\n            const channelArray = Array.from(SIMULATE_CHANNELS);\n            channelArray.forEach((channel)=>{\n                if (channel.name === channelState.name && // has same name\n                channel !== channelState && // not own channel\n                !!channel.messagesCallback && // has subscribers\n                channel.time < messageJson.time // channel not created after postMessage() call\n                ) {\n                    channel.messagesCallback(messageJson);\n                }\n            });\n            res();\n        }, SIMULATE_DELAY_TIME));\n}\nfunction onMessage(channelState, fn1) {\n    channelState.messagesCallback = fn1;\n}\nfunction canBeUsed() {\n    return true;\n}\nfunction averageResponseTime() {\n    return SIMULATE_DELAY_TIME;\n}\nvar SimulateMethod = {\n    create,\n    close,\n    onMessage,\n    postMessage,\n    canBeUsed,\n    type,\n    averageResponseTime,\n    microSeconds\n};\n// order is important\nconst METHODS = [\n    NativeMethod,\n    // fastest\n    IndexeDbMethod,\n    LocalstorageMethod,\n    ServerMethod\n];\nfunction chooseMethod(options) {\n    let chooseMethods = [].concat(options.methods, METHODS).filter(Boolean);\n    // directly chosen\n    if (options.type) {\n        if (options.type === \"simulate\") {\n            // only use simulate-method if directly chosen\n            return SimulateMethod;\n        }\n        const ret = chooseMethods.find((m)=>m.type === options.type);\n        if (!ret) throw new Error(\"method-type \" + options.type + \" not found\");\n        else return ret;\n    }\n    /**\n   * if no webworker support is needed,\n   * remove idb from the list so that localstorage is been chosen\n   */ if (!options.webWorkerSupport) {\n        chooseMethods = chooseMethods.filter((m)=>m.type !== \"idb\");\n    }\n    const useMethod = chooseMethods.find((method)=>method.canBeUsed(options));\n    if (!useMethod) throw new Error(`No useable method found in ${JSON.stringify(METHODS.map((m)=>m.type))}`);\n    else return useMethod;\n}\n/**\n * Contains all open channels,\n * used in tests to ensure everything is closed.\n */ const OPEN_BROADCAST_CHANNELS = new Set();\nlet lastId = 0;\nconst BroadcastChannel$1 = function(name, options) {\n    // identifier of the channel to debug stuff\n    this.id = lastId++;\n    OPEN_BROADCAST_CHANNELS.add(this);\n    this.name = name;\n    if (ENFORCED_OPTIONS) {\n        options = ENFORCED_OPTIONS;\n    }\n    this.options = fillOptionsWithDefaults(options);\n    this.method = chooseMethod(this.options);\n    // isListening\n    this._iL = false;\n    /**\n   * _onMessageListener\n   * setting onmessage twice,\n   * will overwrite the first listener\n   */ this._onML = null;\n    /**\n   * _addEventListeners\n   */ this._addEL = {\n        message: [],\n        internal: []\n    };\n    /**\n   * Unsend message promises\n   * where the sending is still in progress\n   * @type {Set<Promise>}\n   */ this._uMP = new Set();\n    /**\n   * _beforeClose\n   * array of promises that will be awaited\n   * before the channel is closed\n   */ this._befC = [];\n    /**\n   * _preparePromise\n   */ this._prepP = null;\n    _prepareChannel(this);\n};\n// STATICS\n/**\n * used to identify if someone overwrites\n * window.BroadcastChannel with this\n * See methods/native.js\n */ BroadcastChannel$1._pubkey = true;\n/**\n * if set, this method is enforced,\n * no mather what the options are\n */ let ENFORCED_OPTIONS;\nfunction enforceOptions(options) {\n    ENFORCED_OPTIONS = options;\n}\n// PROTOTYPE\nBroadcastChannel$1.prototype = {\n    postMessage (msg) {\n        if (this.closed) {\n            throw new Error(\"BroadcastChannel.postMessage(): \" + \"Cannot post message after channel has closed \" + /**\n       * In the past when this error appeared, it was realy hard to debug.\n       * So now we log the msg together with the error so it at least\n       * gives some clue about where in your application this happens.\n       */ JSON.stringify(msg));\n        }\n        return _post(this, \"message\", msg);\n    },\n    postInternal (msg) {\n        return _post(this, \"internal\", msg);\n    },\n    set onmessage (fn){\n        const time = this.method.microSeconds();\n        const listenObj = {\n            time,\n            fn\n        };\n        _removeListenerObject(this, \"message\", this._onML);\n        if (fn && typeof fn === \"function\") {\n            this._onML = listenObj;\n            _addListenerObject(this, \"message\", listenObj);\n        } else {\n            this._onML = null;\n        }\n    },\n    addEventListener (type, fn1) {\n        const time = this.method.microSeconds();\n        const listenObj = {\n            time,\n            fn: fn1\n        };\n        _addListenerObject(this, type, listenObj);\n    },\n    removeEventListener (type, fn1) {\n        const obj = this._addEL[type].find((obj)=>obj.fn === fn1);\n        _removeListenerObject(this, type, obj);\n    },\n    close () {\n        if (this.closed) {\n            return;\n        }\n        OPEN_BROADCAST_CHANNELS.delete(this);\n        this.closed = true;\n        const awaitPrepare = this._prepP ? this._prepP : PROMISE_RESOLVED_VOID;\n        this._onML = null;\n        this._addEL.message = [];\n        return awaitPrepare// wait until all current sending are processed\n        .then(()=>Promise.all(Array.from(this._uMP)))// run before-close hooks\n        .then(()=>Promise.all(this._befC.map((fn1)=>fn1())))// close the channel\n        .then(()=>this.method.close(this._state));\n    },\n    get type () {\n        return this.method.type;\n    },\n    get isClosed () {\n        return this.closed;\n    }\n};\n/**\n * Post a message over the channel\n * @returns {Promise} that resolved when the message sending is done\n */ function _post(broadcastChannel, type, msg) {\n    const time = broadcastChannel.method.microSeconds();\n    const msgObj = {\n        time,\n        type,\n        data: msg\n    };\n    const awaitPrepare = broadcastChannel._prepP ? broadcastChannel._prepP : PROMISE_RESOLVED_VOID;\n    return awaitPrepare.then(()=>{\n        const sendPromise = broadcastChannel.method.postMessage(broadcastChannel._state, msgObj);\n        // add/remove to unsend messages list\n        broadcastChannel._uMP.add(sendPromise);\n        sendPromise.catch().then(()=>broadcastChannel._uMP.delete(sendPromise));\n        return sendPromise;\n    });\n}\nfunction _prepareChannel(channel) {\n    const maybePromise = channel.method.create(channel.name, channel.options);\n    if (isPromise(maybePromise)) {\n        channel._prepP = maybePromise;\n        maybePromise.then((s)=>{\n            // used in tests to simulate slow runtime\n            /*if (channel.options.prepareDelay) {\n           await new Promise(res => setTimeout(res, this.options.prepareDelay));\n      }*/ channel._state = s;\n        });\n    } else {\n        channel._state = maybePromise;\n    }\n}\nfunction _hasMessageListeners(channel) {\n    if (channel._addEL.message.length > 0) return true;\n    if (channel._addEL.internal.length > 0) return true;\n    return false;\n}\nfunction _addListenerObject(channel, type, obj) {\n    channel._addEL[type].push(obj);\n    _startListening(channel);\n}\nfunction _removeListenerObject(channel, type, obj) {\n    channel._addEL[type] = channel._addEL[type].filter((o)=>o !== obj);\n    _stopListening(channel);\n}\nfunction _startListening(channel) {\n    if (!channel._iL && _hasMessageListeners(channel)) {\n        // someone is listening, start subscribing\n        const listenerFn = (msgObj)=>{\n            channel._addEL[msgObj.type].forEach((listenerObject)=>{\n                /**\n         * Getting the current time in JavaScript has no good precision.\n         * So instead of only listening to events that happend 'after' the listener\n         * was added, we also listen to events that happended 100ms before it.\n         * This ensures that when another process, like a WebWorker, sends events\n         * we do not miss them out because their timestamp is a bit off compared to the main process.\n         * Not doing this would make messages missing when we send data directly after subscribing and awaiting a response.\n         * @link https://johnresig.com/blog/accuracy-of-javascript-time/\n         */ // const hundredMsInMicro = 100 * 1000;\n                // const minMessageTime = listenerObject.time - hundredMsInMicro;\n                if (msgObj.time >= listenerObject.time) {\n                    listenerObject.fn(msgObj.data);\n                } else if (channel.method.type === \"server\") {\n                    // server msg might lag based on connection.\n                    listenerObject.fn(msgObj.data);\n                }\n            });\n        };\n        const time = channel.method.microSeconds();\n        if (channel._prepP) {\n            channel._prepP.then(()=>{\n                channel._iL = true;\n                channel.method.onMessage(channel._state, listenerFn, time);\n            });\n        } else {\n            channel._iL = true;\n            channel.method.onMessage(channel._state, listenerFn, time);\n        }\n    }\n}\nfunction _stopListening(channel) {\n    if (channel._iL && !_hasMessageListeners(channel)) {\n        // noone is listening, stop subscribing\n        channel._iL = false;\n        const time = channel.method.microSeconds();\n        channel.method.onMessage(channel._state, null, time);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/broadcastChannel.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/constants/dist/constants.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@toruslabs/constants/dist/constants.esm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FND_SERVER: () => (/* binding */ FND_SERVER),\n/* harmony export */   KEY_TYPE: () => (/* binding */ KEY_TYPE),\n/* harmony export */   LEGACY_NETWORKS_ROUTE_MAP: () => (/* binding */ LEGACY_NETWORKS_ROUTE_MAP),\n/* harmony export */   METADATA_MAP: () => (/* binding */ METADATA_MAP),\n/* harmony export */   MULTI_CLUSTER_NETWORKS: () => (/* binding */ MULTI_CLUSTER_NETWORKS),\n/* harmony export */   NETWORK_MAP: () => (/* binding */ NETWORK_MAP),\n/* harmony export */   PROXY_CONTRACT_ADDRESS: () => (/* binding */ PROXY_CONTRACT_ADDRESS),\n/* harmony export */   SESSION_SERVER: () => (/* binding */ SESSION_SERVER),\n/* harmony export */   SIGNER_MAP: () => (/* binding */ SIGNER_MAP),\n/* harmony export */   TORUS_LEGACY_NETWORK: () => (/* binding */ TORUS_LEGACY_NETWORK),\n/* harmony export */   TORUS_SAPPHIRE_NETWORK: () => (/* binding */ TORUS_SAPPHIRE_NETWORK),\n/* harmony export */   abi: () => (/* binding */ abi)\n/* harmony export */ });\nconst TORUS_LEGACY_NETWORK = {\n    MAINNET: \"mainnet\",\n    TESTNET: \"testnet\",\n    CYAN: \"cyan\",\n    AQUA: \"aqua\",\n    CELESTE: \"celeste\"\n};\nconst TORUS_SAPPHIRE_NETWORK = {\n    SAPPHIRE_DEVNET: \"sapphire_devnet\",\n    SAPPHIRE_MAINNET: \"sapphire_mainnet\"\n};\nconst PROXY_CONTRACT_ADDRESS = {\n    [TORUS_LEGACY_NETWORK.MAINNET]: \"0xf20336e16B5182637f09821c27BDe29b0AFcfe80\",\n    [TORUS_LEGACY_NETWORK.TESTNET]: \"0xd084604e5FA387FbC2Da8bAab07fDD6aDED4614A\",\n    [TORUS_LEGACY_NETWORK.CYAN]: \"0x9f072ba19b3370e512aa1b4bfcdaf97283168005\",\n    [TORUS_LEGACY_NETWORK.AQUA]: \"0x29Dea82a0509153b91040ee13cDBba0f03efb625\",\n    [TORUS_LEGACY_NETWORK.CELESTE]: \"0x6Bffb4e89453069E7487f0fa5c9f4a2D771cce6c\"\n};\nconst MULTI_CLUSTER_NETWORKS = [];\nconst LEGACY_NETWORKS_ROUTE_MAP = {\n    [TORUS_LEGACY_NETWORK.AQUA]: {\n        migrationCompleted: true,\n        networkIdentifier: \"aqua\",\n        networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n    },\n    [TORUS_LEGACY_NETWORK.CELESTE]: {\n        migrationCompleted: true,\n        networkIdentifier: \"celeste\",\n        networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n    },\n    [TORUS_LEGACY_NETWORK.CYAN]: {\n        migrationCompleted: true,\n        networkIdentifier: \"cyan\",\n        networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n    },\n    [TORUS_LEGACY_NETWORK.MAINNET]: {\n        migrationCompleted: true,\n        networkIdentifier: \"mainnet\",\n        networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n    },\n    [TORUS_LEGACY_NETWORK.TESTNET]: {\n        migrationCompleted: true,\n        networkIdentifier: \"teal\",\n        networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET\n    }\n};\nconst NETWORK_MAP = {\n    [TORUS_LEGACY_NETWORK.MAINNET]: \"mainnet\",\n    [TORUS_LEGACY_NETWORK.TESTNET]: \"goerli\",\n    [TORUS_LEGACY_NETWORK.CYAN]: \"polygon-mainnet\",\n    [TORUS_LEGACY_NETWORK.AQUA]: \"polygon-mainnet\",\n    [TORUS_LEGACY_NETWORK.CELESTE]: \"polygon-mainnet\"\n};\nconst SIGNER_MAP = {\n    [TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET]: \"https://signer.web3auth.io\",\n    [TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET]: \"https://signer.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.MAINNET]: \"https://signer.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.TESTNET]: \"https://signer.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.CYAN]: \"https://signer-polygon.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.AQUA]: \"https://signer-polygon.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.CELESTE]: \"https://signer-polygon.web3auth.io\"\n};\nconst METADATA_MAP = {\n    [TORUS_LEGACY_NETWORK.MAINNET]: \"https://metadata.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.TESTNET]: \"https://metadata.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.CYAN]: \"https://metadata.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.AQUA]: \"https://metadata.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.CELESTE]: \"https://metadata.web3auth.io\"\n};\nconst FND_SERVER = \"https://fnd.web3auth.io\";\nconst SESSION_SERVER = \"https://session.web3auth.io\";\nconst KEY_TYPE = {\n    SECP256K1: \"secp256k1\",\n    ED25519: \"ed25519\"\n};\nconst abi = [\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"_verifier\",\n                type: \"string\"\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"hashedVerifierId\",\n                type: \"bytes32\"\n            }\n        ],\n        name: \"getNodeSet\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"currentEpoch\",\n                type: \"uint256\"\n            },\n            {\n                internalType: \"string[]\",\n                name: \"torusNodeEndpoints\",\n                type: \"string[]\"\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"torusNodePubX\",\n                type: \"uint256[]\"\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"torusNodePubY\",\n                type: \"uint256[]\"\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"torusIndexes\",\n                type: \"uint256[]\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    }\n];\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/constants/dist/constants.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decrypt: () => (/* binding */ decrypt),\n/* harmony export */   derive: () => (/* binding */ derive),\n/* harmony export */   derivePadded: () => (/* binding */ derivePadded),\n/* harmony export */   deriveUnpadded: () => (/* binding */ deriveUnpadded),\n/* harmony export */   encrypt: () => (/* binding */ encrypt),\n/* harmony export */   generatePrivate: () => (/* binding */ generatePrivate),\n/* harmony export */   getPublic: () => (/* binding */ getPublic),\n/* harmony export */   getPublicCompressed: () => (/* binding */ getPublicCompressed),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(elliptic__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst ec = new elliptic__WEBPACK_IMPORTED_MODULE_1__.ec(\"secp256k1\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst browserCrypto = global.crypto || global.msCrypto || {};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;\nconst EC_GROUP_ORDER = Buffer.from(\"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\", \"hex\");\nconst ZERO32 = Buffer.alloc(32, 0);\nfunction assert(condition, message) {\n    if (!condition) {\n        throw new Error(message || \"Assertion failed\");\n    }\n}\nfunction isScalar(x) {\n    return Buffer.isBuffer(x) && x.length === 32;\n}\nfunction isValidPrivateKey(privateKey) {\n    if (!isScalar(privateKey)) {\n        return false;\n    }\n    return privateKey.compare(ZERO32) > 0 && // > 0\n    privateKey.compare(EC_GROUP_ORDER) < 0; // < G\n}\n// Compare two buffers in constant time to prevent timing attacks.\nfunction equalConstTime(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    let res = 0;\n    for(let i = 0; i < b1.length; i++){\n        res |= b1[i] ^ b2[i]; // jshint ignore:line\n    }\n    return res === 0;\n}\n/* This must check if we're in the browser or\nnot, since the functions are different and does\nnot convert using browserify */ function randomBytes(size) {\n    const arr = new Uint8Array(size);\n    if (typeof browserCrypto.getRandomValues === \"undefined\") {\n        return Buffer.from(crypto__WEBPACK_IMPORTED_MODULE_0___default().randomBytes(size));\n    }\n    browserCrypto.getRandomValues(arr);\n    return Buffer.from(arr);\n}\nasync function sha512(msg) {\n    if (subtle) {\n        const hash = await subtle.digest(\"SHA-512\", msg);\n        const result = new Uint8Array(hash);\n        return result;\n    }\n    const hash = crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"sha512\");\n    const result = hash.update(msg).digest();\n    return new Uint8Array(result);\n}\nfunction getAes(op) {\n    return async function(iv, key, data) {\n        if (subtle) {\n            const importAlgorithm = {\n                name: \"AES-CBC\"\n            };\n            const cryptoKey = await subtle.importKey(\"raw\", key, importAlgorithm, false, [\n                op\n            ]);\n            const encAlgorithm = {\n                name: \"AES-CBC\",\n                iv\n            };\n            const result = await subtle[op](encAlgorithm, cryptoKey, data);\n            return Buffer.from(new Uint8Array(result));\n        } else if (op === \"encrypt\") {\n            const cipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createCipheriv(\"aes-256-cbc\", key, iv);\n            const firstChunk = cipher.update(data);\n            const secondChunk = cipher.final();\n            return Buffer.concat([\n                firstChunk,\n                secondChunk\n            ]);\n        } else if (op === \"decrypt\") {\n            const decipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createDecipheriv(\"aes-256-cbc\", key, iv);\n            const firstChunk = decipher.update(data);\n            const secondChunk = decipher.final();\n            return Buffer.concat([\n                firstChunk,\n                secondChunk\n            ]);\n        }\n        throw new Error(`Unsupported operation: ${op}`);\n    };\n}\nconst aesCbcEncrypt = getAes(\"encrypt\");\nconst aesCbcDecrypt = getAes(\"decrypt\");\nasync function hmacSha256Sign(key, msg) {\n    if (subtle) {\n        const importAlgorithm = {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        };\n        const cryptoKey = await subtle.importKey(\"raw\", new Uint8Array(key), importAlgorithm, false, [\n            \"sign\",\n            \"verify\"\n        ]);\n        const sig = await subtle.sign(\"HMAC\", cryptoKey, msg);\n        const result = Buffer.from(new Uint8Array(sig));\n        return result;\n    }\n    const hmac = crypto__WEBPACK_IMPORTED_MODULE_0___default().createHmac(\"sha256\", Buffer.from(key));\n    hmac.update(msg);\n    const result = hmac.digest();\n    return result;\n}\nasync function hmacSha256Verify(key, msg, sig) {\n    const expectedSig = await hmacSha256Sign(key, msg);\n    return equalConstTime(expectedSig, sig);\n}\n/**\n * Generate a new valid private key. Will use the window.crypto or window.msCrypto as source\n * depending on your browser.\n */ const generatePrivate = function() {\n    let privateKey = randomBytes(32);\n    while(!isValidPrivateKey(privateKey)){\n        privateKey = randomBytes(32);\n    }\n    return privateKey;\n};\nconst getPublic = function(privateKey) {\n    // This function has sync API so we throw an error immediately.\n    assert(privateKey.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKey), \"Bad private key\");\n    // XXX(Kagami): `elliptic.utils.encode` returns array for every\n    // encoding except `hex`.\n    return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(\"array\"));\n};\n/**\n * Get compressed version of public key.\n */ const getPublicCompressed = function(privateKey) {\n    // jshint ignore:line\n    assert(privateKey.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKey), \"Bad private key\");\n    // See https://github.com/wanderer/secp256k1-node/issues/46\n    const compressed = true;\n    return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, \"array\"));\n};\n// NOTE(Kagami): We don't use promise shim in Browser implementation\n// because it's supported natively in new browsers (see\n// <http://caniuse.com/#feat=promises>) and we can use only new browsers\n// because of the WebCryptoAPI (see\n// <http://caniuse.com/#feat=cryptography>).\nconst sign = async function(privateKey, msg) {\n    assert(privateKey.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKey), \"Bad private key\");\n    assert(msg.length > 0, \"Message should not be empty\");\n    assert(msg.length <= 32, \"Message is too long\");\n    return Buffer.from(ec.sign(msg, privateKey, {\n        canonical: true\n    }).toDER());\n};\nconst verify = async function(publicKey, msg, sig) {\n    assert(publicKey.length === 65 || publicKey.length === 33, \"Bad public key\");\n    if (publicKey.length === 65) {\n        assert(publicKey[0] === 4, \"Bad public key\");\n    }\n    if (publicKey.length === 33) {\n        assert(publicKey[0] === 2 || publicKey[0] === 3, \"Bad public key\");\n    }\n    assert(msg.length > 0, \"Message should not be empty\");\n    assert(msg.length <= 32, \"Message is too long\");\n    if (ec.verify(msg, sig, publicKey)) {\n        return null;\n    }\n    throw new Error(\"Bad signature\");\n};\nconst derive = async function(privateKeyA, publicKeyB) {\n    assert(Buffer.isBuffer(privateKeyA), \"Bad private key\");\n    assert(Buffer.isBuffer(publicKeyB), \"Bad public key\");\n    assert(privateKeyA.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKeyA), \"Bad private key\");\n    assert(publicKeyB.length === 65 || publicKeyB.length === 33, \"Bad public key\");\n    if (publicKeyB.length === 65) {\n        assert(publicKeyB[0] === 4, \"Bad public key\");\n    }\n    if (publicKeyB.length === 33) {\n        assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, \"Bad public key\");\n    }\n    const keyA = ec.keyFromPrivate(privateKeyA);\n    const keyB = ec.keyFromPublic(publicKeyB);\n    const Px = keyA.derive(keyB.getPublic()); // BN instance\n    return Buffer.from(Px.toArray());\n};\nconst deriveUnpadded = derive;\nconst derivePadded = async function(privateKeyA, publicKeyB) {\n    assert(Buffer.isBuffer(privateKeyA), \"Bad private key\");\n    assert(Buffer.isBuffer(publicKeyB), \"Bad public key\");\n    assert(privateKeyA.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKeyA), \"Bad private key\");\n    assert(publicKeyB.length === 65 || publicKeyB.length === 33, \"Bad public key\");\n    if (publicKeyB.length === 65) {\n        assert(publicKeyB[0] === 4, \"Bad public key\");\n    }\n    if (publicKeyB.length === 33) {\n        assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, \"Bad public key\");\n    }\n    const keyA = ec.keyFromPrivate(privateKeyA);\n    const keyB = ec.keyFromPublic(publicKeyB);\n    const Px = keyA.derive(keyB.getPublic()); // BN instance\n    return Buffer.from(Px.toString(16, 64), \"hex\");\n};\nconst encrypt = async function(publicKeyTo, msg, opts) {\n    opts = opts || {};\n    let ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);\n    // There is a very unlikely possibility that it is not a valid key\n    while(!isValidPrivateKey(ephemPrivateKey)){\n        ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);\n    }\n    const ephemPublicKey = getPublic(ephemPrivateKey);\n    const Px = await deriveUnpadded(ephemPrivateKey, publicKeyTo);\n    const hash = await sha512(Px);\n    const iv = opts.iv || randomBytes(16);\n    const encryptionKey = hash.slice(0, 32);\n    const macKey = hash.slice(32);\n    const data = await aesCbcEncrypt(iv, Buffer.from(encryptionKey), msg);\n    const ciphertext = data;\n    const dataToMac = Buffer.concat([\n        iv,\n        ephemPublicKey,\n        ciphertext\n    ]);\n    const mac = await hmacSha256Sign(Buffer.from(macKey), dataToMac);\n    return {\n        iv,\n        ephemPublicKey,\n        ciphertext,\n        mac\n    };\n};\nconst decrypt = async function(privateKey, opts, _padding) {\n    const padding = _padding !== null && _padding !== void 0 ? _padding : false;\n    const deriveLocal = padding ? derivePadded : deriveUnpadded;\n    const Px = await deriveLocal(privateKey, opts.ephemPublicKey);\n    const hash = await sha512(Px);\n    const encryptionKey = hash.slice(0, 32);\n    const macKey = hash.slice(32);\n    const dataToMac = Buffer.concat([\n        opts.iv,\n        opts.ephemPublicKey,\n        opts.ciphertext\n    ]);\n    const macGood = await hmacSha256Verify(Buffer.from(macKey), dataToMac, opts.mac);\n    if (!macGood && padding === false) {\n        return decrypt(privateKey, opts, true);\n    } else if (!macGood && padding === true) {\n        throw new Error(\"bad MAC after trying padded\");\n    }\n    const msg = await aesCbcDecrypt(opts.iv, Buffer.from(encryptionKey), opts.ciphertext);\n    return Buffer.from(new Uint8Array(msg));\n};\n //# sourceMappingURL=eccrypto.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearAPIKey: () => (/* binding */ clearAPIKey),\n/* harmony export */   clearEmbedHost: () => (/* binding */ clearEmbedHost),\n/* harmony export */   enableSentryTracing: () => (/* binding */ enableSentryTracing),\n/* harmony export */   gatewayAuthHeader: () => (/* binding */ gatewayAuthHeader),\n/* harmony export */   gatewayEmbedHostHeader: () => (/* binding */ gatewayEmbedHostHeader),\n/* harmony export */   generateJsonRPCObject: () => (/* binding */ generateJsonRPCObject),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getAPIKey: () => (/* binding */ getAPIKey),\n/* harmony export */   getEmbedHost: () => (/* binding */ getEmbedHost),\n/* harmony export */   patch: () => (/* binding */ patch),\n/* harmony export */   post: () => (/* binding */ post),\n/* harmony export */   promiseRace: () => (/* binding */ promiseRace),\n/* harmony export */   promiseTimeout: () => (/* binding */ promiseTimeout),\n/* harmony export */   put: () => (/* binding */ put),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   setAPIKey: () => (/* binding */ setAPIKey),\n/* harmony export */   setEmbedHost: () => (/* binding */ setEmbedHost),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash.merge */ \"(ssr)/./node_modules/lodash.merge/index.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst log = loglevel__WEBPACK_IMPORTED_MODULE_2___default().getLogger(\"http-helpers\");\nlog.setLevel(loglevel__WEBPACK_IMPORTED_MODULE_2__.levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\";\n// #region API Keys\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n    sentry = _sentry;\n    tracingOrigins.push(..._tracingOrigins);\n    tracingPaths.push(..._tracingPaths);\n}\nfunction setEmbedHost(embedHost_) {\n    embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n    embedHost = \"\";\n}\nfunction getEmbedHost() {\n    return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n    apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n    apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n    return apiKey;\n}\n// #endregion\nfunction setLogLevel(level) {\n    log.setLevel(level);\n}\nasync function fetchAndTrace(url, init) {\n    let _url = null;\n    try {\n        _url = new URL(url);\n    } catch (error) {}\n    if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n        const transaction = sentry.startTransaction({\n            name: url\n        });\n        const span = transaction.startChild({\n            op: \"http\"\n        }); // This function returns a Span\n        const response = await fetch(url, init);\n        span.finish(); // Remember that only finished spans will be sent with the transaction\n        transaction.finish(); // Finishing the transaction will send it to Sentry\n        return response;\n    }\n    return fetch(url, init);\n}\nfunction getApiKeyHeaders() {\n    const headers = {};\n    if (apiKey) headers[gatewayAuthHeader] = apiKey;\n    if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n    return headers;\n}\nfunction debugLogResponse(response) {\n    log.info(`Response: ${response.status} ${response.statusText}`);\n    log.info(`Url: ${response.url}`);\n}\nfunction logTracingHeader(response) {\n    const tracingHeader = response.headers.get(\"x-web3-correlation-id\");\n    if (tracingHeader) log.info(`Request tracing with traceID = ${tracingHeader}`);\n}\nconst promiseTimeout = async (ms, promise)=>{\n    let timeoutFunc = null;\n    try {\n        const timeout = new Promise((_resolve, reject)=>{\n            timeoutFunc = setTimeout(()=>{\n                reject(new Error(`Timed out in ${ms}ms`));\n            }, ms);\n        });\n        const result = await Promise.race([\n            promise,\n            timeout\n        ]);\n        // promise.race will return the first resolved promise\n        // then we clear the timeout\n        if (timeoutFunc != null) {\n            clearTimeout(timeoutFunc);\n        }\n        return result;\n    } catch (err) {\n        // clear the timeout\n        if (timeoutFunc != null) {\n            clearTimeout(timeoutFunc);\n        }\n        // rethrow the original error\n        throw err;\n    }\n};\nconst get = async function(url) {\n    let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const defaultOptions = {\n        mode: \"cors\",\n        headers: {}\n    };\n    if (customOptions.useAPIKey) {\n        defaultOptions.headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n    const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n        method: \"GET\"\n    });\n    const response = await fetchAndTrace(url, options);\n    if (response.ok) {\n        const responseContentType = response.headers.get(\"content-type\");\n        if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n            return response.json();\n        }\n        return response.text();\n    }\n    debugLogResponse(response);\n    throw response;\n};\nconst post = function(url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const defaultOptions = {\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n    };\n    if (customOptions.useAPIKey) {\n        defaultOptions.headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n    const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n        method: \"POST\"\n    });\n    // deep merge changes the structure of form data and url encoded data ,\n    // so we should not deepmerge body data\n    if (customOptions.isUrlEncodedData) {\n        // for multipart request browser/client will add multipart content type\n        // along with multipart boundary , so for multipart request send\n        // content-type: undefined or send with multipart boundary if already known\n        options.body = data;\n        // If url encoded data, this must not be the content type\n        if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n    } else {\n        options.body = JSON.stringify(data);\n    }\n    return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then((response)=>{\n        if (customOptions.logTracingHeader) {\n            logTracingHeader(response);\n        }\n        if (response.ok) {\n            const responseContentType = response.headers.get(\"content-type\");\n            if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n                return response.json();\n            }\n            return response.text();\n        }\n        debugLogResponse(response);\n        throw response;\n    }));\n};\nconst patch = async function(url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const defaultOptions = {\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n    };\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    if (customOptions.useAPIKey) {\n        defaultOptions.headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n    const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n        method: \"PATCH\"\n    });\n    // deep merge changes the structure of form data and url encoded data ,\n    // so we should not deepmerge body data\n    if (customOptions.isUrlEncodedData) {\n        // for multipart request browser/client will add multipart content type\n        // along with multipart boundary , so for multipart request send\n        // content-type: undefined or send with multipart boundary if already known\n        options.body = data;\n        // If url encoded data, this must not be the content type\n        if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n    } else {\n        options.body = JSON.stringify(data);\n    }\n    const response = await fetchAndTrace(url, options);\n    if (response.ok) {\n        const responseContentType = response.headers.get(\"content-type\");\n        if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n            return response.json();\n        }\n        return response.text();\n    }\n    debugLogResponse(response);\n    throw response;\n};\nconst put = async function(url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const defaultOptions = {\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n    };\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    if (customOptions.useAPIKey) {\n        defaultOptions.headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n    const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n        method: \"PUT\"\n    });\n    // deep merge changes the structure of form data and url encoded data ,\n    // so we should not deepmerge body data\n    if (customOptions.isUrlEncodedData) {\n        // for multipart request browser/client will add multipart content type\n        // along with multipart boundary , so for multipart request send\n        // content-type: undefined or send with multipart boundary if already known\n        options.body = data;\n        // If url encoded data, this must not be the content type\n        if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n    } else {\n        options.body = JSON.stringify(data);\n    }\n    const response = await fetchAndTrace(url, options);\n    if (response.ok) {\n        const responseContentType = response.headers.get(\"content-type\");\n        if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n            return response.json();\n        }\n        return response.text();\n    }\n    debugLogResponse(response);\n    throw response;\n};\nconst remove = async function(url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const defaultOptions = {\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n    };\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    if (customOptions.useAPIKey) {\n        defaultOptions.headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n    const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n        method: \"DELETE\"\n    });\n    if (customOptions.isUrlEncodedData) {\n        // for multipart request browser/client will add multipart content type\n        // along with multipart boundary , so for multipart request send\n        // content-type: undefined or send with multipart boundary if already known\n        options.body = data;\n        // If url encoded data, this must not be the content type\n        if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n    } else {\n        options.body = JSON.stringify(data);\n    }\n    const response = await fetchAndTrace(url, options);\n    if (response.ok) {\n        const responseContentType = response.headers.get(\"content-type\");\n        if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n            return response.json();\n        }\n        return response.text();\n    }\n    debugLogResponse(response);\n    throw response;\n};\nconst generateJsonRPCObject = (method, parameters)=>({\n        jsonrpc: \"2.0\",\n        method,\n        id: 10,\n        params: parameters\n    });\nconst promiseRace = function(url, options) {\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n    return Promise.race([\n        get(url, options),\n        new Promise((_resolve, reject)=>{\n            setTimeout(()=>{\n                reject(new Error(\"timed out\"));\n            }, timeout);\n        })\n    ]);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decryptData: () => (/* binding */ decryptData),\n/* harmony export */   \"default\": () => (/* binding */ MetadataStorageLayer),\n/* harmony export */   ec: () => (/* binding */ ec),\n/* harmony export */   encParamsBufToHex: () => (/* binding */ encParamsBufToHex),\n/* harmony export */   encParamsHexToBuf: () => (/* binding */ encParamsHexToBuf),\n/* harmony export */   encryptAndSetData: () => (/* binding */ encryptAndSetData),\n/* harmony export */   encryptData: () => (/* binding */ encryptData),\n/* harmony export */   getAndDecryptData: () => (/* binding */ getAndDecryptData),\n/* harmony export */   getDeviceShare: () => (/* binding */ getDeviceShare),\n/* harmony export */   getTorusShare: () => (/* binding */ getTorusShare),\n/* harmony export */   keccak256: () => (/* binding */ keccak256),\n/* harmony export */   setDeviceShare: () => (/* binding */ setDeviceShare),\n/* harmony export */   setTorusShare: () => (/* binding */ setTorusShare)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var json_stable_stringify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! json-stable-stringify */ \"(ssr)/./node_modules/json-stable-stringify/index.js\");\n/* harmony import */ var json_stable_stringify__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(json_stable_stringify__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(elliptic__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var ethereum_cryptography_keccak__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethereum-cryptography/keccak */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var _toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @toruslabs/eccrypto */ \"(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js\");\n\n\n\n\n\n\n\nfunction keccak256(a) {\n    return Buffer.from((0,ethereum_cryptography_keccak__WEBPACK_IMPORTED_MODULE_5__.keccak256)(a));\n}\nconst ec = new elliptic__WEBPACK_IMPORTED_MODULE_4__.ec(\"secp256k1\");\nclass MetadataStorageLayer {\n    // ms\n    constructor(){\n        let metadataHost = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"https://metadata.tor.us\";\n        let serverTimeOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"metadataHost\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"serverTimeOffset\", void 0);\n        this.metadataHost = metadataHost;\n        this.serverTimeOffset = serverTimeOffset;\n    }\n    static setAPIKey(apiKey) {\n        (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__.setAPIKey)(apiKey);\n    }\n    static setEmbedHost(embedHost) {\n        (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__.setEmbedHost)(embedHost);\n    }\n    generateMetadataParams(message, privateKeyHex) {\n        var _sig$recoveryParam$to, _sig$recoveryParam;\n        const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n        const setData = {\n            data: message,\n            timestamp: Math.floor(this.serverTimeOffset + Date.now() / 1000).toString(16)\n        };\n        const sig = key.sign(keccak256(Buffer.from(json_stable_stringify__WEBPACK_IMPORTED_MODULE_3___default()(setData), \"utf8\")));\n        return {\n            pub_key_X: key.getPublic().getX().toString(16, 64),\n            pub_key_Y: key.getPublic().getY().toString(16, 64),\n            set_data: setData,\n            signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + ((_sig$recoveryParam$to = (_sig$recoveryParam = sig.recoveryParam) === null || _sig$recoveryParam === void 0 ? void 0 : _sig$recoveryParam.toString(16).padStart(2, \"0\").slice(-2)) !== null && _sig$recoveryParam$to !== void 0 ? _sig$recoveryParam$to : \"00\"), \"hex\").toString(\"base64\")\n        };\n    }\n    generatePubKeyParams(privateKeyHex) {\n        const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n        return {\n            pub_key_X: key.getPublic().getX().toString(16, 64),\n            pub_key_Y: key.getPublic().getY().toString(16, 64)\n        };\n    }\n    async setMetadata(data, namespace, options) {\n        const params = namespace !== null ? _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, data), {}, {\n            namespace\n        }) : data;\n        const metadataResponse = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__.post)(`${this.metadataHost}/set`, params, options, {\n            useAPIKey: true\n        });\n        return metadataResponse.message;\n    }\n    async getMetadata(pubKey, namespace, options) {\n        const params = namespace !== null ? _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, pubKey), {}, {\n            namespace\n        }) : pubKey;\n        const metadataResponse = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__.post)(`${this.metadataHost}/get`, params, options, {\n            useAPIKey: true\n        });\n        return metadataResponse.message;\n    }\n}\nconst WEBAUTHN_TORUS_SHARE = \"webauthn_torus_share\";\nconst WEBAUTHN_DEVICE_SHARE = \"webauthn_device_share\";\nfunction encParamsHexToBuf(encParamsHex) {\n    return {\n        iv: Buffer.from(encParamsHex.iv, \"hex\"),\n        ephemPublicKey: Buffer.from(encParamsHex.ephemPublicKey, \"hex\"),\n        ciphertext: Buffer.from(encParamsHex.ciphertext, \"hex\"),\n        mac: Buffer.from(encParamsHex.mac, \"hex\")\n    };\n}\nfunction encParamsBufToHex(encParams) {\n    return {\n        iv: Buffer.from(encParams.iv).toString(\"hex\"),\n        ephemPublicKey: Buffer.from(encParams.ephemPublicKey).toString(\"hex\"),\n        ciphertext: Buffer.from(encParams.ciphertext).toString(\"hex\"),\n        mac: Buffer.from(encParams.mac).toString(\"hex\")\n    };\n}\nasync function encryptData(privKeyHex, d) {\n    const serializedDec = JSON.stringify(d);\n    const serializedBuf = Buffer.from(serializedDec, \"utf-8\");\n    const encParams = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__.encrypt)((0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__.getPublic)(Buffer.from(privKeyHex, \"hex\")), serializedBuf);\n    const encParamsHex = encParamsBufToHex(encParams);\n    const sData = JSON.stringify(encParamsHex);\n    return sData;\n}\nasync function decryptData(privKeyHex, d) {\n    const encParamsHex = JSON.parse(d);\n    const encParams = encParamsHexToBuf(encParamsHex);\n    const keyPair = ec.keyFromPrivate(privKeyHex);\n    const serializedBuf = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__.decrypt)(Buffer.from(keyPair.getPrivate().toString(\"hex\", 64), \"hex\"), encParams);\n    const serializedDec = serializedBuf.toString(\"utf-8\");\n    const data = JSON.parse(serializedDec);\n    return data;\n}\nasync function getAndDecryptData(m, privKeyHex, namespace) {\n    const keyPair = ec.keyFromPrivate(privKeyHex, \"hex\");\n    const pubKey = keyPair.getPublic();\n    const serializedData = await m.getMetadata({\n        pub_key_X: pubKey.getX().toString(16, 64),\n        pub_key_Y: pubKey.getY().toString(16, 64)\n    }, namespace);\n    if (!serializedData) {\n        return null;\n    }\n    const data = await decryptData(privKeyHex, serializedData);\n    return data;\n}\nasync function encryptAndSetData(m, privKeyHex, d, namespace) {\n    const sData = await encryptData(privKeyHex, d);\n    const metadataParams = m.generateMetadataParams(sData, privKeyHex);\n    await m.setMetadata(metadataParams, namespace);\n}\nasync function setTorusShare(m, webAuthnPubKey, webAuthnRefHex, subspace, subspaceData) {\n    const refKeyPair = ec.keyFromPrivate(webAuthnRefHex);\n    const privKey = refKeyPair.getPrivate();\n    const pubKey = ec.keyFromPublic({\n        x: webAuthnPubKey.pub_key_X,\n        y: webAuthnPubKey.pub_key_Y\n    });\n    const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n    let d = {};\n    if (data) d = data;\n    const serializedSubspaceData = JSON.stringify(subspaceData);\n    const serializedSubspaceDataBuf = Buffer.from(serializedSubspaceData, \"utf-8\");\n    const encSubspaceData = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__.encrypt)(Buffer.from(pubKey.getPublic(\"hex\"), \"hex\"), serializedSubspaceDataBuf);\n    const encSubspaceDataHex = encParamsBufToHex(encSubspaceData);\n    d[subspace] = encSubspaceDataHex;\n    await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_TORUS_SHARE);\n}\nasync function setDeviceShare(m, webAuthnRefHex, subspace, subspaceData) {\n    const keyPair = ec.keyFromPrivate(webAuthnRefHex);\n    const privKey = keyPair.getPrivate();\n    const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n    let d = {};\n    if (data) d = data;\n    d[subspace] = subspaceData;\n    await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_DEVICE_SHARE);\n}\nasync function getTorusShare(m, webAuthnKeyHex, webAuthnRefHex, subspace) {\n    const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n    if (!data) return null;\n    const encParamsHex = data[subspace];\n    if (!encParamsHex) return null;\n    const encParams = encParamsHexToBuf(encParamsHex);\n    const keyPair = ec.keyFromPrivate(webAuthnKeyHex);\n    const privKey = keyPair.getPrivate();\n    const serializedSubspaceDataBuf = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__.decrypt)(Buffer.from(privKey.toString(\"hex\", 64), \"hex\"), encParams);\n    const serializedSubspaceData = serializedSubspaceDataBuf.toString(\"utf-8\");\n    const subspaceData = JSON.parse(serializedSubspaceData);\n    return subspaceData;\n}\nasync function getDeviceShare(m, webAuthnRefHex, subspace) {\n    const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n    if (data) return data[subspace];\n    return null;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePostMessageStream: () => (/* binding */ BasePostMessageStream),\n/* harmony export */   EthereumProviderError: () => (/* binding */ EthereumProviderError),\n/* harmony export */   IGNORE_SUBSTREAM: () => (/* binding */ IGNORE_SUBSTREAM),\n/* harmony export */   JRPCEngine: () => (/* binding */ JRPCEngine),\n/* harmony export */   JSON_RPC_SERVER_ERROR_MESSAGE: () => (/* binding */ JSON_RPC_SERVER_ERROR_MESSAGE),\n/* harmony export */   JsonRpcError: () => (/* binding */ JsonRpcError),\n/* harmony export */   ObjectMultiplex: () => (/* binding */ ObjectMultiplex),\n/* harmony export */   PostMessageStream: () => (/* binding */ PostMessageStream),\n/* harmony export */   SafeEventEmitter: () => (/* binding */ SafeEventEmitter),\n/* harmony export */   SerializableError: () => (/* binding */ SerializableError),\n/* harmony export */   Substream: () => (/* binding */ Substream),\n/* harmony export */   createAsyncMiddleware: () => (/* binding */ createAsyncMiddleware),\n/* harmony export */   createEngineStream: () => (/* binding */ createEngineStream),\n/* harmony export */   createErrorMiddleware: () => (/* binding */ createErrorMiddleware),\n/* harmony export */   createIdRemapMiddleware: () => (/* binding */ createIdRemapMiddleware),\n/* harmony export */   createLoggerMiddleware: () => (/* binding */ createLoggerMiddleware),\n/* harmony export */   createScaffoldMiddleware: () => (/* binding */ createScaffoldMiddleware),\n/* harmony export */   createStreamMiddleware: () => (/* binding */ createStreamMiddleware),\n/* harmony export */   dataHasCause: () => (/* binding */ dataHasCause),\n/* harmony export */   errorCodes: () => (/* binding */ errorCodes),\n/* harmony export */   errorValues: () => (/* binding */ errorValues),\n/* harmony export */   getMessageFromCode: () => (/* binding */ getMessageFromCode),\n/* harmony export */   getRpcPromiseCallback: () => (/* binding */ getRpcPromiseCallback),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isValidCode: () => (/* binding */ isValidCode),\n/* harmony export */   isValidString: () => (/* binding */ isValidString),\n/* harmony export */   mergeMiddleware: () => (/* binding */ mergeMiddleware),\n/* harmony export */   providerAsMiddleware: () => (/* binding */ providerAsMiddleware),\n/* harmony export */   providerErrors: () => (/* binding */ providerErrors),\n/* harmony export */   providerFromEngine: () => (/* binding */ providerFromEngine),\n/* harmony export */   providerFromMiddleware: () => (/* binding */ providerFromMiddleware),\n/* harmony export */   rpcErrors: () => (/* binding */ rpcErrors),\n/* harmony export */   serializeCause: () => (/* binding */ serializeCause),\n/* harmony export */   serializeError: () => (/* binding */ serializeError),\n/* harmony export */   setupMultiplex: () => (/* binding */ setupMultiplex)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/lib/ours/index.js\");\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(readable_stream__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fast-safe-stringify */ \"(ssr)/./node_modules/fast-safe-stringify/index.js\");\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fast_safe_stringify__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! end-of-stream */ \"(ssr)/./node_modules/end-of-stream/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(end_of_stream__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! once */ \"(ssr)/./node_modules/once/once.js\");\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(once__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! pump */ \"(ssr)/./node_modules/pump/index.js\");\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(pump__WEBPACK_IMPORTED_MODULE_7__);\n\n\n\n\n\n\n\n\nfunction noop() {\n    return undefined;\n}\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(_ref){\n        let { name, target, targetWindow = window, targetOrigin = \"*\" } = _ref;\n        super({\n            objectMode: true\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_init\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_haveSyn\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_name\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_target\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_targetWindow\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_targetOrigin\", void 0);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_onMessage\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_synIntervalId\", void 0);\n        if (!name || !target) {\n            throw new Error(\"Invalid input.\");\n        }\n        this._init = false;\n        this._haveSyn = false;\n        this._name = name;\n        this._target = target; // target origin\n        this._targetWindow = targetWindow;\n        this._targetOrigin = targetOrigin;\n        this._onMessage = this.onMessage.bind(this);\n        this._synIntervalId = null;\n        window.addEventListener(\"message\", this._onMessage, false);\n        this._handShake();\n    }\n    _break() {\n        this.cork();\n        this._write(BRK, null, noop);\n        this._haveSyn = false;\n        this._init = false;\n    }\n    _handShake() {\n        this._write(SYN, null, noop);\n        this.cork();\n    }\n    _onData(data) {\n        if (!this._init) {\n            // listen for handshake\n            if (data === SYN) {\n                this._haveSyn = true;\n                this._write(ACK, null, noop);\n            } else if (data === ACK) {\n                this._init = true;\n                if (!this._haveSyn) {\n                    this._write(ACK, null, noop);\n                }\n                this.uncork();\n            }\n        } else if (data === BRK) {\n            this._break();\n        } else {\n            // forward message\n            try {\n                this.push(data);\n            } catch (err) {\n                this.emit(\"error\", err);\n            }\n        }\n    }\n    _postMessage(data) {\n        const originConstraint = this._targetOrigin;\n        this._targetWindow.postMessage({\n            target: this._target,\n            data\n        }, originConstraint);\n    }\n    onMessage(event) {\n        const message = event.data;\n        // validate message\n        if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n            return;\n        }\n        this._onData(message.data);\n    }\n    _read() {\n        return undefined;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _write(data, _, cb) {\n        this._postMessage(data);\n        cb();\n    }\n    _destroy() {\n        window.removeEventListener(\"message\", this._onMessage, false);\n    }\n}\nconst errorCodes = {\n    rpc: {\n        invalidInput: -32000,\n        resourceNotFound: -32001,\n        resourceUnavailable: -32002,\n        transactionRejected: -32003,\n        methodNotSupported: -32004,\n        limitExceeded: -32005,\n        parse: -32700,\n        invalidRequest: -32600,\n        methodNotFound: -32601,\n        invalidParams: -32602,\n        internal: -32603\n    },\n    provider: {\n        userRejectedRequest: 4001,\n        unauthorized: 4100,\n        unsupportedMethod: 4200,\n        disconnected: 4900,\n        chainDisconnected: 4901\n    }\n};\nconst errorValues = {\n    \"-32700\": {\n        standard: \"JSON RPC 2.0\",\n        message: \"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.\"\n    },\n    \"-32600\": {\n        standard: \"JSON RPC 2.0\",\n        message: \"The JSON sent is not a valid Request object.\"\n    },\n    \"-32601\": {\n        standard: \"JSON RPC 2.0\",\n        message: \"The method does not exist / is not available.\"\n    },\n    \"-32602\": {\n        standard: \"JSON RPC 2.0\",\n        message: \"Invalid method parameter(s).\"\n    },\n    \"-32603\": {\n        standard: \"JSON RPC 2.0\",\n        message: \"Internal JSON-RPC error.\"\n    },\n    \"-32000\": {\n        standard: \"EIP-1474\",\n        message: \"Invalid input.\"\n    },\n    \"-32001\": {\n        standard: \"EIP-1474\",\n        message: \"Resource not found.\"\n    },\n    \"-32002\": {\n        standard: \"EIP-1474\",\n        message: \"Resource unavailable.\"\n    },\n    \"-32003\": {\n        standard: \"EIP-1474\",\n        message: \"Transaction rejected.\"\n    },\n    \"-32004\": {\n        standard: \"EIP-1474\",\n        message: \"Method not supported.\"\n    },\n    \"-32005\": {\n        standard: \"EIP-1474\",\n        message: \"Request limit exceeded.\"\n    },\n    \"4001\": {\n        standard: \"EIP-1193\",\n        message: \"User rejected the request.\"\n    },\n    \"4100\": {\n        standard: \"EIP-1193\",\n        message: \"The requested account and/or method has not been authorized by the user.\"\n    },\n    \"4200\": {\n        standard: \"EIP-1193\",\n        message: \"The requested method is not supported by this Ethereum provider.\"\n    },\n    \"4900\": {\n        standard: \"EIP-1193\",\n        message: \"The provider is disconnected from all chains.\"\n    },\n    \"4901\": {\n        standard: \"EIP-1193\",\n        message: \"The provider is disconnected from the specified chain.\"\n    }\n};\nconst FALLBACK_ERROR_CODE = errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE = \"Unspecified error message. This is a bug, please report it.\";\nconst JSON_RPC_SERVER_ERROR_MESSAGE = \"Unspecified server error.\";\n/**\n * Returns whether the given code is valid.\n * A code is valid if it is an integer.\n *\n * @param code - The error code.\n * @returns Whether the given code is valid.\n */ function isValidCode(code) {\n    return Number.isInteger(code);\n}\nfunction isValidString(value) {\n    return typeof value === \"string\" && value.length > 0;\n}\n/**\n * A type guard for {@link RuntimeObject}.\n *\n * @param value - The value to check.\n * @returns Whether the specified value has a runtime type of `object` and is\n * neither `null` nor an `Array`.\n */ function isObject(value) {\n    return Boolean(value) && typeof value === \"object\" && !Array.isArray(value);\n}\n/**\n * Check if the value is plain object.\n *\n * @param value - Value to be checked.\n * @returns True if an object is the plain JavaScript object,\n * false if the object is not plain (e.g. function).\n */ function isPlainObject(value) {\n    if (typeof value !== \"object\" || value === null) {\n        return false;\n    }\n    try {\n        let proto = value;\n        while(Object.getPrototypeOf(proto) !== null){\n            proto = Object.getPrototypeOf(proto);\n        }\n        return Object.getPrototypeOf(value) === proto;\n    } catch (_) {\n        return false;\n    }\n}\n/**\n * Check if the given code is a valid JSON-RPC server error code.\n *\n * @param code - The error code.\n * @returns Whether the given code is a valid JSON-RPC server error code.\n */ function isJsonRpcServerError(code) {\n    return code >= -32099 && code <= -32000;\n}\nfunction isJsonRpcError(value) {\n    const castValue = value;\n    if (!castValue) return false;\n    if (!isValidCode(castValue.code) || !isValidString(castValue.message)) return false;\n    if (castValue.stack && !isValidString(castValue.stack)) return false;\n    return true;\n}\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n *\n * @param code - The error code.\n * @param fallbackMessage - The fallback message to use if the code has no\n * corresponding message.\n * @returns The message for the given code, or the fallback message if the code\n * has no corresponding message.\n */ function getMessageFromCode(code) {\n    let fallbackMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FALLBACK_MESSAGE;\n    if (isValidCode(code)) {\n        const codeString = code.toString();\n        if (Object.hasOwn(errorValues, codeString)) {\n            return errorValues[codeString].message;\n        }\n        if (isJsonRpcServerError(code)) {\n            return JSON_RPC_SERVER_ERROR_MESSAGE;\n        }\n    }\n    return fallbackMessage;\n}\nconst FALLBACK_ERROR = {\n    code: FALLBACK_ERROR_CODE,\n    message: getMessageFromCode(FALLBACK_ERROR_CODE)\n};\nfunction isValidJson(str) {\n    try {\n        JSON.parse(JSON.stringify(str, (strKey, strVal)=>{\n            if (strKey === \"__proto__\" || strKey === \"constructor\") {\n                throw new Error(\"Not valid json\");\n            }\n            if (typeof strVal === \"function\" || typeof strVal === \"symbol\") {\n                throw new Error(\"Not valid json\");\n            }\n            return strVal;\n        }), (propKey, propValue)=>{\n            // Strip __proto__ and constructor properties to prevent prototype pollution.\n            if (propKey === \"__proto__\" || propKey === \"constructor\") {\n                return undefined;\n            }\n            return propValue;\n        });\n    // this means, it's a valid json so far\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n/**\n * Extracts all JSON-serializable properties from an object.\n *\n * @param object - The object in question.\n * @returns An object containing all the JSON-serializable properties.\n */ function serializeObject(object) {\n    return Object.getOwnPropertyNames(object).reduce((acc, key)=>{\n        const value = object[key];\n        if (isValidJson(value)) {\n            acc[key] = value;\n        }\n        return acc;\n    }, {});\n}\n/**\n * Serializes an unknown error to be used as the `cause` in a fallback error.\n *\n * @param error - The unknown error.\n * @returns A JSON-serializable object containing as much information about the original error as possible.\n */ function serializeCause(error) {\n    if (Array.isArray(error)) {\n        return error.map((entry)=>{\n            if (isValidJson(entry)) {\n                return entry;\n            } else if (isObject(entry)) {\n                return serializeObject(entry);\n            }\n            return null;\n        });\n    } else if (isObject(error)) {\n        return serializeObject(error);\n    }\n    if (isValidJson(error)) {\n        return error;\n    }\n    return null;\n}\n/**\n * Construct a JSON-serializable object given an error and a JSON serializable `fallbackError`\n *\n * @param error - The error in question.\n * @param fallbackError - A JSON serializable fallback error.\n * @returns A JSON serializable error object.\n */ function buildError(error, fallbackError) {\n    // If an error specifies a `serialize` function, we call it and return the result.\n    if (error && typeof error === \"object\" && \"serialize\" in error && typeof error.serialize === \"function\") {\n        return error.serialize();\n    }\n    if (isJsonRpcError(error)) {\n        return error;\n    }\n    // If the error does not match the JsonRpcError type, use the fallback error, but try to include the original error as `cause`.\n    const cause = serializeCause(error);\n    const fallbackWithCause = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()({}, fallbackError), {}, {\n        data: {\n            cause\n        }\n    });\n    return fallbackWithCause;\n}\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.cause property.\n *\n * @param error - The error to serialize.\n * @param options - Options bag.\n * @param options.fallbackError - The error to return if the given error is\n * not compatible. Should be a JSON serializable value.\n * @param options.shouldIncludeStack - Whether to include the error's stack\n * on the returned object.\n * @returns The serialized error.\n */ function serializeError(error) {\n    let { fallbackError = FALLBACK_ERROR, shouldIncludeStack = true } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!isJsonRpcError(fallbackError)) {\n        throw new Error(\"Must provide fallback error with integer number code and string message.\");\n    }\n    const serialized = buildError(error, fallbackError);\n    if (!shouldIncludeStack) {\n        delete serialized.stack;\n    }\n    return serialized;\n}\n/**\n * Returns true if supplied error data has a usable `cause` property; false otherwise.\n *\n * @param data - Optional data to validate.\n * @returns Whether cause property is present and an object.\n */ function dataHasCause(data) {\n    return isObject(data) && Object.hasOwn(data, \"cause\") && isObject(data.cause);\n}\n/**\n * Check if the given code is a valid JSON-RPC error code.\n *\n * @param code - The code to check.\n * @returns Whether the code is valid.\n */ function isValidEthProviderCode(code) {\n    return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\n/**\n * A JSON replacer function that omits circular references.\n *\n * @param _ - The key being replaced.\n * @param value - The value being replaced.\n * @returns The value to use in place of the original value.\n */ function stringifyReplacer(_, value) {\n    if (value === \"[Circular]\") {\n        return undefined;\n    }\n    return value;\n}\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n *\n * Permits any integer error code.\n */ class JsonRpcError extends Error {\n    constructor(code, message, data){\n        if (!Number.isInteger(code)) {\n            throw new Error('\"code\" must be an integer.');\n        }\n        if (!message || typeof message !== \"string\") {\n            throw new Error('\"message\" must be a non-empty string.');\n        }\n        if (dataHasCause(data)) {\n            super(message, {\n                cause: data.cause\n            });\n            // Browser backwards-compatibility fallback\n            // The `cause` definition can be removed when tsconfig lib and/or target have changed to >=es2022\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"cause\", void 0);\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"code\", void 0);\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"data\", void 0);\n            if (!Object.hasOwn(this, \"cause\")) {\n                Object.assign(this, {\n                    cause: data.cause\n                });\n            }\n        } else {\n            super(message);\n            // The `cause` definition can be removed when tsconfig lib and/or target have changed to >=es2022\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"cause\", void 0);\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"code\", void 0);\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"data\", void 0);\n        }\n        if (data !== undefined) {\n            this.data = data;\n        }\n        this.code = code;\n        this.cause = data === null || data === void 0 ? void 0 : data.cause;\n    }\n    /**\n   * Get the error as JSON-serializable object.\n   *\n   * @returns A plain object with all public class properties.\n   */ serialize() {\n        const serialized = {\n            code: this.code,\n            message: this.message\n        };\n        if (this.data !== undefined) {\n            // `this.data` is not guaranteed to be a plain object, but this simplifies\n            // the type guard below. We can safely cast it because we know it's a\n            // JSON-serializable value.\n            serialized.data = this.data;\n            if (isPlainObject(this.data)) {\n                serialized.data.cause = serializeCause(this.data.cause);\n            }\n        }\n        if (this.stack) {\n            serialized.stack = this.stack;\n        }\n        return serialized;\n    }\n    /**\n   * Get a string representation of the serialized error, omitting any circular\n   * references.\n   *\n   * @returns A string representation of the serialized error.\n   */ toString() {\n        return fast_safe_stringify__WEBPACK_IMPORTED_MODULE_2___default()(this.serialize(), stringifyReplacer, 2);\n    }\n}\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */ class EthereumProviderError extends JsonRpcError {\n    /**\n   * Create an Ethereum Provider JSON-RPC error.\n   *\n   * @param code - The JSON-RPC error code. Must be an integer in the\n   * `1000 <= n <= 4999` range.\n   * @param message - The JSON-RPC error message.\n   * @param data - Optional data to include in the error.\n   */ constructor(code, message, data){\n        if (!isValidEthProviderCode(code)) {\n            throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n        }\n        super(code, message, data);\n    }\n}\n/**\n * Get an error message and optional data from an options bag.\n *\n * @param arg - The error message or options bag.\n * @returns A tuple containing the error message and optional data.\n */ function parseOpts(arg) {\n    if (arg) {\n        if (typeof arg === \"string\") {\n            return [\n                arg\n            ];\n        } else if (typeof arg === \"object\" && !Array.isArray(arg)) {\n            const { message, data } = arg;\n            if (message && typeof message !== \"string\") {\n                throw new Error(\"Must specify string message.\");\n            }\n            return [\n                message !== null && message !== void 0 ? message : undefined,\n                data\n            ];\n        }\n    }\n    return [];\n}\n/**\n * Get a generic JSON-RPC error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link JsonRpcError} class.\n */ function getJsonRpcError(code, arg) {\n    const [message, data] = parseOpts(arg);\n    return new JsonRpcError(code, message !== null && message !== void 0 ? message : getMessageFromCode(code), data);\n}\n/**\n * Get an Ethereum Provider error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link EthereumProviderError} class.\n */ function getEthProviderError(code, arg) {\n    const [message, data] = parseOpts(arg);\n    return new EthereumProviderError(code, message !== null && message !== void 0 ? message : getMessageFromCode(code), data);\n}\nconst rpcErrors = {\n    /**\n   * Get a JSON RPC 2.0 Parse (-32700) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */ parse: (arg)=>getJsonRpcError(errorCodes.rpc.parse, arg),\n    /**\n   * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */ invalidRequest: (arg)=>getJsonRpcError(errorCodes.rpc.invalidRequest, arg),\n    /**\n   * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */ invalidParams: (arg)=>getJsonRpcError(errorCodes.rpc.invalidParams, arg),\n    /**\n   * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */ methodNotFound: (arg)=>getJsonRpcError(errorCodes.rpc.methodNotFound, arg),\n    /**\n   * Get a JSON RPC 2.0 Internal (-32603) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */ internal: (arg)=>getJsonRpcError(errorCodes.rpc.internal, arg),\n    /**\n   * Get a JSON RPC 2.0 Server error.\n   * Permits integer error codes in the [ -32099 <= -32005 ] range.\n   * Codes -32000 through -32004 are reserved by EIP-1474.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */ server: (opts)=>{\n        if (!opts || typeof opts !== \"object\" || Array.isArray(opts)) {\n            throw new Error(\"Ethereum RPC Server errors must provide single object argument.\");\n        }\n        const { code } = opts;\n        if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n            throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n        }\n        return getJsonRpcError(code, opts);\n    },\n    /**\n   * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */ invalidInput: (arg)=>getJsonRpcError(errorCodes.rpc.invalidInput, arg),\n    /**\n   * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */ resourceNotFound: (arg)=>getJsonRpcError(errorCodes.rpc.resourceNotFound, arg),\n    /**\n   * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */ resourceUnavailable: (arg)=>getJsonRpcError(errorCodes.rpc.resourceUnavailable, arg),\n    /**\n   * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */ transactionRejected: (arg)=>getJsonRpcError(errorCodes.rpc.transactionRejected, arg),\n    /**\n   * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */ methodNotSupported: (arg)=>getJsonRpcError(errorCodes.rpc.methodNotSupported, arg),\n    /**\n   * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */ limitExceeded: (arg)=>getJsonRpcError(errorCodes.rpc.limitExceeded, arg)\n};\nconst providerErrors = {\n    /**\n   * Get an Ethereum Provider User Rejected Request (4001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */ userRejectedRequest: (arg)=>{\n        return getEthProviderError(errorCodes.provider.userRejectedRequest, arg);\n    },\n    /**\n   * Get an Ethereum Provider Unauthorized (4100) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */ unauthorized: (arg)=>{\n        return getEthProviderError(errorCodes.provider.unauthorized, arg);\n    },\n    /**\n   * Get an Ethereum Provider Unsupported Method (4200) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */ unsupportedMethod: (arg)=>{\n        return getEthProviderError(errorCodes.provider.unsupportedMethod, arg);\n    },\n    /**\n   * Get an Ethereum Provider Not Connected (4900) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */ disconnected: (arg)=>{\n        return getEthProviderError(errorCodes.provider.disconnected, arg);\n    },\n    /**\n   * Get an Ethereum Provider Chain Not Connected (4901) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */ chainDisconnected: (arg)=>{\n        return getEthProviderError(errorCodes.provider.chainDisconnected, arg);\n    },\n    /**\n   * Get a custom Ethereum Provider error.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */ custom: (opts)=>{\n        if (!opts || typeof opts !== \"object\" || Array.isArray(opts)) {\n            throw new Error(\"Ethereum Provider custom errors must provide single object argument.\");\n        }\n        const { code, message, data } = opts;\n        if (!message || typeof message !== \"string\") {\n            throw new Error('\"message\" must be a nonempty string');\n        }\n        return new EthereumProviderError(code, message, data);\n    }\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */ function safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    } catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(()=>{\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for(let i = 0; i < n; i += 1){\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events__WEBPACK_IMPORTED_MODULE_4__.EventEmitter {\n    emit(type) {\n        let doError = type === \"error\";\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        } else if (!doError) {\n            return false;\n        }\n        // If there is no 'error' event listener then throw.\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                // Note: The comments on the `throw` lines are intentional, they show\n                // up in Node's output if this results in an unhandled exception.\n                throw er; // Unhandled 'error' event\n            }\n            // At least give some kind of context to the user\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === \"function\") {\n            safeApply(handler, this, args);\n        } else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for(let i = 0; i < len; i += 1){\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nclass SerializableError extends Error {\n    constructor(_ref){\n        let { code, message, data } = _ref;\n        if (!Number.isInteger(code)) {\n            throw new Error(\"code must be an integer\");\n        }\n        if (!message || typeof message !== \"string\") {\n            throw new Error(\"message must be string\");\n        }\n        super(message);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"code\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"data\", void 0);\n        this.code = code;\n        if (data !== undefined) {\n            this.data = data;\n        }\n    }\n    toString() {\n        return fast_safe_stringify__WEBPACK_IMPORTED_MODULE_2___default()({\n            code: this.code,\n            message: this.message,\n            data: this.data,\n            stack: this.stack\n        });\n    }\n}\nconst getRpcPromiseCallback = function(resolve, reject) {\n    let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return (error, response)=>{\n        if (error || response.error) {\n            reject(error || response.error);\n        } else if (!unwrapResult || Array.isArray(response)) {\n            resolve(response);\n        } else {\n            resolve(response.result);\n        }\n    };\n};\nfunction createErrorMiddleware(log) {\n    return (req, res, next, end)=>{\n        try {\n            // json-rpc-engine will terminate the request when it notices this error\n            if (typeof req.method !== \"string\" || !req.method) {\n                res.error = new SerializableError({\n                    code: -32603,\n                    message: \"invalid method\"\n                });\n                end();\n                return;\n            }\n            next((done)=>{\n                const { error } = res;\n                if (!error) {\n                    return done();\n                }\n                log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n                return done();\n            });\n        } catch (error) {\n            log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n            res.error = new SerializableError({\n                code: -32603,\n                message: error.message\n            });\n            end();\n        }\n    };\n}\nfunction createStreamMiddleware() {\n    const idMap = {};\n    function readNoop() {\n        return false;\n    }\n    const events = new SafeEventEmitter();\n    function processResponse(res) {\n        const context = idMap[res.id];\n        if (!context) {\n            throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n        }\n        delete idMap[res.id];\n        // copy whole res onto original res\n        Object.assign(context.res, res);\n        // run callback on empty stack,\n        // prevent internal stream-handler from catching errors\n        setTimeout(context.end);\n    }\n    function processNotification(res) {\n        events.emit(\"notification\", res);\n    }\n    function processMessage(res, _encoding, cb) {\n        let err;\n        try {\n            const isNotification = !res.id;\n            if (isNotification) {\n                processNotification(res);\n            } else {\n                processResponse(res);\n            }\n        } catch (_err) {\n            err = _err;\n        }\n        // continue processing stream\n        cb(err);\n    }\n    const stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n        objectMode: true,\n        read: readNoop,\n        write: processMessage\n    });\n    const middleware = (req, res, next, end)=>{\n        // write req to stream\n        stream.push(req);\n        // register request on id map\n        idMap[req.id] = {\n            req,\n            res,\n            next,\n            end\n        };\n    };\n    return {\n        events,\n        middleware,\n        stream\n    };\n}\nfunction createScaffoldMiddleware(handlers) {\n    return (req, res, next, end)=>{\n        const handler = handlers[req.method];\n        // if no handler, return\n        if (handler === undefined) {\n            return next();\n        }\n        // if handler is fn, call as middleware\n        if (typeof handler === \"function\") {\n            return handler(req, res, next, end);\n        }\n        // if handler is some other value, use as result\n        res.result = handler;\n        return end();\n    };\n}\nfunction createIdRemapMiddleware() {\n    return (req, res, next, _end)=>{\n        const originalId = req.id;\n        const newId = Math.random().toString(36).slice(2);\n        req.id = newId;\n        res.id = newId;\n        next((done)=>{\n            req.id = originalId;\n            res.id = originalId;\n            done();\n        });\n    };\n}\nfunction createLoggerMiddleware(logger) {\n    return (req, res, next, _)=>{\n        logger.debug(\"REQ\", req, \"RES\", res);\n        next();\n    };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n    return async (req, res, next, end)=>{\n        // nextPromise is the key to the implementation\n        // it is resolved by the return handler passed to the\n        // \"next\" function\n        let resolveNextPromise;\n        const nextPromise = new Promise((resolve)=>{\n            resolveNextPromise = resolve;\n        });\n        let returnHandlerCallback = null;\n        let nextWasCalled = false;\n        // This will be called by the consumer's async middleware.\n        const asyncNext = async ()=>{\n            nextWasCalled = true;\n            // We pass a return handler to next(). When it is called by the engine,\n            // the consumer's async middleware will resume executing.\n            next((runReturnHandlersCallback)=>{\n                // This callback comes from JRPCEngine._runReturnHandlers\n                returnHandlerCallback = runReturnHandlersCallback;\n                resolveNextPromise();\n            });\n            await nextPromise;\n        };\n        try {\n            await asyncMiddleware(req, res, asyncNext);\n            if (nextWasCalled) {\n                await nextPromise; // we must wait until the return handler is called\n                returnHandlerCallback(null);\n            } else {\n                end(null);\n            }\n        } catch (err) {\n            const error = err;\n            if (returnHandlerCallback) {\n                returnHandlerCallback(error);\n            } else {\n                end(error);\n            }\n        }\n    };\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */ class JRPCEngine extends SafeEventEmitter {\n    constructor(){\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_middleware\", void 0);\n        this._middleware = [];\n    }\n    /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */ static async _runAllMiddleware(req, res, middlewareStack) {\n        const returnHandlers = [];\n        let error = null;\n        let isComplete = false;\n        // Go down stack of middleware, call and collect optional returnHandlers\n        for (const middleware of middlewareStack){\n            [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n            if (isComplete) {\n                break;\n            }\n        }\n        return [\n            error,\n            isComplete,\n            returnHandlers.reverse()\n        ];\n    }\n    /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * and a boolean indicating whether the request should end.\n   */ static _runMiddleware(req, res, middleware, returnHandlers) {\n        return new Promise((resolve)=>{\n            const end = (err)=>{\n                const error = err || res.error;\n                if (error) {\n                    if (typeof error === \"object\" && Object.keys(error).includes(\"stack\") === false) error.stack = \"Stack trace is not available.\";\n                    res.error = serializeError(error, {\n                        shouldIncludeStack: true,\n                        fallbackError: {\n                            message: (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString()),\n                            code: (error === null || error === void 0 ? void 0 : error.code) || -32603,\n                            stack: (error === null || error === void 0 ? void 0 : error.stack) || \"Stack trace is not available.\",\n                            data: (error === null || error === void 0 ? void 0 : error.data) || (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString())\n                        }\n                    });\n                }\n                // True indicates that the request should end\n                resolve([\n                    error,\n                    true\n                ]);\n            };\n            const next = (returnHandler)=>{\n                if (res.error) {\n                    end(res.error);\n                } else {\n                    if (returnHandler) {\n                        if (typeof returnHandler !== \"function\") {\n                            end(new SerializableError({\n                                code: -32603,\n                                message: \"JRPCEngine: 'next' return handlers must be functions\"\n                            }));\n                        }\n                        returnHandlers.push(returnHandler);\n                    }\n                    // False indicates that the request should not end\n                    resolve([\n                        null,\n                        false\n                    ]);\n                }\n            };\n            try {\n                middleware(req, res, next, end);\n            } catch (error) {\n                end(error);\n            }\n        });\n    }\n    /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */ static async _runReturnHandlers(handlers) {\n        for (const handler of handlers){\n            await new Promise((resolve, reject)=>{\n                handler((err)=>err ? reject(err) : resolve());\n            });\n        }\n    }\n    /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */ static _checkForCompletion(_req, res, isComplete) {\n        if (!(\"result\" in res) && !(\"error\" in res)) {\n            throw new SerializableError({\n                code: -32603,\n                message: \"Response has no error or result for request\"\n            });\n        }\n        if (!isComplete) {\n            throw new SerializableError({\n                code: -32603,\n                message: \"Nothing ended request\"\n            });\n        }\n    }\n    /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */ push(middleware) {\n        this._middleware.push(middleware);\n    }\n    /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @param callback - An error-first callback that will receive the response.\n   */ /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @param callback - An error-first callback that will receive the array of\n   * responses.\n   */ /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @returns A promise that resolves with the response, or rejects with an\n   * error.\n   */ /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @returns A promise that resolves with the array of responses, or rejects\n   * with an error.\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    handle(req, cb) {\n        if (cb && typeof cb !== \"function\") {\n            throw new Error('\"callback\" must be a function if provided.');\n        }\n        if (Array.isArray(req)) {\n            if (cb) {\n                return this._handleBatch(req, cb);\n            }\n            return this._handleBatch(req);\n        }\n        if (cb) {\n            return this._handle(req, cb);\n        }\n        return this._promiseHandle(req);\n    }\n    /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */ asMiddleware() {\n        return async (req, res, next, end)=>{\n            try {\n                const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n                if (isComplete) {\n                    await JRPCEngine._runReturnHandlers(returnHandlers);\n                    return end(middlewareError);\n                }\n                return next(async (handlerCallback)=>{\n                    try {\n                        await JRPCEngine._runReturnHandlers(returnHandlers);\n                    } catch (error) {\n                        return handlerCallback(error);\n                    }\n                    return handlerCallback();\n                });\n            } catch (error) {\n                return end(error);\n            }\n        };\n    }\n    /**\n   * Like _handle, but for batch requests.\n   */ /**\n   * Like _handle, but for batch requests.\n   */ async _handleBatch(reqs, cb) {\n        // The order here is important\n        try {\n            // 2. Wait for all requests to finish, or throw on some kind of fatal\n            // error\n            const responses = await Promise.all(// 1. Begin executing each request in the order received\n            reqs.map(this._promiseHandle.bind(this)));\n            // 3. Return batch response\n            if (cb) {\n                return cb(null, responses);\n            }\n            return responses;\n        } catch (error) {\n            if (cb) {\n                return cb(error);\n            }\n            throw error;\n        }\n    }\n    /**\n   * A promise-wrapped _handle.\n   */ _promiseHandle(req) {\n        return new Promise((resolve, reject)=>{\n            this._handle(req, (_err, res)=>{\n                // There will always be a response, and it will always have any error\n                // that is caught and propagated.\n                if (_err && res === undefined) {\n                    reject(_err);\n                } else resolve(res);\n            }).catch(reject);\n        });\n    }\n    /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */ async _handle(callerReq, cb) {\n        if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n            const error = new SerializableError({\n                code: -32603,\n                message: \"request must be plain object\"\n            });\n            return cb(error, {\n                id: undefined,\n                jsonrpc: \"2.0\",\n                error\n            });\n        }\n        if (typeof callerReq.method !== \"string\") {\n            const error = new SerializableError({\n                code: -32603,\n                message: \"method must be string\"\n            });\n            return cb(error, {\n                id: callerReq.id,\n                jsonrpc: \"2.0\",\n                error\n            });\n        }\n        const req = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()({}, callerReq);\n        const res = {\n            id: req.id,\n            jsonrpc: req.jsonrpc\n        };\n        let error = null;\n        try {\n            await this._processRequest(req, res);\n        } catch (_error) {\n            // A request handler error, a re-thrown middleware error, or something\n            // unexpected.\n            error = _error;\n        }\n        if (error) {\n            // Ensure no result is present on an errored response\n            delete res.result;\n            if (!res.error) {\n                var _error2, _error3, _error4, _error5, _error6, _error7, _error8;\n                if (typeof error === \"object\" && Object.keys(error).includes(\"stack\") === false) error.stack = \"Stack trace is not available.\";\n                res.error = serializeError(error, {\n                    shouldIncludeStack: true,\n                    fallbackError: {\n                        message: ((_error2 = error) === null || _error2 === void 0 ? void 0 : _error2.message) || ((_error3 = error) === null || _error3 === void 0 ? void 0 : _error3.toString()),\n                        code: ((_error4 = error) === null || _error4 === void 0 ? void 0 : _error4.code) || -32603,\n                        stack: ((_error5 = error) === null || _error5 === void 0 ? void 0 : _error5.stack) || \"Stack trace is not available.\",\n                        data: ((_error6 = error) === null || _error6 === void 0 ? void 0 : _error6.data) || ((_error7 = error) === null || _error7 === void 0 ? void 0 : _error7.message) || ((_error8 = error) === null || _error8 === void 0 ? void 0 : _error8.toString())\n                    }\n                });\n            }\n        }\n        return cb(error, res);\n    }\n    /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */ async _processRequest(req, res) {\n        const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n        // Throw if \"end\" was not called, or if the response has neither a result\n        // nor an error.\n        JRPCEngine._checkForCompletion(req, res, isComplete);\n        // The return handlers should run even if an error was encountered during\n        // middleware processing.\n        await JRPCEngine._runReturnHandlers(returnHandlers);\n        // Now we re-throw the middleware processing error, if any, to catch it\n        // further up the call chain.\n        if (error) {\n            throw error;\n        }\n    }\n}\nfunction mergeMiddleware(middlewareStack) {\n    const engine = new JRPCEngine();\n    middlewareStack.forEach((middleware)=>engine.push(middleware));\n    return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n    if (!opts || !opts.engine) {\n        throw new Error(\"Missing engine parameter!\");\n    }\n    const { engine } = opts;\n    // eslint-disable-next-line prefer-const\n    let stream;\n    function read() {\n        return undefined;\n    }\n    function write(req, _encoding, cb) {\n        engine.handle(req, (_err, res)=>{\n            stream.push(res);\n        });\n        cb();\n    }\n    stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n        objectMode: true,\n        read,\n        write\n    });\n    // forward notifications\n    if (engine.on) {\n        engine.on(\"notification\", (message)=>{\n            stream.push(message);\n        });\n    }\n    return stream;\n}\nfunction providerFromEngine(engine) {\n    const provider = new SafeEventEmitter();\n    // handle both rpc send methods\n    provider.sendAsync = async (req)=>{\n        const res = await engine.handle(req);\n        if (res.error) {\n            var _res$error, _res$error2, _res$error3, _res$error4, _res$error5, _res$error6, _res$error7;\n            if (typeof res.error === \"object\" && Object.keys(res.error).includes(\"stack\") === false) res.error.stack = \"Stack trace is not available.\";\n            const err = serializeError(res.error, {\n                fallbackError: {\n                    message: ((_res$error = res.error) === null || _res$error === void 0 ? void 0 : _res$error.message) || ((_res$error2 = res.error) === null || _res$error2 === void 0 ? void 0 : _res$error2.toString()),\n                    code: ((_res$error3 = res.error) === null || _res$error3 === void 0 ? void 0 : _res$error3.code) || -32603,\n                    stack: ((_res$error4 = res.error) === null || _res$error4 === void 0 ? void 0 : _res$error4.stack) || \"Stack trace is not available.\",\n                    data: ((_res$error5 = res.error) === null || _res$error5 === void 0 ? void 0 : _res$error5.data) || ((_res$error6 = res.error) === null || _res$error6 === void 0 ? void 0 : _res$error6.message) || ((_res$error7 = res.error) === null || _res$error7 === void 0 ? void 0 : _res$error7.toString())\n                },\n                shouldIncludeStack: true\n            });\n            throw rpcErrors.internal(err);\n        }\n        return res.result;\n    };\n    provider.send = (req, callback)=>{\n        if (typeof callback !== \"function\") {\n            throw new Error('Must provide callback to \"send\" method.');\n        }\n        engine.handle(req, callback);\n    };\n    // forward notifications\n    if (engine.on) {\n        engine.on(\"notification\", (message)=>{\n            provider.emit(\"data\", null, message);\n        });\n    }\n    provider.request = async (args)=>{\n        const req = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()({}, args), {}, {\n            id: Math.random().toString(36).slice(2),\n            jsonrpc: \"2.0\"\n        });\n        const res = await provider.sendAsync(req);\n        return res;\n    };\n    return provider;\n}\nfunction providerFromMiddleware(middleware) {\n    const engine = new JRPCEngine();\n    engine.push(middleware);\n    const provider = providerFromEngine(engine);\n    return provider;\n}\nfunction providerAsMiddleware(provider) {\n    return async (req, res, _next, end)=>{\n        // send request to provider\n        try {\n            const providerRes = await provider.sendAsync(req);\n            res.result = providerRes;\n            return end();\n        } catch (error) {\n            return end(error);\n        }\n    };\n}\nclass Substream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(_ref){\n        let { parent, name } = _ref;\n        super({\n            objectMode: true\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_parent\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_name\", void 0);\n        this._parent = parent;\n        this._name = name;\n    }\n    /**\n   * Explicitly sets read operations to a no-op.\n   */ _read() {\n        return undefined;\n    }\n    /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */ _write(chunk, _encoding, callback) {\n        this._parent.push({\n            name: this._name,\n            data: chunk\n        });\n        callback();\n    }\n}\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(){\n        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()({}, opts), {}, {\n            objectMode: true\n        }));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_substreams\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"getStream\", void 0);\n        this._substreams = {};\n    }\n    createStream(name) {\n        // validate name\n        if (!name) {\n            throw new Error(\"ObjectMultiplex - name must not be empty\");\n        }\n        if (this._substreams[name]) {\n            throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n        }\n        // create substream\n        const substream = new Substream({\n            parent: this,\n            name\n        });\n        this._substreams[name] = substream;\n        // listen for parent stream to end\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        anyStreamEnd(this, (_error)=>substream.destroy(_error || undefined));\n        return substream;\n    }\n    // ignore streams (dont display orphaned data warning)\n    ignoreStream(name) {\n        // validate name\n        if (!name) {\n            throw new Error(\"ObjectMultiplex - name must not be empty\");\n        }\n        if (this._substreams[name]) {\n            throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n        }\n        // set\n        this._substreams[name] = IGNORE_SUBSTREAM;\n    }\n    _read() {\n        return undefined;\n    }\n    _write(chunk, _encoding, callback) {\n        const { name, data } = chunk;\n        if (!name) {\n            window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n            return callback();\n        }\n        // get corresponding substream\n        const substream = this._substreams[name];\n        if (!substream) {\n            window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n            return callback();\n        }\n        // push data into substream\n        if (substream !== IGNORE_SUBSTREAM) {\n            substream.push(data);\n        }\n        return callback();\n    }\n}\n// util\nfunction anyStreamEnd(stream, _cb) {\n    const cb = once__WEBPACK_IMPORTED_MODULE_6___default()(_cb);\n    end_of_stream__WEBPACK_IMPORTED_MODULE_5___default()(stream, {\n        readable: false\n    }, cb);\n    end_of_stream__WEBPACK_IMPORTED_MODULE_5___default()(stream, {\n        writable: false\n    }, cb);\n}\nfunction setupMultiplex(stream) {\n    const mux = new ObjectMultiplex();\n    mux.getStream = function streamHelper(name) {\n        if (this._substreams[name]) {\n            return this._substreams[name];\n        }\n        return this.createStream(name);\n    };\n    pump__WEBPACK_IMPORTED_MODULE_7___default()(stream, mux, stream, (err)=>{\n        if (err) window.console.error(err);\n    });\n    return mux;\n}\nclass PostMessageStream extends BasePostMessageStream {\n    _postMessage(data) {\n        let originConstraint = this._targetOrigin;\n        if (typeof data === \"object\") {\n            const dataObj = data;\n            if (typeof dataObj.data === \"object\") {\n                const dataObjData = dataObj.data;\n                if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n                    const dataObjDataParam = dataObjData.params[0];\n                    if (dataObjDataParam._origin) {\n                        originConstraint = dataObjDataParam._origin;\n                    }\n                    // add a constraint for the response\n                    dataObjDataParam._origin = window.location.origin;\n                }\n            }\n        }\n        this._targetWindow.postMessage({\n            target: this._target,\n            data\n        }, originConstraint);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUILD_ENV: () => (/* binding */ BUILD_ENV),\n/* harmony export */   BrowserStorage: () => (/* binding */ BrowserStorage),\n/* harmony export */   LANGUAGES: () => (/* binding */ LANGUAGES),\n/* harmony export */   LANGUAGE_MAP: () => (/* binding */ LANGUAGE_MAP),\n/* harmony export */   LOGIN_PROVIDER: () => (/* binding */ LOGIN_PROVIDER),\n/* harmony export */   MFA_FACTOR: () => (/* binding */ MFA_FACTOR),\n/* harmony export */   MFA_LEVELS: () => (/* binding */ MFA_LEVELS),\n/* harmony export */   MemoryStore: () => (/* binding */ MemoryStore),\n/* harmony export */   OPENLOGIN_ACTIONS: () => (/* binding */ OPENLOGIN_ACTIONS),\n/* harmony export */   OPENLOGIN_NETWORK: () => (/* binding */ OPENLOGIN_NETWORK),\n/* harmony export */   SUPPORTED_KEY_CURVES: () => (/* binding */ SUPPORTED_KEY_CURVES),\n/* harmony export */   THEME_MODES: () => (/* binding */ THEME_MODES),\n/* harmony export */   TORUS_LEGACY_NETWORK: () => (/* reexport safe */ _toruslabs_constants__WEBPACK_IMPORTED_MODULE_3__.TORUS_LEGACY_NETWORK),\n/* harmony export */   TORUS_SAPPHIRE_NETWORK: () => (/* reexport safe */ _toruslabs_constants__WEBPACK_IMPORTED_MODULE_3__.TORUS_SAPPHIRE_NETWORK),\n/* harmony export */   UX_MODE: () => (/* binding */ UX_MODE),\n/* harmony export */   applyWhiteLabelTheme: () => (/* binding */ applyWhiteLabelTheme),\n/* harmony export */   base64toJSON: () => (/* binding */ base64toJSON),\n/* harmony export */   base64url: () => (/* binding */ base64url),\n/* harmony export */   generateWhiteLabelTheme: () => (/* binding */ generateWhiteLabelTheme),\n/* harmony export */   getColorsList: () => (/* binding */ getColorsList),\n/* harmony export */   jsonToBase64: () => (/* binding */ jsonToBase64),\n/* harmony export */   safeatob: () => (/* binding */ safeatob),\n/* harmony export */   safebtoa: () => (/* binding */ safebtoa),\n/* harmony export */   storageAvailable: () => (/* binding */ storageAvailable),\n/* harmony export */   storeKey: () => (/* binding */ storeKey)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! base64url */ \"(ssr)/./node_modules/base64url/index.js\");\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(base64url__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _toruslabs_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/constants */ \"(ssr)/./node_modules/@toruslabs/constants/dist/constants.esm.js\");\n/* harmony import */ var color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! color */ \"(ssr)/./node_modules/color/index.js\");\n/* harmony import */ var color__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(color__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\nconst base64url = (base64url__WEBPACK_IMPORTED_MODULE_1___default());\nfunction safebtoa(str) {\n    return base64url.encode(str);\n}\nfunction safeatob(str) {\n    // Going backwards: from bytestream, to percent-encoding, to original string.\n    return base64url.decode(str);\n}\nfunction base64toJSON(b64str) {\n    return JSON.parse(base64url.decode(b64str));\n}\nfunction jsonToBase64(json) {\n    return base64url.encode(JSON.stringify(json));\n}\nfunction storageAvailable(type) {\n    let storageExists = false;\n    let storageLength = 0;\n    let storage;\n    try {\n        storage = window[type];\n        storageExists = true;\n        storageLength = storage.length;\n        const x = \"__storage_test__\";\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n    } catch (err) {\n        const error = err;\n        return error && // everything except Firefox\n        (error.code === 22 || // Firefox\n        error.code === 1014 || // test name field too, because code might not be present\n        // everything except Firefox\n        error.name === \"QuotaExceededError\" || // Firefox\n        error.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n        storageExists && storageLength !== 0;\n    }\n}\nclass MemoryStore {\n    constructor(){\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"store\", new Map());\n    }\n    getItem(key) {\n        return this.store.get(key) || null;\n    }\n    setItem(key, value) {\n        this.store.set(key, value);\n    }\n    removeItem(key) {\n        this.store.delete(key);\n    }\n}\nclass BrowserStorage {\n    constructor(storeKey, storage){\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"storage\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_storeKey\", void 0);\n        this.storage = storage;\n        this._storeKey = storeKey;\n        try {\n            if (!storage.getItem(storeKey)) {\n                this.resetStore();\n            }\n        } catch (error) {\n        // Storage is not available\n        }\n    }\n    static getInstance(key) {\n        let storageKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"local\";\n        if (!this.instanceMap.has(key)) {\n            let storage;\n            if (storageKey === \"local\" && storageAvailable(\"localStorage\")) {\n                storage = window.localStorage;\n            } else if (storageKey === \"session\" && storageAvailable(\"sessionStorage\")) {\n                storage = window.sessionStorage;\n            } else {\n                storage = new MemoryStore();\n            }\n            this.instanceMap.set(key, new this(key, storage));\n        }\n        return this.instanceMap.get(key);\n    }\n    toJSON() {\n        return this.storage.getItem(this._storeKey);\n    }\n    resetStore() {\n        const currStore = this.getStore();\n        this.storage.removeItem(this._storeKey);\n        return currStore;\n    }\n    getStore() {\n        return JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    }\n    get(key) {\n        const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n        return store[key];\n    }\n    set(key, value) {\n        const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n        store[key] = value;\n        this.storage.setItem(this._storeKey, JSON.stringify(store));\n    }\n}\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(BrowserStorage, \"instanceMap\", new Map());\nconst storeKey = \"openlogin_store\";\nconst UX_MODE = {\n    POPUP: \"popup\",\n    REDIRECT: \"redirect\"\n};\nconst OPENLOGIN_NETWORK = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()({}, _toruslabs_constants__WEBPACK_IMPORTED_MODULE_3__.TORUS_SAPPHIRE_NETWORK), _toruslabs_constants__WEBPACK_IMPORTED_MODULE_3__.TORUS_LEGACY_NETWORK);\nconst SUPPORTED_KEY_CURVES = {\n    SECP256K1: \"secp256k1\",\n    ED25519: \"ed25519\"\n};\nconst LOGIN_PROVIDER = {\n    GOOGLE: \"google\",\n    FACEBOOK: \"facebook\",\n    REDDIT: \"reddit\",\n    DISCORD: \"discord\",\n    TWITCH: \"twitch\",\n    APPLE: \"apple\",\n    LINE: \"line\",\n    GITHUB: \"github\",\n    KAKAO: \"kakao\",\n    LINKEDIN: \"linkedin\",\n    TWITTER: \"twitter\",\n    WEIBO: \"weibo\",\n    WECHAT: \"wechat\",\n    FARCASTER: \"farcaster\",\n    EMAIL_PASSWORDLESS: \"email_passwordless\",\n    SMS_PASSWORDLESS: \"sms_passwordless\",\n    WEBAUTHN: \"webauthn\",\n    JWT: \"jwt\"\n};\nconst MFA_LEVELS = {\n    DEFAULT: \"default\",\n    OPTIONAL: \"optional\",\n    MANDATORY: \"mandatory\",\n    NONE: \"none\"\n};\nconst OPENLOGIN_ACTIONS = {\n    LOGIN: \"login\",\n    ENABLE_MFA: \"enable_mfa\",\n    MANAGE_MFA: \"manage_mfa\",\n    MODIFY_SOCIAL_FACTOR: \"modify_social_factor\"\n};\nconst BUILD_ENV = {\n    PRODUCTION: \"production\",\n    DEVELOPMENT: \"development\",\n    STAGING: \"staging\",\n    TESTING: \"testing\"\n};\n/**\n * {@label loginProviderType}\n */ // autocomplete workaround https://github.com/microsoft/TypeScript/issues/29729\nconst LANGUAGES = {\n    en: \"en\",\n    ja: \"ja\",\n    ko: \"ko\",\n    de: \"de\",\n    zh: \"zh\",\n    es: \"es\",\n    fr: \"fr\",\n    pt: \"pt\",\n    nl: \"nl\",\n    tr: \"tr\"\n};\nconst LANGUAGE_MAP = {\n    en: \"english\",\n    ja: \"japanese\",\n    ko: \"korean\",\n    de: \"german\",\n    zh: \"mandarin\",\n    es: \"spanish\",\n    fr: \"french\",\n    pt: \"portuguese\",\n    nl: \"dutch\",\n    tr: \"turkish\"\n};\nconst THEME_MODES = {\n    light: \"light\",\n    dark: \"dark\",\n    auto: \"auto\"\n};\nconst MFA_FACTOR = {\n    DEVICE: \"deviceShareFactor\",\n    BACKUP_SHARE: \"backUpShareFactor\",\n    SOCIAL_BACKUP: \"socialBackupFactor\",\n    PASSWORD: \"passwordFactor\",\n    PASSKEYS: \"passkeysFactor\",\n    AUTHENTICATOR: \"authenticatorFactor\"\n};\nfunction getColorsList() {\n    let colorsAmount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n    let colorsShiftAmount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n    let mixColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"black\";\n    let rotate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let saturation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;\n    let mainColor = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"#0346ff\";\n    const colorsList = [];\n    let step;\n    for(step = 0; step < colorsAmount; step += 1){\n        colorsList.push(color__WEBPACK_IMPORTED_MODULE_4___default()(mainColor).rotate((step + 1) / colorsAmount * -rotate).saturate((step + 1) / colorsAmount * (saturation / 100)).mix(color__WEBPACK_IMPORTED_MODULE_4___default()(mixColor), colorsShiftAmount / 100 * (step + 1) / colorsAmount).hex());\n    }\n    return colorsList;\n}\nfunction generateWhiteLabelTheme(primary) {\n    const darkSet = getColorsList(3, 50, \"black\", 0, 20, primary);\n    const lightSet = getColorsList(6, 85, \"white\", 0, 20, primary);\n    return [\n        ...darkSet.reverse(),\n        primary,\n        ...lightSet\n    ];\n}\nfunction applyWhiteLabelTheme(rootElement, theme) {\n    if (theme.primary) {\n        const themeSet = generateWhiteLabelTheme(theme.primary);\n        rootElement.style.setProperty(\"--app-primary-900\", themeSet[0]);\n        rootElement.style.setProperty(\"--app-primary-800\", themeSet[1]);\n        rootElement.style.setProperty(\"--app-primary-700\", themeSet[2]);\n        rootElement.style.setProperty(\"--app-primary-600\", themeSet[3]);\n        rootElement.style.setProperty(\"--app-primary-500\", themeSet[4]);\n        rootElement.style.setProperty(\"--app-primary-400\", themeSet[5]);\n        rootElement.style.setProperty(\"--app-primary-300\", themeSet[6]);\n        rootElement.style.setProperty(\"--app-primary-200\", themeSet[7]);\n        rootElement.style.setProperty(\"--app-primary-100\", themeSet[8]);\n        rootElement.style.setProperty(\"--app-primary-50\", themeSet[9]);\n    }\n    if (theme.onPrimary) {\n        rootElement.style.setProperty(\"--app-on-primary\", theme.onPrimary);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/solana-embed/dist/solanaEmbed.esm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toruslabs/solana-embed/dist/solanaEmbed.esm.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUTTON_POSITION: () => (/* binding */ BUTTON_POSITION),\n/* harmony export */   LOGIN_PROVIDER: () => (/* binding */ LOGIN_PROVIDER),\n/* harmony export */   PAYMENT_PROVIDER: () => (/* binding */ PAYMENT_PROVIDER),\n/* harmony export */   TORUS_BUILD_ENV: () => (/* binding */ TORUS_BUILD_ENV),\n/* harmony export */   TorusInPageProvider: () => (/* binding */ TorusInPageProvider),\n/* harmony export */   \"default\": () => (/* binding */ Torus)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/base-controllers */ \"(ssr)/./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js\");\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! eth-rpc-errors */ \"(ssr)/./node_modules/eth-rpc-errors/dist/index.js\");\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! pump */ \"(ssr)/./node_modules/pump/index.js\");\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(pump__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! fast-deep-equal */ \"(ssr)/./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n\n\n\nvar version = \"2.1.0\";\n/* eslint-disable @typescript-eslint/no-explicit-any */ function isStream(stream) {\n    return stream !== null && typeof stream === \"object\" && typeof stream.pipe === \"function\";\n}\nfunction isWritableStream(stream) {\n    return isStream(stream) && stream.writable !== false && typeof stream._write === \"function\" && typeof stream._writableState === \"object\";\n}\nfunction isReadableStream(stream) {\n    return isStream(stream) && stream.readable !== false && typeof stream._read === \"function\" && typeof stream._readableState === \"object\";\n}\nfunction isDuplexStream(stream) {\n    return isWritableStream(stream) && isReadableStream(stream);\n}\nvar messages = {\n    errors: {\n        disconnected: ()=>\"Torus: Lost connection to Torus.\",\n        permanentlyDisconnected: ()=>\"Torus: Disconnected from iframe. Page reload required.\",\n        unsupportedSync: (method)=>`Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n        invalidDuplexStream: ()=>\"Must provide a Node.js-style duplex stream.\",\n        invalidOptions: (maxEventListeners)=>`Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n        invalidRequestArgs: ()=>`Expected a single, non-array, object argument.`,\n        invalidRequestMethod: ()=>`'args.method' must be a non-empty string.`,\n        invalidRequestParams: ()=>`'args.params' must be an object or array if provided.`,\n        invalidLoggerObject: ()=>`'args.logger' must be an object if provided.`,\n        invalidLoggerMethod: (method)=>`'args.logger' must include required method '${method}'.`\n    },\n    info: {\n        connected: (chainId)=>`Torus: Connected to chain with ID \"${chainId}\".`\n    },\n    warnings: {}\n};\nconst PAYMENT_PROVIDER = {\n    MOONPAY: \"moonpay\",\n    WYRE: \"wyre\",\n    RAMPNETWORK: \"rampnetwork\",\n    XANPOOL: \"xanpool\",\n    MERCURYO: \"mercuryo\",\n    TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n    PRODUCTION: \"production\",\n    DEVELOPMENT: \"development\",\n    TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n    BOTTOM_LEFT: \"bottom-left\",\n    TOP_LEFT: \"top-left\",\n    BOTTOM_RIGHT: \"bottom-right\",\n    TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n    GOOGLE: \"google\",\n    FACEBOOK: \"facebook\",\n    REDDIT: \"reddit\",\n    DISCORD: \"discord\",\n    TWITCH: \"twitch\",\n    APPLE: \"apple\",\n    LINE: \"line\",\n    GITHUB: \"github\",\n    KAKAO: \"kakao\",\n    LINKEDIN: \"linkedin\",\n    TWITTER: \"twitter\",\n    WEIBO: \"weibo\",\n    WECHAT: \"wechat\",\n    EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\nconst translations = {\n    en: {\n        embed: {\n            continue: \"Continue\",\n            actionRequired: \"Authorization required\",\n            pendingAction: \"Click continue to proceed with your request in a popup\",\n            cookiesRequired: \"Cookies Required\",\n            enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n            clickHere: \"More Info\"\n        }\n    },\n    de: {\n        embed: {\n            continue: \"Fortsetzen\",\n            actionRequired: \"Autorisierung erforderlich\",\n            pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n            cookiesRequired: \"Cookies ben\\xf6tigt\",\n            enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n            clickHere: \"Mehr Info\"\n        }\n    },\n    ja: {\n        embed: {\n            continue: \"継続する\",\n            actionRequired: \"認証が必要です\",\n            pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n            cookiesRequired: \"必要なクッキー\",\n            enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n            clickHere: \"詳しくは\"\n        }\n    },\n    ko: {\n        embed: {\n            continue: \"계속하다\",\n            actionRequired: \"승인 필요\",\n            pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n            cookiesRequired: \"쿠키 필요\",\n            enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n            clickHere: \"더 많은 정보\"\n        }\n    },\n    zh: {\n        embed: {\n            continue: \"继续\",\n            actionRequired: \"需要授权\",\n            pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n            cookiesRequired: \"必填Cookie\",\n            enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n            clickHere: \"更多信息\"\n        }\n    }\n};\nvar configuration = {\n    supportedVerifierList: [\n        LOGIN_PROVIDER.GOOGLE,\n        LOGIN_PROVIDER.REDDIT,\n        LOGIN_PROVIDER.DISCORD\n    ],\n    api: \"https://api.tor.us\",\n    translations,\n    prodTorusUrl: \"\",\n    localStorageKeyPrefix: `torus-`\n};\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_8___default().getLogger(\"solana-embed\");\n// utility functions\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */ function createErrorMiddleware() {\n    return (req, res, next)=>{\n        // json-rpc-engine will terminate the request when it notices this error\n        if (typeof req.method !== \"string\" || !req.method) {\n            res.error = eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.ethErrors.rpc.invalidRequest({\n                message: `The request 'method' must be a non-empty string.`,\n                data: req\n            });\n        }\n        next((done)=>{\n            const { error } = res;\n            if (!error) {\n                return done();\n            }\n            log.error(`Torus - RPC Error: ${error.message}`, error);\n            return done();\n        });\n    };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */ function logStreamDisconnectWarning(remoteLabel, error, emitter) {\n    let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n    if (error?.stack) {\n        warningMsg += `\\n${error.stack}`;\n    }\n    log.warn(warningMsg);\n    if (emitter && emitter.listenerCount(\"error\") > 0) {\n        emitter.emit(\"error\", warningMsg);\n    }\n}\nconst getWindowId = ()=>Math.random().toString(36).slice(2);\nconst getTorusUrl = async (buildEnv)=>{\n    let torusUrl;\n    let logLevel;\n    // const versionUsed = version;\n    // log.info(\"solana embed version used: \", versionUsed);\n    switch(buildEnv){\n        case \"testing\":\n            torusUrl = \"https://solana-testing.tor.us\";\n            logLevel = \"debug\";\n            break;\n        case \"development\":\n            torusUrl = \"http://localhost:8080\";\n            logLevel = \"debug\";\n            break;\n        default:\n            torusUrl = `https://solana.tor.us`;\n            logLevel = \"error\";\n            break;\n    }\n    return {\n        torusUrl,\n        logLevel\n    };\n};\nconst getUserLanguage = ()=>{\n    let userLanguage = window.navigator.language || \"en-US\";\n    const userLanguages = userLanguage.split(\"-\");\n    userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n    return userLanguage;\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n    height: 660,\n    width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n    height: 740,\n    width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n    height: 700,\n    width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n    height: 600,\n    width: 400\n};\nfunction storageAvailable(type) {\n    let storage;\n    try {\n        storage = window[type];\n        const x = \"__storage_test__\";\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n    } catch (error) {\n        const e = error;\n        return e && // everything except Firefox\n        (e.code === 22 || // Firefox\n        e.code === 1014 || // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" || // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n        storage && storage.length !== 0;\n    }\n}\n/**\n * popup handler utils\n */ function getPopupFeatures(_ref) {\n    let { width: w, height: h } = _ref;\n    // Fixes dual-screen position                             Most browsers      Firefox\n    const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n    const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n    const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n    const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n    const systemZoom = 1; // No reliable estimate\n    const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n    const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n    const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n    return features;\n}\nclass BaseProvider extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.SafeEventEmitter {\n    constructor(connectionStream, _ref){\n        let { maxEventListeners = 100, jsonRpcStreamName = \"provider\" } = _ref;\n        super();\n        /**\n     * Indicating that this provider is a Torus provider.\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"isTorus\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"_rpcEngine\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"jsonRpcConnectionEvents\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"_state\", void 0);\n        if (!isDuplexStream(connectionStream)) {\n            throw new Error(messages.errors.invalidDuplexStream());\n        }\n        this.isTorus = true;\n        this.setMaxListeners(maxEventListeners);\n        this._handleConnect = this._handleConnect.bind(this);\n        this._handleDisconnect = this._handleDisconnect.bind(this);\n        this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n        this._rpcRequest = this._rpcRequest.bind(this);\n        this._initializeState = this._initializeState.bind(this);\n        this.request = this.request.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        // this.enable = this.enable.bind(this);\n        // setup connectionStream multiplexing\n        const mux = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.ObjectMultiplex();\n        pump__WEBPACK_IMPORTED_MODULE_7___default()(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\"));\n        // ignore phishing warning message (handled elsewhere)\n        mux.ignoreStream(\"phishing\");\n        // setup own event listeners\n        // connect to async provider\n        const jsonRpcConnection = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.createStreamMiddleware)();\n        pump__WEBPACK_IMPORTED_MODULE_7___default()(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\"));\n        // handle RPC requests via dapp-side rpc engine\n        const rpcEngine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.JRPCEngine();\n        rpcEngine.push((0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.createIdRemapMiddleware)());\n        rpcEngine.push(createErrorMiddleware());\n        rpcEngine.push((0,_toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.createLoggerMiddleware)({\n            origin: location.origin\n        }));\n        rpcEngine.push(jsonRpcConnection.middleware);\n        this._rpcEngine = rpcEngine;\n        this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n    }\n    /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */ async request(args) {\n        if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n            throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.ethErrors.rpc.invalidRequest({\n                message: messages.errors.invalidRequestArgs(),\n                data: args\n            });\n        }\n        const { method, params } = args;\n        if (typeof method !== \"string\" || method.length === 0) {\n            throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.ethErrors.rpc.invalidRequest({\n                message: messages.errors.invalidRequestMethod(),\n                data: args\n            });\n        }\n        if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n            throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.ethErrors.rpc.invalidRequest({\n                message: messages.errors.invalidRequestParams(),\n                data: args\n            });\n        }\n        return new Promise((resolve, reject)=>{\n            this._rpcRequest({\n                method,\n                params\n            }, (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.getRpcPromiseCallback)(resolve, reject));\n        });\n    }\n    /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */ send(payload, callback) {\n        this._rpcRequest(payload, callback);\n    }\n    /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */ sendAsync(payload) {\n        return new Promise((resolve, reject)=>{\n            this._rpcRequest(payload, (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.getRpcPromiseCallback)(resolve, reject));\n        });\n    }\n    /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */ _handleStreamDisconnect(streamName, error) {\n        logStreamDisconnectWarning(streamName, error, this);\n        this._handleDisconnect(false, error ? error.message : undefined);\n    }\n}\nconst htmlToElement = (html)=>{\n    const template = window.document.createElement(\"template\");\n    const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n    template.innerHTML = trimmedHtml;\n    return template.content.firstChild;\n};\nfunction isLegacyTransactionInstance(transaction) {\n    return transaction.version === undefined;\n}\nclass PopupHandler extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.SafeEventEmitter {\n    constructor(_ref){\n        let { url, target, features, timeout = 30000 } = _ref;\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"url\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"target\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"features\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"window\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"windowTimer\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"iClosedWindow\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"timeout\", void 0);\n        this.url = url;\n        this.target = target || \"_blank\";\n        this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n        this.window = undefined;\n        this.windowTimer = undefined;\n        this.iClosedWindow = false;\n        this.timeout = timeout;\n        this._setupTimer();\n    }\n    _setupTimer() {\n        this.windowTimer = Number(setInterval(()=>{\n            if (this.window && this.window.closed) {\n                clearInterval(this.windowTimer);\n                setTimeout(()=>{\n                    if (!this.iClosedWindow) {\n                        this.emit(\"close\");\n                    }\n                    this.iClosedWindow = false;\n                    this.window = undefined;\n                }, this.timeout);\n            }\n            if (this.window === undefined) clearInterval(this.windowTimer);\n        }, 500));\n    }\n    open() {\n        this.window = window.open(this.url.href, this.target, this.features);\n        if (this.window?.focus) this.window.focus();\n        return Promise.resolve();\n    }\n    close() {\n        this.iClosedWindow = true;\n        if (this.window) this.window.close();\n    }\n    redirect(locationReplaceOnRedirect) {\n        if (locationReplaceOnRedirect) {\n            window.location.replace(this.url.href);\n        } else {\n            window.location.href = this.url.href;\n        }\n    }\n}\nclass TorusCommunicationProvider extends BaseProvider {\n    constructor(connectionStream, _ref){\n        let { maxEventListeners = 100, jsonRpcStreamName = \"provider\" } = _ref;\n        super(connectionStream, {\n            maxEventListeners,\n            jsonRpcStreamName\n        });\n        // private state\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"embedTranslations\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusUrl\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"dappStorageKey\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"windowRefs\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"tryWindowHandle\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusAlertContainer\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusIframe\", void 0);\n        this._state = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, TorusCommunicationProvider._defaultState);\n        // public state\n        this.torusUrl = \"\";\n        this.dappStorageKey = \"\";\n        const languageTranslations = configuration.translations[getUserLanguage()];\n        this.embedTranslations = languageTranslations.embed;\n        this.windowRefs = {};\n        // setup own event listeners\n        // EIP-1193 connect\n        this.on(\"connect\", ()=>{\n            this._state.isConnected = true;\n        });\n        const notificationHandler = (payload)=>{\n            const { method, params } = payload;\n            if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n                const { isFullScreen, rid } = params;\n                this._displayIframe({\n                    isFull: isFullScreen,\n                    rid: rid\n                });\n            // TODO: remove this method when wallet adds versioning and stops supporting this method\n            } else if (method === \"create_window\") {\n                const { windowId, url } = params;\n                this._createPopupBlockAlert(windowId, url);\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n                this._handleCloseWindow(params);\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n                const { currentLoginProvider } = params;\n                this._state.isLoggedIn = true;\n                this._state.currentLoginProvider = currentLoginProvider;\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n                this._state.isLoggedIn = false;\n                this._state.currentLoginProvider = null;\n                this._displayIframe();\n            }\n        };\n        this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n    }\n    get isLoggedIn() {\n        return this._state.isLoggedIn;\n    }\n    get isIFrameFullScreen() {\n        return this._state.isIFrameFullScreen;\n    }\n    /**\n   * Returns whether the inPage provider is connected to Torus.\n   */ isConnected() {\n        return this._state.isConnected;\n    }\n    async _initializeState(params) {\n        try {\n            const { torusUrl, dappStorageKey, torusAlertContainer, torusIframe } = params;\n            this.torusUrl = torusUrl;\n            this.dappStorageKey = dappStorageKey;\n            this.torusAlertContainer = torusAlertContainer;\n            this.torusIframe = torusIframe;\n            this.torusIframe.addEventListener(\"load\", ()=>{\n                // only do this if iframe is not full screen\n                if (!this._state.isIFrameFullScreen) this._displayIframe();\n            });\n            const { currentLoginProvider, isLoggedIn } = await this.request({\n                method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n                params: []\n            });\n            // indicate that we've connected, for EIP-1193 compliance\n            this._handleConnect(currentLoginProvider, isLoggedIn);\n        } catch (error) {\n            log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n        } finally{\n            log.info(\"initialized communication state\");\n            this._state.initialized = true;\n            this.emit(\"_initialized\");\n        }\n    }\n    _handleWindow(windowId) {\n        let { url, target, features } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n        if (this.dappStorageKey) {\n            // If multiple instances, it returns the first one\n            if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;\n            else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n        }\n        const handledWindow = new PopupHandler({\n            url: finalUrl,\n            target,\n            features\n        });\n        handledWindow.open();\n        if (!handledWindow.window) {\n            this._createPopupBlockAlert(windowId, finalUrl.href);\n            return;\n        }\n        // Add to collection only if window is opened\n        this.windowRefs[windowId] = handledWindow;\n        // We tell the iframe that the window has been successfully opened\n        this.request({\n            method: \"opened_window\",\n            params: {\n                windowId\n            }\n        });\n        handledWindow.once(\"close\", ()=>{\n            // user closed the window\n            delete this.windowRefs[windowId];\n            this.request({\n                method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n                params: {\n                    windowId\n                }\n            });\n        });\n    }\n    _displayIframe() {\n        let { isFull = false, rid = \"\" } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const style = {};\n        // set phase\n        if (!isFull) {\n            style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n            style.height = \"70px\";\n            style.width = \"70px\";\n            switch(this._state.buttonPosition){\n                case BUTTON_POSITION.TOP_LEFT:\n                    style.top = \"0px\";\n                    style.left = \"0px\";\n                    style.right = \"auto\";\n                    style.bottom = \"auto\";\n                    break;\n                case BUTTON_POSITION.TOP_RIGHT:\n                    style.top = \"0px\";\n                    style.right = \"0px\";\n                    style.left = \"auto\";\n                    style.bottom = \"auto\";\n                    break;\n                case BUTTON_POSITION.BOTTOM_RIGHT:\n                    style.bottom = \"0px\";\n                    style.right = \"0px\";\n                    style.top = \"auto\";\n                    style.left = \"auto\";\n                    break;\n                case BUTTON_POSITION.BOTTOM_LEFT:\n                default:\n                    style.bottom = \"0px\";\n                    style.left = \"0px\";\n                    style.top = \"auto\";\n                    style.right = \"auto\";\n                    break;\n            }\n        } else {\n            style.display = \"block\";\n            style.width = \"100%\";\n            style.height = \"100%\";\n            style.top = \"0px\";\n            style.right = \"0px\";\n            style.left = \"0px\";\n            style.bottom = \"0px\";\n        }\n        Object.assign(this.torusIframe.style, style);\n        this._state.isIFrameFullScreen = isFull;\n        this.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n            params: {\n                isIFrameFullScreen: isFull,\n                rid\n            }\n        });\n    }\n    hideTorusButton() {\n        this._state.torusWidgetVisibility = false;\n        this._displayIframe();\n    }\n    showTorusButton() {\n        this._state.torusWidgetVisibility = true;\n        this._displayIframe();\n    }\n    /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */ _rpcRequest(payload, callback) {\n        const cb = callback;\n        const _payload = payload;\n        if (!Array.isArray(_payload)) {\n            if (!_payload.jsonrpc) {\n                _payload.jsonrpc = \"2.0\";\n            }\n        }\n        this.tryWindowHandle(_payload, cb);\n    }\n    /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */ _handleConnect(currentLoginProvider, isLoggedIn) {\n        if (!this._state.isConnected) {\n            this._state.isConnected = true;\n            this.emit(\"connect\", {\n                currentLoginProvider,\n                isLoggedIn\n            });\n            log.debug(messages.info.connected(currentLoginProvider));\n        }\n    }\n    /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */ _handleDisconnect(isRecoverable, errorMessage) {\n        if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n            this._state.isConnected = false;\n            let error;\n            if (isRecoverable) {\n                error = new eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.EthereumRpcError(1013, // Try again later\n                errorMessage || messages.errors.disconnected());\n                log.debug(error);\n            } else {\n                error = new eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.EthereumRpcError(1011, // Internal error\n                errorMessage || messages.errors.permanentlyDisconnected());\n                log.error(error);\n                this._state.currentLoginProvider = null;\n                this._state.isLoggedIn = false;\n                this._state.torusWidgetVisibility = false;\n                this._state.isIFrameFullScreen = false;\n                this._state.isPermanentlyDisconnected = true;\n            }\n            this.emit(\"disconnect\", error);\n        }\n    }\n    // Called if the iframe wants to close the window cause it is done processing the request\n    _handleCloseWindow(params) {\n        const { windowId } = params;\n        if (this.windowRefs[windowId]) {\n            this.windowRefs[windowId].close();\n            delete this.windowRefs[windowId];\n        }\n    }\n    async _createPopupBlockAlert(windowId, url) {\n        const logoUrl = this.getLogoUrl();\n        const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` + \"<div>\" + `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` + `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` + \"</div>\" + \"</div>\");\n        const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n        const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n        btnContainer.appendChild(successAlert);\n        torusAlert.appendChild(btnContainer);\n        const bindOnLoad = ()=>{\n            successAlert.addEventListener(\"click\", ()=>{\n                this._handleWindow(windowId, {\n                    url,\n                    target: \"_blank\",\n                    features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n                });\n                torusAlert.remove();\n                if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n            });\n        };\n        const attachOnLoad = ()=>{\n            this.torusAlertContainer.appendChild(torusAlert);\n        };\n        attachOnLoad();\n        bindOnLoad();\n        this.torusAlertContainer.style.display = \"block\";\n    }\n    getLogoUrl() {\n        const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n        return logoUrl;\n    }\n}\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(TorusCommunicationProvider, \"_defaultState\", {\n    buttonPosition: \"bottom-left\",\n    currentLoginProvider: null,\n    isIFrameFullScreen: false,\n    hasEmittedConnection: false,\n    torusWidgetVisibility: false,\n    initialized: false,\n    isLoggedIn: false,\n    isPermanentlyDisconnected: false,\n    isConnected: false\n});\nclass TorusInPageProvider extends BaseProvider {\n    constructor(connectionStream, _ref){\n        let { maxEventListeners = 100, jsonRpcStreamName = \"provider\" } = _ref;\n        super(connectionStream, {\n            maxEventListeners,\n            jsonRpcStreamName\n        });\n        // private state\n        /**\n     * The chain ID of the currently connected Solana chain.\n     * See [chainId.network]{@link https://chainid.network} for more information.\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"chainId\", void 0);\n        /**\n     * The user's currently selected Solana address.\n     * If null, Torus is either locked or the user has not permitted any\n     * addresses to be viewed.\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"selectedAddress\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"tryWindowHandle\", void 0);\n        this._state = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, TorusInPageProvider._defaultState);\n        // public state\n        this.selectedAddress = null;\n        this.chainId = null;\n        this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n        this._handleChainChanged = this._handleChainChanged.bind(this);\n        this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n        // setup own event listeners\n        // EIP-1193 connect\n        this.on(\"connect\", ()=>{\n            this._state.isConnected = true;\n        });\n        const jsonRpcNotificationHandler = (payload)=>{\n            const { method, params } = payload;\n            if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n                this._handleAccountsChanged(params);\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n                this._handleUnlockStateChanged(params);\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n                this._handleChainChanged(params);\n            }\n        };\n        // json rpc notification listener\n        this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n    }\n    /**\n   * Returns whether the inpage provider is connected to Torus.\n   */ isConnected() {\n        return this._state.isConnected;\n    }\n    // Private Methods\n    //= ===================\n    /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */ async _initializeState() {\n        try {\n            const { accounts, chainId, isUnlocked } = await this.request({\n                method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n                params: []\n            });\n            // indicate that we've connected, for EIP-1193 compliance\n            this.emit(\"connect\", {\n                chainId\n            });\n            this._handleChainChanged({\n                chainId\n            });\n            this._handleUnlockStateChanged({\n                accounts,\n                isUnlocked\n            });\n            this._handleAccountsChanged(accounts);\n        } catch (error) {\n            log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n        } finally{\n            log.info(\"initialized provider state\");\n            this._state.initialized = true;\n            this.emit(\"_initialized\");\n        }\n    }\n    /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */ _rpcRequest(payload, callback) {\n        let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        let cb = callback;\n        const _payload = payload;\n        if (!Array.isArray(_payload)) {\n            if (!_payload.jsonrpc) {\n                _payload.jsonrpc = \"2.0\";\n            }\n            if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n                // handle accounts changing\n                cb = (err, res)=>{\n                    this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n                    callback(err, res);\n                };\n            } else if (_payload.method === \"wallet_getProviderState\") {\n                this._rpcEngine.handle(payload, cb);\n                return;\n            }\n        }\n        this.tryWindowHandle(_payload, cb);\n    }\n    /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */ _handleConnect(chainId) {\n        if (!this._state.isConnected) {\n            this._state.isConnected = true;\n            this.emit(\"connect\", {\n                chainId\n            });\n            log.debug(messages.info.connected(chainId));\n        }\n    }\n    /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */ _handleDisconnect(isRecoverable, errorMessage) {\n        if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n            this._state.isConnected = false;\n            let error;\n            if (isRecoverable) {\n                error = new eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.EthereumRpcError(1013, // Try again later\n                errorMessage || messages.errors.disconnected());\n                log.debug(error);\n            } else {\n                error = new eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.EthereumRpcError(1011, // Internal error\n                errorMessage || messages.errors.permanentlyDisconnected());\n                log.error(error);\n                this.chainId = null;\n                this._state.accounts = null;\n                this.selectedAddress = null;\n                this._state.isUnlocked = false;\n                this._state.isPermanentlyDisconnected = true;\n            }\n            this.emit(\"disconnect\", error);\n        }\n    }\n    /**\n   * Called when accounts may have changed.\n   */ _handleAccountsChanged(accounts) {\n        let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        // defensive programming\n        let finalAccounts = accounts;\n        if (!Array.isArray(finalAccounts)) {\n            log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n            finalAccounts = [];\n        }\n        for (const account of accounts){\n            if (typeof account !== \"string\") {\n                log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n                finalAccounts = [];\n                break;\n            }\n        }\n        // emit accountsChanged if anything about the accounts array has changed\n        if (!fast_deep_equal__WEBPACK_IMPORTED_MODULE_9___default()(this._state.accounts, finalAccounts)) {\n            // we should always have the correct accounts even before solana_accounts\n            // returns, except in cases where isInternal is true\n            if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n                log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n            }\n            this._state.accounts = finalAccounts;\n            this.emit(\"accountsChanged\", finalAccounts);\n        }\n        // handle selectedAddress\n        if (this.selectedAddress !== finalAccounts[0]) {\n            this.selectedAddress = finalAccounts[0] || null;\n        }\n    }\n    /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */ _handleChainChanged() {\n        let { chainId } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (!chainId) {\n            log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n                chainId\n            });\n            return;\n        }\n        if (chainId === \"loading\") {\n            this._handleDisconnect(true);\n        } else {\n            this._handleConnect(chainId);\n            if (chainId !== this.chainId) {\n                this.chainId = chainId;\n                if (this._state.initialized) {\n                    this.emit(\"chainChanged\", this.chainId);\n                }\n            }\n        }\n    }\n    /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */ _handleUnlockStateChanged() {\n        let { accounts, isUnlocked } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (typeof isUnlocked !== \"boolean\") {\n            log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n                isUnlocked\n            });\n            return;\n        }\n        if (isUnlocked !== this._state.isUnlocked) {\n            this._state.isUnlocked = isUnlocked;\n            this._handleAccountsChanged(accounts || []);\n        }\n    }\n}\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(TorusInPageProvider, \"_defaultState\", {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false\n});\n/**\n * Returns whether the given image URL exists\n */ function imgExists(url) {\n    return new Promise((resolve, reject)=>{\n        try {\n            const img = document.createElement(\"img\");\n            img.onload = ()=>resolve(true);\n            img.onerror = ()=>resolve(false);\n            img.src = url;\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\n/**\n * Extracts a name for the site from the DOM\n */ const getSiteName = (window1)=>{\n    const { document: document1 } = window1;\n    const siteName = document1.querySelector('head > meta[property=\"og:site_name\"]');\n    if (siteName) {\n        return siteName.content;\n    }\n    const metaTitle = document1.querySelector('head > meta[name=\"title\"]');\n    if (metaTitle) {\n        return metaTitle.content;\n    }\n    if (document1.title && document1.title.length > 0) {\n        return document1.title;\n    }\n    return window1.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */ async function getSiteIcon(window1) {\n    try {\n        const { document: document1 } = window1;\n        // Use the site's favicon if it exists\n        let icon = document1.querySelector('head > link[rel=\"shortcut icon\"]');\n        if (icon && await imgExists(icon.href)) {\n            return icon.href;\n        }\n        // Search through available icons in no particular order\n        icon = Array.from(document1.querySelectorAll('head > link[rel=\"icon\"]')).find((_icon)=>Boolean(_icon.href));\n        if (icon && await imgExists(icon.href)) {\n            return icon.href;\n        }\n        return \"\";\n    } catch (error) {\n        return \"\";\n    }\n}\n/**\n * Gets site metadata and returns it\n *\n */ const getSiteMetadata = async ()=>({\n        name: getSiteName(window),\n        icon: await getSiteIcon(window)\n    });\nconst PROVIDER_UNSAFE_METHODS = [\n    \"send_transaction\",\n    \"sign_transaction\",\n    \"sign_all_transactions\",\n    \"sign_message\",\n    \"connect\"\n];\nconst COMMUNICATION_UNSAFE_METHODS = [\n    _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.SET_PROVIDER\n];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n    try {\n        if (typeof document === \"undefined\") return;\n        const torusIframeHtml = document.createElement(\"link\");\n        const { torusUrl } = await getTorusUrl(\"production\");\n        torusIframeHtml.href = `${torusUrl}/frame`;\n        torusIframeHtml.crossOrigin = \"anonymous\";\n        torusIframeHtml.type = \"text/html\";\n        torusIframeHtml.rel = \"prefetch\";\n        if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n            if (torusIframeHtml.relList.supports(\"prefetch\")) {\n                document.head.appendChild(torusIframeHtml);\n            }\n        }\n    } catch (error) {\n        log.warn(error);\n    }\n})();\nclass Torus {\n    constructor(){\n        let { modalZIndex = 99999 } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"isInitialized\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusAlert\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"modalZIndex\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"alertZIndex\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"requestedLoginProvider\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"provider\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"communicationProvider\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"dappStorageKey\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"isTopupHidden\", false);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusAlertContainer\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusUrl\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusIframe\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"styleLink\", void 0);\n        this.torusUrl = \"\";\n        this.isInitialized = false; // init done\n        this.requestedLoginProvider = null;\n        this.modalZIndex = modalZIndex;\n        this.alertZIndex = modalZIndex + 1000;\n        this.dappStorageKey = \"\";\n    }\n    get isLoggedIn() {\n        if (!this.communicationProvider) return false;\n        return this.communicationProvider.isLoggedIn;\n    }\n    async init() {\n        let { buildEnv = TORUS_BUILD_ENV.PRODUCTION, enableLogging = false, network, showTorusButton = false, useLocalStorage = false, buttonPosition = BUTTON_POSITION.BOTTOM_LEFT, apiKey = \"torus-default\", extraParams = {}, whiteLabel } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (this.isInitialized) throw new Error(\"Already initialized\");\n        (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_4__.setAPIKey)(apiKey);\n        const { torusUrl, logLevel } = await getTorusUrl(buildEnv);\n        log.enableAll();\n        log.info(torusUrl, \"url loaded\");\n        log.info(`Solana Embed Version :${version}`);\n        this.torusUrl = torusUrl;\n        log.setDefaultLevel(logLevel);\n        if (enableLogging) log.enableAll();\n        else log.disableAll();\n        const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n        const torusIframeUrl = new URL(torusUrl);\n        if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";\n        else torusIframeUrl.pathname += \"/frame\";\n        const hashParams = new URLSearchParams();\n        if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n        hashParams.append(\"origin\", window.location.origin);\n        torusIframeUrl.hash = hashParams.toString();\n        // Iframe code\n        this.torusIframe = htmlToElement(`<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`);\n        this.torusAlertContainer = htmlToElement(`<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`);\n        this.styleLink = htmlToElement(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n        return new Promise((resolve, reject)=>{\n            try {\n                this.torusIframe.addEventListener(\"load\", async ()=>{\n                    const dappMetadata = await getSiteMetadata();\n                    // send init params here\n                    this.torusIframe.contentWindow.postMessage({\n                        buttonPosition,\n                        apiKey,\n                        network,\n                        dappMetadata,\n                        extraParams,\n                        whiteLabel\n                    }, torusIframeUrl.origin);\n                    await this._setupWeb3({\n                        torusUrl\n                    });\n                    if (showTorusButton) this.showTorusButton();\n                    if (whiteLabel?.topupHide) this.isTopupHidden = whiteLabel.topupHide;\n                    else this.hideTorusButton();\n                    this.isInitialized = true;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    window.torus = this;\n                    resolve();\n                });\n                window.document.head.appendChild(this.styleLink);\n                window.document.body.appendChild(this.torusIframe);\n                window.document.body.appendChild(this.torusAlertContainer);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n    async login() {\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (!this.isInitialized) throw new Error(\"Call init() first\");\n        try {\n            this.requestedLoginProvider = params.loginProvider || null;\n            if (!this.requestedLoginProvider) {\n                this.communicationProvider._displayIframe({\n                    isFull: true\n                });\n            }\n            // If user is already logged in, we assume they have given access to the website\n            const res = await new Promise((resolve, reject)=>{\n                // We use this method because we want to update inPage provider state with account info\n                this.provider._rpcRequest({\n                    method: \"solana_requestAccounts\",\n                    params: [\n                        this.requestedLoginProvider,\n                        params.login_hint\n                    ]\n                }, (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.getRpcPromiseCallback)(resolve, reject));\n            });\n            if (Array.isArray(res) && res.length > 0) {\n                return res;\n            }\n            // This would never happen, but just in case\n            throw new Error(\"Login failed\");\n        } catch (error) {\n            log.error(\"login failed\", error);\n            throw error;\n        } finally{\n            if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n        }\n    }\n    async loginWithPrivateKey(loginParams) {\n        if (!this.isInitialized) throw new Error(\"Call init() first\");\n        const { privateKey, userInfo } = loginParams;\n        const { success } = await this.communicationProvider.request({\n            method: \"login_with_private_key\",\n            params: {\n                privateKey,\n                userInfo\n            }\n        });\n        if (!success) throw new Error(\"Login Failed\");\n    }\n    async logout() {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n        await this.communicationProvider.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.LOGOUT,\n            params: []\n        });\n        this.requestedLoginProvider = null;\n    }\n    async cleanUp() {\n        if (this.communicationProvider.isLoggedIn) {\n            await this.logout();\n        }\n        this.clearInit();\n    }\n    clearInit() {\n        function isElement(element) {\n            return element instanceof Element || element instanceof Document;\n        }\n        if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n            this.styleLink.remove();\n            this.styleLink = undefined;\n        }\n        if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n            this.torusIframe.remove();\n            this.torusIframe = undefined;\n        }\n        if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n            this.torusAlert = undefined;\n            this.torusAlertContainer.remove();\n            this.torusAlertContainer = undefined;\n        }\n        this.isInitialized = false;\n    }\n    hideTorusButton() {\n        this.communicationProvider.hideTorusButton();\n    }\n    showTorusButton() {\n        this.communicationProvider.showTorusButton();\n    }\n    async setProvider(params) {\n        await this.communicationProvider.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n            params: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, params)\n        });\n    }\n    async showWallet(path) {\n        let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const instanceId = await this.communicationProvider.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n            params: []\n        });\n        const finalPath = path ? `/${path}` : \"\";\n        const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n        // Using URL constructor to prevent js injection and allow parameter validation.!\n        finalUrl.searchParams.append(\"instanceId\", instanceId);\n        Object.keys(params).forEach((x)=>{\n            finalUrl.searchParams.append(x, params[x]);\n        });\n        if (this.dappStorageKey) {\n            finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n        }\n        // No need to track this window state. Hence, no _handleWindow call.\n        const walletWindow = new PopupHandler({\n            url: finalUrl,\n            features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n        });\n        walletWindow.open();\n    }\n    async getUserInfo() {\n        const userInfoResponse = await this.communicationProvider.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.USER_INFO,\n            params: []\n        });\n        return userInfoResponse;\n    }\n    async initiateTopup(provider, params) {\n        if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n        const windowId = getWindowId();\n        this.communicationProvider._handleWindow(windowId);\n        const topupResponse = await this.communicationProvider.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.TOPUP,\n            params: {\n                provider,\n                params,\n                windowId\n            }\n        });\n        return topupResponse;\n    }\n    // Solana specific API\n    async getAccounts() {\n        const response = await this.provider.request({\n            method: \"getAccounts\",\n            params: []\n        });\n        return response;\n    }\n    async sendTransaction(transaction) {\n        const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n        const message = isLegacyTransaction ? transaction.serialize({\n            requireAllSignatures: false\n        }).toString(\"hex\") : Buffer.from(transaction.serialize()).toString(\"hex\");\n        const response = await this.provider.request({\n            method: \"send_transaction\",\n            params: {\n                message,\n                isLegacyTransaction\n            }\n        });\n        return response;\n    }\n    // support sendOptions\n    async signAndSendTransaction(transaction, options) {\n        const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n        const message = isLegacyTransaction ? transaction.serialize({\n            requireAllSignatures: false\n        }).toString(\"hex\") : Buffer.from(transaction.serialize()).toString(\"hex\");\n        const response = await this.provider.request({\n            method: \"send_transaction\",\n            params: {\n                message,\n                options,\n                isLegacyTransaction\n            }\n        });\n        return {\n            signature: response\n        };\n    }\n    async signTransaction(transaction) {\n        const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n        const message = isLegacyTransaction ? transaction.serializeMessage().toString(\"hex\") : Buffer.from(transaction.message.serialize()).toString(\"hex\");\n        const response = await this.provider.request({\n            method: \"sign_transaction\",\n            params: {\n                message,\n                messageOnly: true,\n                isLegacyTransaction\n            }\n        });\n        // reconstruct signature pair\n        const parsed = JSON.parse(response);\n        const signature = {\n            publicKey: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.PublicKey(parsed.publicKey),\n            signature: Buffer.from(parsed.signature, \"hex\")\n        };\n        transaction.addSignature(signature.publicKey, signature.signature);\n        return transaction;\n    }\n    async signAllTransactions(transactions) {\n        let isLegacyTransaction;\n        const encodedMessage = transactions.map((tx)=>{\n            isLegacyTransaction = isLegacyTransactionInstance(tx);\n            return isLegacyTransaction ? tx.serializeMessage().toString(\"hex\") : Buffer.from(tx.message.serialize()).toString(\"hex\");\n        });\n        const responses = await this.provider.request({\n            method: \"sign_all_transactions\",\n            params: {\n                message: encodedMessage,\n                messageOnly: true,\n                isLegacyTransaction\n            }\n        });\n        // reconstruct signature pairs\n        const signatures = responses.map((item)=>{\n            const parsed = JSON.parse(item);\n            return {\n                publicKey: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.PublicKey(parsed.publicKey),\n                signature: Buffer.from(parsed.signature, \"hex\")\n            };\n        });\n        transactions.forEach((tx, idx)=>{\n            tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n            return tx;\n        });\n        return transactions;\n    }\n    async signMessage(data) {\n        const response = await this.provider.request({\n            method: \"sign_message\",\n            params: {\n                data\n            }\n        });\n        return response;\n    }\n    async getGaslessPublicKey() {\n        const response = await this.provider.request({\n            method: \"get_gasless_public_key\",\n            params: []\n        });\n        return response;\n    }\n    // async connect(): Promise<boolean> {\n    //   const response = (await this.provider.request({\n    //     method: \"connect\",\n    //     params: {},\n    //   })) as boolean;\n    //   return response;\n    // }\n    handleDappStorageKey(useLocalStorage) {\n        const localStorageKey = `${configuration.localStorageKeyPrefix}${window.location.hostname}`;\n        let dappStorageKey = \"\";\n        if (isLocalStorageAvailable && useLocalStorage) {\n            const storedKey = window.localStorage.getItem(localStorageKey);\n            if (storedKey) dappStorageKey = storedKey;\n            else {\n                const generatedKey = `torus-app-${getWindowId()}`;\n                window.localStorage.setItem(localStorageKey, generatedKey);\n                dappStorageKey = generatedKey;\n            }\n        }\n        this.dappStorageKey = dappStorageKey;\n        return dappStorageKey;\n    }\n    async _setupWeb3(providerParams) {\n        log.info(\"setupWeb3 running\");\n        // setup background connection\n        const providerStream = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.BasePostMessageStream({\n            name: \"embed_torus\",\n            target: \"iframe_torus\",\n            targetWindow: this.torusIframe.contentWindow\n        });\n        // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n        const communicationStream = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.BasePostMessageStream({\n            name: \"embed_communication\",\n            target: \"iframe_communication\",\n            targetWindow: this.torusIframe.contentWindow\n        });\n        // compose the inPage provider\n        const inPageProvider = new TorusInPageProvider(providerStream, {});\n        const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n        inPageProvider.tryWindowHandle = (payload, cb)=>{\n            const _payload = payload;\n            if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n                if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n                const windowId = getWindowId();\n                communicationProvider._handleWindow(windowId, {\n                    target: \"_blank\",\n                    features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n                });\n                // for inPageProvider methods sending windowId in request instead of params\n                // as params might be positional.\n                _payload.windowId = windowId;\n            }\n            inPageProvider._rpcEngine.handle(_payload, cb);\n        };\n        communicationProvider.tryWindowHandle = (payload, cb)=>{\n            const _payload = payload;\n            if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n                const windowId = getWindowId();\n                communicationProvider._handleWindow(windowId, {\n                    target: \"_blank\",\n                    features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n                });\n                // for communication methods sending window id in jrpc req params\n                _payload.params.windowId = windowId;\n            }\n            communicationProvider._rpcEngine.handle(_payload, cb);\n        };\n        // detect solana_requestAccounts and pipe to enable for now\n        const detectAccountRequestPrototypeModifier = (m)=>{\n            const originalMethod = inPageProvider[m];\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const self = this;\n            inPageProvider[m] = function providerFunc(request, cb) {\n                const { method, params = [] } = request;\n                if (method === \"solana_requestAccounts\") {\n                    if (!cb) return self.login({\n                        loginProvider: params[0]\n                    });\n                    self.login({\n                        loginProvider: params[0]\n                    })// eslint-disable-next-line promise/no-callback-in-promise\n                    .then((res)=>cb(null, res))// eslint-disable-next-line promise/no-callback-in-promise\n                    .catch((err)=>cb(err));\n                }\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                return originalMethod.apply(this, [\n                    request,\n                    cb\n                ]);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            };\n        };\n        // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n        detectAccountRequestPrototypeModifier(\"request\");\n        detectAccountRequestPrototypeModifier(\"sendAsync\");\n        detectAccountRequestPrototypeModifier(\"send\");\n        const proxiedInPageProvider = new Proxy(inPageProvider, {\n            // straight up lie that we deleted the property so that it doesn't\n            // throw an error in strict mode\n            deleteProperty: ()=>true\n        });\n        const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n            // straight up lie that we deleted the property so that it doesn't\n            // throw an error in strict mode\n            deleteProperty: ()=>true\n        });\n        this.provider = proxiedInPageProvider;\n        this.communicationProvider = proxiedCommunicationProvider;\n        await Promise.all([\n            inPageProvider._initializeState(),\n            communicationProvider._initializeState(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, providerParams), {}, {\n                dappStorageKey: this.dappStorageKey,\n                torusAlertContainer: this.torusAlertContainer,\n                torusIframe: this.torusIframe\n            }))\n        ]);\n        log.debug(\"Torus - injected provider\");\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/solana-embed/dist/solanaEmbed.esm.js\n");

/***/ })

};
;