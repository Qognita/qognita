"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ethereumjs";
exports.ids = ["vendor-chunks/@ethereumjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@ethereumjs/rlp/dist/esm/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@ethereumjs/rlp/dist/esm/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RLP: () => (/* binding */ RLP),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   utils: () => (/* binding */ utils)\n/* harmony export */ });\n/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/ function encode(input) {\n    if (Array.isArray(input)) {\n        const output = [];\n        let outputLength = 0;\n        for(let i = 0; i < input.length; i++){\n            const encoded = encode(input[i]);\n            output.push(encoded);\n            outputLength += encoded.length;\n        }\n        return concatBytes(encodeLength(outputLength, 192), ...output);\n    }\n    const inputBuf = toBytes(input);\n    if (inputBuf.length === 1 && inputBuf[0] < 128) {\n        return inputBuf;\n    }\n    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */ function safeSlice(input, start, end) {\n    if (end > input.length) {\n        throw new Error(\"invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds\");\n    }\n    return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */ function decodeLength(v) {\n    if (v[0] === 0) {\n        throw new Error(\"invalid RLP: extra zeros\");\n    }\n    return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Uint8Array.from([\n            len + offset\n        ]);\n    }\n    const hexLength = numberToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = numberToHex(offset + 55 + lLength);\n    return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nfunction decode(input, stream = false) {\n    if (typeof input === \"undefined\" || input === null || input.length === 0) {\n        return Uint8Array.from([]);\n    }\n    const inputBytes = toBytes(input);\n    const decoded = _decode(inputBytes);\n    if (stream) {\n        return {\n            data: decoded.data,\n            remainder: decoded.remainder.slice()\n        };\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error(\"invalid RLP: remainder must be zero\");\n    }\n    return decoded.data;\n}\n/** Decode an input with RLP */ function _decode(input) {\n    let length, llength, data, innerRemainder, d;\n    const decoded = [];\n    const firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.subarray(1)\n        };\n    } else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Uint8Array.from([]);\n        } else {\n            data = safeSlice(input, 1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error(\"invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed\");\n        }\n        return {\n            data,\n            remainder: input.subarray(length)\n        };\n    } else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error(\"invalid RLP: not enough bytes for string length\");\n        }\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length <= 55) {\n            throw new Error(\"invalid RLP: expected string length to be greater than 55\");\n        }\n        data = safeSlice(input, llength, length + llength);\n        return {\n            data,\n            remainder: input.subarray(length + llength)\n        };\n    } else if (firstByte <= 0xf7) {\n        // a list between 0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = safeSlice(input, 1, length);\n        while(innerRemainder.length){\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.subarray(length)\n        };\n    } else {\n        // a list over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length < 56) {\n            throw new Error(\"invalid RLP: encoded list too short\");\n        }\n        const totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error(\"invalid RLP: total length is larger than the data\");\n        }\n        innerRemainder = safeSlice(input, llength, totalLength);\n        while(innerRemainder.length){\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.subarray(totalLength)\n        };\n    }\n}\nconst cachedHexes = Array.from({\n    length: 256\n}, (_v, i)=>i.toString(16).padStart(2, \"0\"));\nfunction bytesToHex(uint8a) {\n    // Pre-caching chars with `cachedHexes` speeds this up 6x\n    let hex = \"\";\n    for(let i = 0; i < uint8a.length; i++){\n        hex += cachedHexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte)) throw new Error(\"Invalid byte sequence\");\n    return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n    if (typeof hex !== \"string\") {\n        throw new TypeError(\"hexToBytes: expected string, got \" + typeof hex);\n    }\n    if (hex.length % 2) throw new Error(\"hexToBytes: received invalid unpadded hex\");\n    const array = new Uint8Array(hex.length / 2);\n    for(let i = 0; i < array.length; i++){\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\n/** Concatenates two Uint8Arrays into one. */ function concatBytes(...arrays) {\n    if (arrays.length === 1) return arrays[0];\n    const length = arrays.reduce((a, arr)=>a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for(let i = 0, pad = 0; i < arrays.length; i++){\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction utf8ToBytes(utf) {\n    return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */ function numberToHex(integer) {\n    if (integer < 0) {\n        throw new Error(\"Invalid integer as argument, must be unsigned!\");\n    }\n    const hex = integer.toString(16);\n    return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */ function padToEven(a) {\n    return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */ function isHexPrefixed(str) {\n    return str.length >= 2 && str[0] === \"0\" && str[1] === \"x\";\n}\n/** Removes 0x from a given String */ function stripHexPrefix(str) {\n    if (typeof str !== \"string\") {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */ function toBytes(v) {\n    if (v instanceof Uint8Array) {\n        return v;\n    }\n    if (typeof v === \"string\") {\n        if (isHexPrefixed(v)) {\n            return hexToBytes(padToEven(stripHexPrefix(v)));\n        }\n        return utf8ToBytes(v);\n    }\n    if (typeof v === \"number\" || typeof v === \"bigint\") {\n        if (!v) {\n            return Uint8Array.from([]);\n        }\n        return hexToBytes(numberToHex(v));\n    }\n    if (v === null || v === undefined) {\n        return Uint8Array.from([]);\n    }\n    throw new Error(\"toBytes: received unsupported type \" + typeof v);\n}\nconst utils = {\n    bytesToHex,\n    concatBytes,\n    hexToBytes,\n    utf8ToBytes\n};\nconst RLP = {\n    encode,\n    decode\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvcmxwL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7O0VBTUUsR0FDSyxTQUFTQSxPQUFPQyxLQUFLO0lBQ3hCLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0YsUUFBUTtRQUN0QixNQUFNRyxTQUFTLEVBQUU7UUFDakIsSUFBSUMsZUFBZTtRQUNuQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsTUFBTU0sTUFBTSxFQUFFRCxJQUFLO1lBQ25DLE1BQU1FLFVBQVVSLE9BQU9DLEtBQUssQ0FBQ0ssRUFBRTtZQUMvQkYsT0FBT0ssSUFBSSxDQUFDRDtZQUNaSCxnQkFBZ0JHLFFBQVFELE1BQU07UUFDbEM7UUFDQSxPQUFPRyxZQUFZQyxhQUFhTixjQUFjLFNBQVNEO0lBQzNEO0lBQ0EsTUFBTVEsV0FBV0MsUUFBUVo7SUFDekIsSUFBSVcsU0FBU0wsTUFBTSxLQUFLLEtBQUtLLFFBQVEsQ0FBQyxFQUFFLEdBQUcsS0FBSztRQUM1QyxPQUFPQTtJQUNYO0lBQ0EsT0FBT0YsWUFBWUMsYUFBYUMsU0FBU0wsTUFBTSxFQUFFLE1BQU1LO0FBQzNEO0FBQ0E7Ozs7OztDQU1DLEdBQ0QsU0FBU0UsVUFBVWIsS0FBSyxFQUFFYyxLQUFLLEVBQUVDLEdBQUc7SUFDaEMsSUFBSUEsTUFBTWYsTUFBTU0sTUFBTSxFQUFFO1FBQ3BCLE1BQU0sSUFBSVUsTUFBTTtJQUNwQjtJQUNBLE9BQU9oQixNQUFNaUIsS0FBSyxDQUFDSCxPQUFPQztBQUM5QjtBQUNBOzs7Q0FHQyxHQUNELFNBQVNHLGFBQWFDLENBQUM7SUFDbkIsSUFBSUEsQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHO1FBQ1osTUFBTSxJQUFJSCxNQUFNO0lBQ3BCO0lBQ0EsT0FBT0ksYUFBYUMsV0FBV0Y7QUFDbkM7QUFDQSxTQUFTVCxhQUFhWSxHQUFHLEVBQUVDLE1BQU07SUFDN0IsSUFBSUQsTUFBTSxJQUFJO1FBQ1YsT0FBT0UsV0FBV0MsSUFBSSxDQUFDO1lBQUNILE1BQU1DO1NBQU87SUFDekM7SUFDQSxNQUFNRyxZQUFZQyxZQUFZTDtJQUM5QixNQUFNTSxVQUFVRixVQUFVcEIsTUFBTSxHQUFHO0lBQ25DLE1BQU11QixZQUFZRixZQUFZSixTQUFTLEtBQUtLO0lBQzVDLE9BQU9KLFdBQVdDLElBQUksQ0FBQ0ssV0FBV0QsWUFBWUg7QUFDbEQ7QUFDTyxTQUFTSyxPQUFPL0IsS0FBSyxFQUFFZ0MsU0FBUyxLQUFLO0lBQ3hDLElBQUksT0FBT2hDLFVBQVUsZUFBZUEsVUFBVSxRQUFRQSxNQUFNTSxNQUFNLEtBQUssR0FBRztRQUN0RSxPQUFPa0IsV0FBV0MsSUFBSSxDQUFDLEVBQUU7SUFDN0I7SUFDQSxNQUFNUSxhQUFhckIsUUFBUVo7SUFDM0IsTUFBTWtDLFVBQVVDLFFBQVFGO0lBQ3hCLElBQUlELFFBQVE7UUFDUixPQUFPO1lBQ0hJLE1BQU1GLFFBQVFFLElBQUk7WUFDbEJDLFdBQVdILFFBQVFHLFNBQVMsQ0FBQ3BCLEtBQUs7UUFDdEM7SUFDSjtJQUNBLElBQUlpQixRQUFRRyxTQUFTLENBQUMvQixNQUFNLEtBQUssR0FBRztRQUNoQyxNQUFNLElBQUlVLE1BQU07SUFDcEI7SUFDQSxPQUFPa0IsUUFBUUUsSUFBSTtBQUN2QjtBQUNBLDZCQUE2QixHQUM3QixTQUFTRCxRQUFRbkMsS0FBSztJQUNsQixJQUFJTSxRQUFRZ0MsU0FBU0YsTUFBTUcsZ0JBQWdCQztJQUMzQyxNQUFNTixVQUFVLEVBQUU7SUFDbEIsTUFBTUwsWUFBWTdCLEtBQUssQ0FBQyxFQUFFO0lBQzFCLElBQUk2QixhQUFhLE1BQU07UUFDbkIsNkZBQTZGO1FBQzdGLE9BQU87WUFDSE8sTUFBTXBDLE1BQU1pQixLQUFLLENBQUMsR0FBRztZQUNyQm9CLFdBQVdyQyxNQUFNeUMsUUFBUSxDQUFDO1FBQzlCO0lBQ0osT0FDSyxJQUFJWixhQUFhLE1BQU07UUFDeEIsZ0hBQWdIO1FBQ2hILDhDQUE4QztRQUM5Q3ZCLFNBQVN1QixZQUFZO1FBQ3JCLHFCQUFxQjtRQUNyQixJQUFJQSxjQUFjLE1BQU07WUFDcEJPLE9BQU9aLFdBQVdDLElBQUksQ0FBQyxFQUFFO1FBQzdCLE9BQ0s7WUFDRFcsT0FBT3ZCLFVBQVViLE9BQU8sR0FBR007UUFDL0I7UUFDQSxJQUFJQSxXQUFXLEtBQUs4QixJQUFJLENBQUMsRUFBRSxHQUFHLE1BQU07WUFDaEMsTUFBTSxJQUFJcEIsTUFBTTtRQUNwQjtRQUNBLE9BQU87WUFDSG9CO1lBQ0FDLFdBQVdyQyxNQUFNeUMsUUFBUSxDQUFDbkM7UUFDOUI7SUFDSixPQUNLLElBQUl1QixhQUFhLE1BQU07UUFDeEIsMkdBQTJHO1FBQzNHLGlEQUFpRDtRQUNqRFMsVUFBVVQsWUFBWTtRQUN0QixJQUFJN0IsTUFBTU0sTUFBTSxHQUFHLElBQUlnQyxTQUFTO1lBQzVCLE1BQU0sSUFBSXRCLE1BQU07UUFDcEI7UUFDQVYsU0FBU1ksYUFBYUwsVUFBVWIsT0FBTyxHQUFHc0M7UUFDMUMsSUFBSWhDLFVBQVUsSUFBSTtZQUNkLE1BQU0sSUFBSVUsTUFBTTtRQUNwQjtRQUNBb0IsT0FBT3ZCLFVBQVViLE9BQU9zQyxTQUFTaEMsU0FBU2dDO1FBQzFDLE9BQU87WUFDSEY7WUFDQUMsV0FBV3JDLE1BQU15QyxRQUFRLENBQUNuQyxTQUFTZ0M7UUFDdkM7SUFDSixPQUNLLElBQUlULGFBQWEsTUFBTTtRQUN4QixpQ0FBaUM7UUFDakN2QixTQUFTdUIsWUFBWTtRQUNyQlUsaUJBQWlCMUIsVUFBVWIsT0FBTyxHQUFHTTtRQUNyQyxNQUFPaUMsZUFBZWpDLE1BQU0sQ0FBRTtZQUMxQmtDLElBQUlMLFFBQVFJO1lBQ1pMLFFBQVExQixJQUFJLENBQUNnQyxFQUFFSixJQUFJO1lBQ25CRyxpQkFBaUJDLEVBQUVILFNBQVM7UUFDaEM7UUFDQSxPQUFPO1lBQ0hELE1BQU1GO1lBQ05HLFdBQVdyQyxNQUFNeUMsUUFBUSxDQUFDbkM7UUFDOUI7SUFDSixPQUNLO1FBQ0QsNEJBQTRCO1FBQzVCZ0MsVUFBVVQsWUFBWTtRQUN0QnZCLFNBQVNZLGFBQWFMLFVBQVViLE9BQU8sR0FBR3NDO1FBQzFDLElBQUloQyxTQUFTLElBQUk7WUFDYixNQUFNLElBQUlVLE1BQU07UUFDcEI7UUFDQSxNQUFNMEIsY0FBY0osVUFBVWhDO1FBQzlCLElBQUlvQyxjQUFjMUMsTUFBTU0sTUFBTSxFQUFFO1lBQzVCLE1BQU0sSUFBSVUsTUFBTTtRQUNwQjtRQUNBdUIsaUJBQWlCMUIsVUFBVWIsT0FBT3NDLFNBQVNJO1FBQzNDLE1BQU9ILGVBQWVqQyxNQUFNLENBQUU7WUFDMUJrQyxJQUFJTCxRQUFRSTtZQUNaTCxRQUFRMUIsSUFBSSxDQUFDZ0MsRUFBRUosSUFBSTtZQUNuQkcsaUJBQWlCQyxFQUFFSCxTQUFTO1FBQ2hDO1FBQ0EsT0FBTztZQUNIRCxNQUFNRjtZQUNORyxXQUFXckMsTUFBTXlDLFFBQVEsQ0FBQ0M7UUFDOUI7SUFDSjtBQUNKO0FBQ0EsTUFBTUMsY0FBYzFDLE1BQU13QixJQUFJLENBQUM7SUFBRW5CLFFBQVE7QUFBSSxHQUFHLENBQUNzQyxJQUFJdkMsSUFBTUEsRUFBRXdDLFFBQVEsQ0FBQyxJQUFJQyxRQUFRLENBQUMsR0FBRztBQUN0RixTQUFTekIsV0FBVzBCLE1BQU07SUFDdEIseURBQXlEO0lBQ3pELElBQUlDLE1BQU07SUFDVixJQUFLLElBQUkzQyxJQUFJLEdBQUdBLElBQUkwQyxPQUFPekMsTUFBTSxFQUFFRCxJQUFLO1FBQ3BDMkMsT0FBT0wsV0FBVyxDQUFDSSxNQUFNLENBQUMxQyxFQUFFLENBQUM7SUFDakM7SUFDQSxPQUFPMkM7QUFDWDtBQUNBLFNBQVM1QixhQUFhNkIsT0FBTztJQUN6QixNQUFNQyxPQUFPQyxPQUFPQyxRQUFRLENBQUNILFNBQVM7SUFDdEMsSUFBSUUsT0FBT0UsS0FBSyxDQUFDSCxPQUNiLE1BQU0sSUFBSWxDLE1BQU07SUFDcEIsT0FBT2tDO0FBQ1g7QUFDQSw2QkFBNkI7QUFDN0IsU0FBU3BCLFdBQVdrQixHQUFHO0lBQ25CLElBQUksT0FBT0EsUUFBUSxVQUFVO1FBQ3pCLE1BQU0sSUFBSU0sVUFBVSxzQ0FBc0MsT0FBT047SUFDckU7SUFDQSxJQUFJQSxJQUFJMUMsTUFBTSxHQUFHLEdBQ2IsTUFBTSxJQUFJVSxNQUFNO0lBQ3BCLE1BQU11QyxRQUFRLElBQUkvQixXQUFXd0IsSUFBSTFDLE1BQU0sR0FBRztJQUMxQyxJQUFLLElBQUlELElBQUksR0FBR0EsSUFBSWtELE1BQU1qRCxNQUFNLEVBQUVELElBQUs7UUFDbkMsTUFBTW1ELElBQUluRCxJQUFJO1FBQ2RrRCxLQUFLLENBQUNsRCxFQUFFLEdBQUdlLGFBQWE0QixJQUFJL0IsS0FBSyxDQUFDdUMsR0FBR0EsSUFBSTtJQUM3QztJQUNBLE9BQU9EO0FBQ1g7QUFDQSwyQ0FBMkMsR0FDM0MsU0FBUzlDLFlBQVksR0FBR2dELE1BQU07SUFDMUIsSUFBSUEsT0FBT25ELE1BQU0sS0FBSyxHQUNsQixPQUFPbUQsTUFBTSxDQUFDLEVBQUU7SUFDcEIsTUFBTW5ELFNBQVNtRCxPQUFPQyxNQUFNLENBQUMsQ0FBQ0MsR0FBR0MsTUFBUUQsSUFBSUMsSUFBSXRELE1BQU0sRUFBRTtJQUN6RCxNQUFNdUQsU0FBUyxJQUFJckMsV0FBV2xCO0lBQzlCLElBQUssSUFBSUQsSUFBSSxHQUFHeUQsTUFBTSxHQUFHekQsSUFBSW9ELE9BQU9uRCxNQUFNLEVBQUVELElBQUs7UUFDN0MsTUFBTXVELE1BQU1ILE1BQU0sQ0FBQ3BELEVBQUU7UUFDckJ3RCxPQUFPRSxHQUFHLENBQUNILEtBQUtFO1FBQ2hCQSxPQUFPRixJQUFJdEQsTUFBTTtJQUNyQjtJQUNBLE9BQU91RDtBQUNYO0FBQ0EsU0FBU0csWUFBWUMsR0FBRztJQUNwQixPQUFPLElBQUlDLGNBQWNuRSxNQUFNLENBQUNrRTtBQUNwQztBQUNBLG9EQUFvRCxHQUNwRCxTQUFTdEMsWUFBWXdDLE9BQU87SUFDeEIsSUFBSUEsVUFBVSxHQUFHO1FBQ2IsTUFBTSxJQUFJbkQsTUFBTTtJQUNwQjtJQUNBLE1BQU1nQyxNQUFNbUIsUUFBUXRCLFFBQVEsQ0FBQztJQUM3QixPQUFPRyxJQUFJMUMsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUwQyxJQUFJLENBQUMsR0FBR0E7QUFDeEM7QUFDQSw0QkFBNEIsR0FDNUIsU0FBU29CLFVBQVVULENBQUM7SUFDaEIsT0FBT0EsRUFBRXJELE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFcUQsRUFBRSxDQUFDLEdBQUdBO0FBQ3BDO0FBQ0Esd0NBQXdDLEdBQ3hDLFNBQVNVLGNBQWNDLEdBQUc7SUFDdEIsT0FBT0EsSUFBSWhFLE1BQU0sSUFBSSxLQUFLZ0UsR0FBRyxDQUFDLEVBQUUsS0FBSyxPQUFPQSxHQUFHLENBQUMsRUFBRSxLQUFLO0FBQzNEO0FBQ0EsbUNBQW1DLEdBQ25DLFNBQVNDLGVBQWVELEdBQUc7SUFDdkIsSUFBSSxPQUFPQSxRQUFRLFVBQVU7UUFDekIsT0FBT0E7SUFDWDtJQUNBLE9BQU9ELGNBQWNDLE9BQU9BLElBQUlyRCxLQUFLLENBQUMsS0FBS3FEO0FBQy9DO0FBQ0EseUNBQXlDLEdBQ3pDLFNBQVMxRCxRQUFRTyxDQUFDO0lBQ2QsSUFBSUEsYUFBYUssWUFBWTtRQUN6QixPQUFPTDtJQUNYO0lBQ0EsSUFBSSxPQUFPQSxNQUFNLFVBQVU7UUFDdkIsSUFBSWtELGNBQWNsRCxJQUFJO1lBQ2xCLE9BQU9XLFdBQVdzQyxVQUFVRyxlQUFlcEQ7UUFDL0M7UUFDQSxPQUFPNkMsWUFBWTdDO0lBQ3ZCO0lBQ0EsSUFBSSxPQUFPQSxNQUFNLFlBQVksT0FBT0EsTUFBTSxVQUFVO1FBQ2hELElBQUksQ0FBQ0EsR0FBRztZQUNKLE9BQU9LLFdBQVdDLElBQUksQ0FBQyxFQUFFO1FBQzdCO1FBQ0EsT0FBT0ssV0FBV0gsWUFBWVI7SUFDbEM7SUFDQSxJQUFJQSxNQUFNLFFBQVFBLE1BQU1xRCxXQUFXO1FBQy9CLE9BQU9oRCxXQUFXQyxJQUFJLENBQUMsRUFBRTtJQUM3QjtJQUNBLE1BQU0sSUFBSVQsTUFBTSx3Q0FBd0MsT0FBT0c7QUFDbkU7QUFDTyxNQUFNc0QsUUFBUTtJQUNqQnBEO0lBQ0FaO0lBQ0FxQjtJQUNBa0M7QUFDSixFQUFFO0FBQ0ssTUFBTVUsTUFBTTtJQUFFM0U7SUFBUWdDO0FBQU8sRUFBRSxDQUN0QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xb2duaXRhLy4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3JscC9kaXN0L2VzbS9pbmRleC5qcz9kYzZmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUkxQIEVuY29kaW5nIGJhc2VkIG9uIGh0dHBzOi8vZXRoZXJldW0ub3JnL2VuL2RldmVsb3BlcnMvZG9jcy9kYXRhLXN0cnVjdHVyZXMtYW5kLWVuY29kaW5nL3JscC9cbiAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgaW4gZGF0YSwgY29udmVydHMgaXQgdG8gVWludDhBcnJheSBpZiBub3QsXG4gKiBhbmQgYWRkcyBhIGxlbmd0aCBmb3IgcmVjdXJzaW9uLlxuICogQHBhcmFtIGlucHV0IFdpbGwgYmUgY29udmVydGVkIHRvIFVpbnQ4QXJyYXlcbiAqIEByZXR1cm5zIFVpbnQ4QXJyYXkgb2YgZW5jb2RlZCBkYXRhXG4gKiovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IFtdO1xuICAgICAgICBsZXQgb3V0cHV0TGVuZ3RoID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlZCA9IGVuY29kZShpbnB1dFtpXSk7XG4gICAgICAgICAgICBvdXRwdXQucHVzaChlbmNvZGVkKTtcbiAgICAgICAgICAgIG91dHB1dExlbmd0aCArPSBlbmNvZGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uY2F0Qnl0ZXMoZW5jb2RlTGVuZ3RoKG91dHB1dExlbmd0aCwgMTkyKSwgLi4ub3V0cHV0KTtcbiAgICB9XG4gICAgY29uc3QgaW5wdXRCdWYgPSB0b0J5dGVzKGlucHV0KTtcbiAgICBpZiAoaW5wdXRCdWYubGVuZ3RoID09PSAxICYmIGlucHV0QnVmWzBdIDwgMTI4KSB7XG4gICAgICAgIHJldHVybiBpbnB1dEJ1ZjtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmNhdEJ5dGVzKGVuY29kZUxlbmd0aChpbnB1dEJ1Zi5sZW5ndGgsIDEyOCksIGlucHV0QnVmKTtcbn1cbi8qKlxuICogU2xpY2VzIGEgVWludDhBcnJheSwgdGhyb3dzIGlmIHRoZSBzbGljZSBnb2VzIG91dC1vZi1ib3VuZHMgb2YgdGhlIFVpbnQ4QXJyYXkuXG4gKiBFLmcuIGBzYWZlU2xpY2UoaGV4VG9CeXRlcygnYWEnKSwgMSwgMilgIHdpbGwgdGhyb3cuXG4gKiBAcGFyYW0gaW5wdXRcbiAqIEBwYXJhbSBzdGFydFxuICogQHBhcmFtIGVuZFxuICovXG5mdW5jdGlvbiBzYWZlU2xpY2UoaW5wdXQsIHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoZW5kID4gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBSTFAgKHNhZmVTbGljZSk6IGVuZCBzbGljZSBvZiBVaW50OEFycmF5IG91dC1vZi1ib3VuZHMnKTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0LnNsaWNlKHN0YXJ0LCBlbmQpO1xufVxuLyoqXG4gKiBQYXJzZSBpbnRlZ2Vycy4gQ2hlY2sgaWYgdGhlcmUgaXMgbm8gbGVhZGluZyB6ZXJvc1xuICogQHBhcmFtIHYgVGhlIHZhbHVlIHRvIHBhcnNlXG4gKi9cbmZ1bmN0aW9uIGRlY29kZUxlbmd0aCh2KSB7XG4gICAgaWYgKHZbMF0gPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIFJMUDogZXh0cmEgemVyb3MnKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlSGV4Qnl0ZShieXRlc1RvSGV4KHYpKTtcbn1cbmZ1bmN0aW9uIGVuY29kZUxlbmd0aChsZW4sIG9mZnNldCkge1xuICAgIGlmIChsZW4gPCA1Nikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKFtsZW4gKyBvZmZzZXRdKTtcbiAgICB9XG4gICAgY29uc3QgaGV4TGVuZ3RoID0gbnVtYmVyVG9IZXgobGVuKTtcbiAgICBjb25zdCBsTGVuZ3RoID0gaGV4TGVuZ3RoLmxlbmd0aCAvIDI7XG4gICAgY29uc3QgZmlyc3RCeXRlID0gbnVtYmVyVG9IZXgob2Zmc2V0ICsgNTUgKyBsTGVuZ3RoKTtcbiAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGhleFRvQnl0ZXMoZmlyc3RCeXRlICsgaGV4TGVuZ3RoKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBzdHJlYW0gPSBmYWxzZSkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICd1bmRlZmluZWQnIHx8IGlucHV0ID09PSBudWxsIHx8IGlucHV0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKFtdKTtcbiAgICB9XG4gICAgY29uc3QgaW5wdXRCeXRlcyA9IHRvQnl0ZXMoaW5wdXQpO1xuICAgIGNvbnN0IGRlY29kZWQgPSBfZGVjb2RlKGlucHV0Qnl0ZXMpO1xuICAgIGlmIChzdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IGRlY29kZWQuZGF0YSxcbiAgICAgICAgICAgIHJlbWFpbmRlcjogZGVjb2RlZC5yZW1haW5kZXIuc2xpY2UoKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGRlY29kZWQucmVtYWluZGVyLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgUkxQOiByZW1haW5kZXIgbXVzdCBiZSB6ZXJvJyk7XG4gICAgfVxuICAgIHJldHVybiBkZWNvZGVkLmRhdGE7XG59XG4vKiogRGVjb2RlIGFuIGlucHV0IHdpdGggUkxQICovXG5mdW5jdGlvbiBfZGVjb2RlKGlucHV0KSB7XG4gICAgbGV0IGxlbmd0aCwgbGxlbmd0aCwgZGF0YSwgaW5uZXJSZW1haW5kZXIsIGQ7XG4gICAgY29uc3QgZGVjb2RlZCA9IFtdO1xuICAgIGNvbnN0IGZpcnN0Qnl0ZSA9IGlucHV0WzBdO1xuICAgIGlmIChmaXJzdEJ5dGUgPD0gMHg3Zikge1xuICAgICAgICAvLyBhIHNpbmdsZSBieXRlIHdob3NlIHZhbHVlIGlzIGluIHRoZSBbMHgwMCwgMHg3Zl0gcmFuZ2UsIHRoYXQgYnl0ZSBpcyBpdHMgb3duIFJMUCBlbmNvZGluZy5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IGlucHV0LnNsaWNlKDAsIDEpLFxuICAgICAgICAgICAgcmVtYWluZGVyOiBpbnB1dC5zdWJhcnJheSgxKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZmlyc3RCeXRlIDw9IDB4YjcpIHtcbiAgICAgICAgLy8gc3RyaW5nIGlzIDAtNTUgYnl0ZXMgbG9uZy4gQSBzaW5nbGUgYnl0ZSB3aXRoIHZhbHVlIDB4ODAgcGx1cyB0aGUgbGVuZ3RoIG9mIHRoZSBzdHJpbmcgZm9sbG93ZWQgYnkgdGhlIHN0cmluZ1xuICAgICAgICAvLyBUaGUgcmFuZ2Ugb2YgdGhlIGZpcnN0IGJ5dGUgaXMgWzB4ODAsIDB4YjddXG4gICAgICAgIGxlbmd0aCA9IGZpcnN0Qnl0ZSAtIDB4N2Y7XG4gICAgICAgIC8vIHNldCAweDgwIG51bGwgdG8gMFxuICAgICAgICBpZiAoZmlyc3RCeXRlID09PSAweDgwKSB7XG4gICAgICAgICAgICBkYXRhID0gVWludDhBcnJheS5mcm9tKFtdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEgPSBzYWZlU2xpY2UoaW5wdXQsIDEsIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gMiAmJiBkYXRhWzBdIDwgMHg4MCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIFJMUCBlbmNvZGluZzogaW52YWxpZCBwcmVmaXgsIHNpbmdsZSBieXRlIDwgMHg4MCBhcmUgbm90IHByZWZpeGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICByZW1haW5kZXI6IGlucHV0LnN1YmFycmF5KGxlbmd0aCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGZpcnN0Qnl0ZSA8PSAweGJmKSB7XG4gICAgICAgIC8vIHN0cmluZyBpcyBncmVhdGVyIHRoYW4gNTUgYnl0ZXMgbG9uZy4gQSBzaW5nbGUgYnl0ZSB3aXRoIHRoZSB2YWx1ZSAoMHhiNyBwbHVzIHRoZSBsZW5ndGggb2YgdGhlIGxlbmd0aCksXG4gICAgICAgIC8vIGZvbGxvd2VkIGJ5IHRoZSBsZW5ndGgsIGZvbGxvd2VkIGJ5IHRoZSBzdHJpbmdcbiAgICAgICAgbGxlbmd0aCA9IGZpcnN0Qnl0ZSAtIDB4YjY7XG4gICAgICAgIGlmIChpbnB1dC5sZW5ndGggLSAxIDwgbGxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIFJMUDogbm90IGVub3VnaCBieXRlcyBmb3Igc3RyaW5nIGxlbmd0aCcpO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCA9IGRlY29kZUxlbmd0aChzYWZlU2xpY2UoaW5wdXQsIDEsIGxsZW5ndGgpKTtcbiAgICAgICAgaWYgKGxlbmd0aCA8PSA1NSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIFJMUDogZXhwZWN0ZWQgc3RyaW5nIGxlbmd0aCB0byBiZSBncmVhdGVyIHRoYW4gNTUnKTtcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gc2FmZVNsaWNlKGlucHV0LCBsbGVuZ3RoLCBsZW5ndGggKyBsbGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICByZW1haW5kZXI6IGlucHV0LnN1YmFycmF5KGxlbmd0aCArIGxsZW5ndGgpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChmaXJzdEJ5dGUgPD0gMHhmNykge1xuICAgICAgICAvLyBhIGxpc3QgYmV0d2VlbiAwLTU1IGJ5dGVzIGxvbmdcbiAgICAgICAgbGVuZ3RoID0gZmlyc3RCeXRlIC0gMHhiZjtcbiAgICAgICAgaW5uZXJSZW1haW5kZXIgPSBzYWZlU2xpY2UoaW5wdXQsIDEsIGxlbmd0aCk7XG4gICAgICAgIHdoaWxlIChpbm5lclJlbWFpbmRlci5sZW5ndGgpIHtcbiAgICAgICAgICAgIGQgPSBfZGVjb2RlKGlubmVyUmVtYWluZGVyKTtcbiAgICAgICAgICAgIGRlY29kZWQucHVzaChkLmRhdGEpO1xuICAgICAgICAgICAgaW5uZXJSZW1haW5kZXIgPSBkLnJlbWFpbmRlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YTogZGVjb2RlZCxcbiAgICAgICAgICAgIHJlbWFpbmRlcjogaW5wdXQuc3ViYXJyYXkobGVuZ3RoKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIGEgbGlzdCBvdmVyIDU1IGJ5dGVzIGxvbmdcbiAgICAgICAgbGxlbmd0aCA9IGZpcnN0Qnl0ZSAtIDB4ZjY7XG4gICAgICAgIGxlbmd0aCA9IGRlY29kZUxlbmd0aChzYWZlU2xpY2UoaW5wdXQsIDEsIGxsZW5ndGgpKTtcbiAgICAgICAgaWYgKGxlbmd0aCA8IDU2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgUkxQOiBlbmNvZGVkIGxpc3QgdG9vIHNob3J0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG90YWxMZW5ndGggPSBsbGVuZ3RoICsgbGVuZ3RoO1xuICAgICAgICBpZiAodG90YWxMZW5ndGggPiBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBSTFA6IHRvdGFsIGxlbmd0aCBpcyBsYXJnZXIgdGhhbiB0aGUgZGF0YScpO1xuICAgICAgICB9XG4gICAgICAgIGlubmVyUmVtYWluZGVyID0gc2FmZVNsaWNlKGlucHV0LCBsbGVuZ3RoLCB0b3RhbExlbmd0aCk7XG4gICAgICAgIHdoaWxlIChpbm5lclJlbWFpbmRlci5sZW5ndGgpIHtcbiAgICAgICAgICAgIGQgPSBfZGVjb2RlKGlubmVyUmVtYWluZGVyKTtcbiAgICAgICAgICAgIGRlY29kZWQucHVzaChkLmRhdGEpO1xuICAgICAgICAgICAgaW5uZXJSZW1haW5kZXIgPSBkLnJlbWFpbmRlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YTogZGVjb2RlZCxcbiAgICAgICAgICAgIHJlbWFpbmRlcjogaW5wdXQuc3ViYXJyYXkodG90YWxMZW5ndGgpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmNvbnN0IGNhY2hlZEhleGVzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMjU2IH0sIChfdiwgaSkgPT4gaS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSk7XG5mdW5jdGlvbiBieXRlc1RvSGV4KHVpbnQ4YSkge1xuICAgIC8vIFByZS1jYWNoaW5nIGNoYXJzIHdpdGggYGNhY2hlZEhleGVzYCBzcGVlZHMgdGhpcyB1cCA2eFxuICAgIGxldCBoZXggPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVpbnQ4YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBoZXggKz0gY2FjaGVkSGV4ZXNbdWludDhhW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIGhleDtcbn1cbmZ1bmN0aW9uIHBhcnNlSGV4Qnl0ZShoZXhCeXRlKSB7XG4gICAgY29uc3QgYnl0ZSA9IE51bWJlci5wYXJzZUludChoZXhCeXRlLCAxNik7XG4gICAgaWYgKE51bWJlci5pc05hTihieXRlKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJ5dGUgc2VxdWVuY2UnKTtcbiAgICByZXR1cm4gYnl0ZTtcbn1cbi8vIENhY2hpbmcgc2xvd3MgaXQgZG93biAyLTN4XG5mdW5jdGlvbiBoZXhUb0J5dGVzKGhleCkge1xuICAgIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdoZXhUb0J5dGVzOiBleHBlY3RlZCBzdHJpbmcsIGdvdCAnICsgdHlwZW9mIGhleCk7XG4gICAgfVxuICAgIGlmIChoZXgubGVuZ3RoICUgMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZXhUb0J5dGVzOiByZWNlaXZlZCBpbnZhbGlkIHVucGFkZGVkIGhleCcpO1xuICAgIGNvbnN0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoaGV4Lmxlbmd0aCAvIDIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgaiA9IGkgKiAyO1xuICAgICAgICBhcnJheVtpXSA9IHBhcnNlSGV4Qnl0ZShoZXguc2xpY2UoaiwgaiArIDIpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuLyoqIENvbmNhdGVuYXRlcyB0d28gVWludDhBcnJheXMgaW50byBvbmUuICovXG5mdW5jdGlvbiBjb25jYXRCeXRlcyguLi5hcnJheXMpIHtcbiAgICBpZiAoYXJyYXlzLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgcmV0dXJuIGFycmF5c1swXTtcbiAgICBjb25zdCBsZW5ndGggPSBhcnJheXMucmVkdWNlKChhLCBhcnIpID0+IGEgKyBhcnIubGVuZ3RoLCAwKTtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwLCBwYWQgPSAwOyBpIDwgYXJyYXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGFyciA9IGFycmF5c1tpXTtcbiAgICAgICAgcmVzdWx0LnNldChhcnIsIHBhZCk7XG4gICAgICAgIHBhZCArPSBhcnIubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gdXRmOFRvQnl0ZXModXRmKSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh1dGYpO1xufVxuLyoqIFRyYW5zZm9ybSBhbiBpbnRlZ2VyIGludG8gaXRzIGhleGFkZWNpbWFsIHZhbHVlICovXG5mdW5jdGlvbiBudW1iZXJUb0hleChpbnRlZ2VyKSB7XG4gICAgaWYgKGludGVnZXIgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbnRlZ2VyIGFzIGFyZ3VtZW50LCBtdXN0IGJlIHVuc2lnbmVkIScpO1xuICAgIH1cbiAgICBjb25zdCBoZXggPSBpbnRlZ2VyLnRvU3RyaW5nKDE2KTtcbiAgICByZXR1cm4gaGV4Lmxlbmd0aCAlIDIgPyBgMCR7aGV4fWAgOiBoZXg7XG59XG4vKiogUGFkIGEgc3RyaW5nIHRvIGJlIGV2ZW4gKi9cbmZ1bmN0aW9uIHBhZFRvRXZlbihhKSB7XG4gICAgcmV0dXJuIGEubGVuZ3RoICUgMiA/IGAwJHthfWAgOiBhO1xufVxuLyoqIENoZWNrIGlmIGEgc3RyaW5nIGlzIHByZWZpeGVkIGJ5IDB4ICovXG5mdW5jdGlvbiBpc0hleFByZWZpeGVkKHN0cikge1xuICAgIHJldHVybiBzdHIubGVuZ3RoID49IDIgJiYgc3RyWzBdID09PSAnMCcgJiYgc3RyWzFdID09PSAneCc7XG59XG4vKiogUmVtb3ZlcyAweCBmcm9tIGEgZ2l2ZW4gU3RyaW5nICovXG5mdW5jdGlvbiBzdHJpcEhleFByZWZpeChzdHIpIHtcbiAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIGlzSGV4UHJlZml4ZWQoc3RyKSA/IHN0ci5zbGljZSgyKSA6IHN0cjtcbn1cbi8qKiBUcmFuc2Zvcm0gYW55dGhpbmcgaW50byBhIFVpbnQ4QXJyYXkgKi9cbmZ1bmN0aW9uIHRvQnl0ZXModikge1xuICAgIGlmICh2IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gdjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoaXNIZXhQcmVmaXhlZCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIGhleFRvQnl0ZXMocGFkVG9FdmVuKHN0cmlwSGV4UHJlZml4KHYpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHYpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2ID09PSAnYmlnaW50Jykge1xuICAgICAgICBpZiAoIXYpIHtcbiAgICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oW10pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZXhUb0J5dGVzKG51bWJlclRvSGV4KHYpKTtcbiAgICB9XG4gICAgaWYgKHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oW10pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3RvQnl0ZXM6IHJlY2VpdmVkIHVuc3VwcG9ydGVkIHR5cGUgJyArIHR5cGVvZiB2KTtcbn1cbmV4cG9ydCBjb25zdCB1dGlscyA9IHtcbiAgICBieXRlc1RvSGV4LFxuICAgIGNvbmNhdEJ5dGVzLFxuICAgIGhleFRvQnl0ZXMsXG4gICAgdXRmOFRvQnl0ZXMsXG59O1xuZXhwb3J0IGNvbnN0IFJMUCA9IHsgZW5jb2RlLCBkZWNvZGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJlbmNvZGUiLCJpbnB1dCIsIkFycmF5IiwiaXNBcnJheSIsIm91dHB1dCIsIm91dHB1dExlbmd0aCIsImkiLCJsZW5ndGgiLCJlbmNvZGVkIiwicHVzaCIsImNvbmNhdEJ5dGVzIiwiZW5jb2RlTGVuZ3RoIiwiaW5wdXRCdWYiLCJ0b0J5dGVzIiwic2FmZVNsaWNlIiwic3RhcnQiLCJlbmQiLCJFcnJvciIsInNsaWNlIiwiZGVjb2RlTGVuZ3RoIiwidiIsInBhcnNlSGV4Qnl0ZSIsImJ5dGVzVG9IZXgiLCJsZW4iLCJvZmZzZXQiLCJVaW50OEFycmF5IiwiZnJvbSIsImhleExlbmd0aCIsIm51bWJlclRvSGV4IiwibExlbmd0aCIsImZpcnN0Qnl0ZSIsImhleFRvQnl0ZXMiLCJkZWNvZGUiLCJzdHJlYW0iLCJpbnB1dEJ5dGVzIiwiZGVjb2RlZCIsIl9kZWNvZGUiLCJkYXRhIiwicmVtYWluZGVyIiwibGxlbmd0aCIsImlubmVyUmVtYWluZGVyIiwiZCIsInN1YmFycmF5IiwidG90YWxMZW5ndGgiLCJjYWNoZWRIZXhlcyIsIl92IiwidG9TdHJpbmciLCJwYWRTdGFydCIsInVpbnQ4YSIsImhleCIsImhleEJ5dGUiLCJieXRlIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJpc05hTiIsIlR5cGVFcnJvciIsImFycmF5IiwiaiIsImFycmF5cyIsInJlZHVjZSIsImEiLCJhcnIiLCJyZXN1bHQiLCJwYWQiLCJzZXQiLCJ1dGY4VG9CeXRlcyIsInV0ZiIsIlRleHRFbmNvZGVyIiwiaW50ZWdlciIsInBhZFRvRXZlbiIsImlzSGV4UHJlZml4ZWQiLCJzdHIiLCJzdHJpcEhleFByZWZpeCIsInVuZGVmaW5lZCIsInV0aWxzIiwiUkxQIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/rlp/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/account.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/account.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   accountBodyFromSlim: () => (/* binding */ accountBodyFromSlim),\n/* harmony export */   accountBodyToRLP: () => (/* binding */ accountBodyToRLP),\n/* harmony export */   accountBodyToSlim: () => (/* binding */ accountBodyToSlim),\n/* harmony export */   generateAddress: () => (/* binding */ generateAddress),\n/* harmony export */   generateAddress2: () => (/* binding */ generateAddress2),\n/* harmony export */   importPublic: () => (/* binding */ importPublic),\n/* harmony export */   isValidAddress: () => (/* binding */ isValidAddress),\n/* harmony export */   isValidChecksumAddress: () => (/* binding */ isValidChecksumAddress),\n/* harmony export */   isValidPrivate: () => (/* binding */ isValidPrivate),\n/* harmony export */   isValidPublic: () => (/* binding */ isValidPublic),\n/* harmony export */   isZeroAddress: () => (/* binding */ isZeroAddress),\n/* harmony export */   privateToAddress: () => (/* binding */ privateToAddress),\n/* harmony export */   privateToPublic: () => (/* binding */ privateToPublic),\n/* harmony export */   pubToAddress: () => (/* binding */ pubToAddress),\n/* harmony export */   publicToAddress: () => (/* binding */ publicToAddress),\n/* harmony export */   toChecksumAddress: () => (/* binding */ toChecksumAddress),\n/* harmony export */   zeroAddress: () => (/* binding */ zeroAddress)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"(ssr)/./node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n\n\n\n\n\n/**\n * Account class to load and maintain the  basic account objects.\n * Supports partial loading and access required for verkle with null\n * as the placeholder.\n *\n * Note: passing undefined in constructor is different from null\n * While undefined leads to default assignment, null is retained\n * to track the information not available/loaded because of partial\n * witness access\n */ class Account {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     * undefined get assigned with the defaults present, but null args are retained as is\n     */ constructor(nonce = _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0, balance = _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0, storageRoot = _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP, codeHash = _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL, codeSize = null, version = 0){\n        this._nonce = null;\n        this._balance = null;\n        this._storageRoot = null;\n        this._codeHash = null;\n        // codeSize and version is separately stored in VKT\n        this._codeSize = null;\n        this._version = null;\n        this._nonce = nonce;\n        this._balance = balance;\n        this._storageRoot = storageRoot;\n        this._codeHash = codeHash;\n        if (codeSize === null && codeHash !== null && !this.isContract()) {\n            codeSize = 0;\n        }\n        this._codeSize = codeSize;\n        this._version = version;\n        this._validate();\n    }\n    get version() {\n        if (this._version !== null) {\n            return this._version;\n        } else {\n            throw Error(`version=${this._version} not loaded`);\n        }\n    }\n    set version(_version) {\n        this._version = _version;\n    }\n    get nonce() {\n        if (this._nonce !== null) {\n            return this._nonce;\n        } else {\n            throw Error(`nonce=${this._nonce} not loaded`);\n        }\n    }\n    set nonce(_nonce) {\n        this._nonce = _nonce;\n    }\n    get balance() {\n        if (this._balance !== null) {\n            return this._balance;\n        } else {\n            throw Error(`balance=${this._balance} not loaded`);\n        }\n    }\n    set balance(_balance) {\n        this._balance = _balance;\n    }\n    get storageRoot() {\n        if (this._storageRoot !== null) {\n            return this._storageRoot;\n        } else {\n            throw Error(`storageRoot=${this._storageRoot} not loaded`);\n        }\n    }\n    set storageRoot(_storageRoot) {\n        this._storageRoot = _storageRoot;\n    }\n    get codeHash() {\n        if (this._codeHash !== null) {\n            return this._codeHash;\n        } else {\n            throw Error(`codeHash=${this._codeHash} not loaded`);\n        }\n    }\n    set codeHash(_codeHash) {\n        this._codeHash = _codeHash;\n    }\n    get codeSize() {\n        if (this._codeSize !== null) {\n            return this._codeSize;\n        } else {\n            throw Error(`codeHash=${this._codeSize} not loaded`);\n        }\n    }\n    set codeSize(_codeSize) {\n        this._codeSize = _codeSize;\n    }\n    static fromAccountData(accountData) {\n        const { nonce, balance, storageRoot, codeHash } = accountData;\n        if (nonce === null || balance === null || storageRoot === null || codeHash === null) {\n            throw Error(`Partial fields not supported in fromAccountData`);\n        }\n        return new Account(nonce !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(nonce)) : undefined, balance !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(balance)) : undefined, storageRoot !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(storageRoot) : undefined, codeHash !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(codeHash) : undefined);\n    }\n    static fromPartialAccountData(partialAccountData) {\n        const { nonce, balance, storageRoot, codeHash, codeSize, version } = partialAccountData;\n        if (nonce === null && balance === null && storageRoot === null && codeHash === null && codeSize === null && version === null) {\n            throw Error(`All partial fields null`);\n        }\n        return new Account(nonce !== undefined && nonce !== null ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(nonce)) : nonce, balance !== undefined && balance !== null ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(balance)) : balance, storageRoot !== undefined && storageRoot !== null ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(storageRoot) : storageRoot, codeHash !== undefined && codeHash !== null ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(codeHash) : codeHash, codeSize !== undefined && codeSize !== null ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(codeSize)) : codeSize, version !== undefined && version !== null ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(version)) : version);\n    }\n    static fromRlpSerializedAccount(serialized) {\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error(\"Invalid serialized account input. Must be array\");\n        }\n        return this.fromValuesArray(values);\n    }\n    static fromRlpSerializedPartialAccount(serialized) {\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error(\"Invalid serialized account input. Must be array\");\n        }\n        let nonce = null;\n        if (!Array.isArray(values[0])) {\n            throw new Error(\"Invalid partial nonce encoding. Must be array\");\n        } else {\n            const isNotNullIndicator = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[0][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for nonce`);\n            }\n            if (isNotNullIndicator === 1) {\n                nonce = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(values[0][1]);\n            }\n        }\n        let balance = null;\n        if (!Array.isArray(values[1])) {\n            throw new Error(\"Invalid partial balance encoding. Must be array\");\n        } else {\n            const isNotNullIndicator = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[1][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for balance`);\n            }\n            if (isNotNullIndicator === 1) {\n                balance = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(values[1][1]);\n            }\n        }\n        let storageRoot = null;\n        if (!Array.isArray(values[2])) {\n            throw new Error(\"Invalid partial storageRoot encoding. Must be array\");\n        } else {\n            const isNotNullIndicator = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[2][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for storageRoot`);\n            }\n            if (isNotNullIndicator === 1) {\n                storageRoot = values[2][1];\n            }\n        }\n        let codeHash = null;\n        if (!Array.isArray(values[3])) {\n            throw new Error(\"Invalid partial codeHash encoding. Must be array\");\n        } else {\n            const isNotNullIndicator = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[3][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for codeHash`);\n            }\n            if (isNotNullIndicator === 1) {\n                codeHash = values[3][1];\n            }\n        }\n        let codeSize = null;\n        if (!Array.isArray(values[4])) {\n            throw new Error(\"Invalid partial codeSize encoding. Must be array\");\n        } else {\n            const isNotNullIndicator = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[4][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for codeSize`);\n            }\n            if (isNotNullIndicator === 1) {\n                codeSize = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[4][1]);\n            }\n        }\n        let version = null;\n        if (!Array.isArray(values[5])) {\n            throw new Error(\"Invalid partial version encoding. Must be array\");\n        } else {\n            const isNotNullIndicator = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[5][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for version`);\n            }\n            if (isNotNullIndicator === 1) {\n                version = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[5][1]);\n            }\n        }\n        return this.fromPartialAccountData({\n            balance,\n            nonce,\n            storageRoot,\n            codeHash,\n            codeSize,\n            version\n        });\n    }\n    static fromValuesArray(values) {\n        const [nonce, balance, storageRoot, codeHash] = values;\n        return new Account((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(nonce), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(balance), storageRoot, codeHash);\n    }\n    _validate() {\n        if (this._nonce !== null && this._nonce < _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n            throw new Error(\"nonce must be greater than zero\");\n        }\n        if (this._balance !== null && this._balance < _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n            throw new Error(\"balance must be greater than zero\");\n        }\n        if (this._storageRoot !== null && this._storageRoot.length !== 32) {\n            throw new Error(\"storageRoot must have a length of 32\");\n        }\n        if (this._codeHash !== null && this._codeHash.length !== 32) {\n            throw new Error(\"codeHash must have a length of 32\");\n        }\n        if (this._codeSize !== null && this._codeSize < _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n            throw new Error(\"codeSize must be greater than zero\");\n        }\n    }\n    /**\n     * Returns an array of Uint8Arrays of the raw bytes for the account, in order.\n     */ raw() {\n        return [\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this.balance),\n            this.storageRoot,\n            this.codeHash\n        ];\n    }\n    /**\n     * Returns the RLP serialization of the account as a `Uint8Array`.\n     */ serialize() {\n        return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(this.raw());\n    }\n    serializeWithPartialInfo() {\n        const partialData = [];\n        const zeroEncoded = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.intToUnpaddedBytes)(0);\n        const oneEncoded = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.intToUnpaddedBytes)(1);\n        if (this._nonce !== null) {\n            partialData.push([\n                oneEncoded,\n                (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this._nonce)\n            ]);\n        } else {\n            partialData.push([\n                zeroEncoded\n            ]);\n        }\n        if (this._balance !== null) {\n            partialData.push([\n                oneEncoded,\n                (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this._balance)\n            ]);\n        } else {\n            partialData.push([\n                zeroEncoded\n            ]);\n        }\n        if (this._storageRoot !== null) {\n            partialData.push([\n                oneEncoded,\n                this._storageRoot\n            ]);\n        } else {\n            partialData.push([\n                zeroEncoded\n            ]);\n        }\n        if (this._codeHash !== null) {\n            partialData.push([\n                oneEncoded,\n                this._codeHash\n            ]);\n        } else {\n            partialData.push([\n                zeroEncoded\n            ]);\n        }\n        if (this._codeSize !== null) {\n            partialData.push([\n                oneEncoded,\n                (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.intToUnpaddedBytes)(this._codeSize)\n            ]);\n        } else {\n            partialData.push([\n                zeroEncoded\n            ]);\n        }\n        if (this._version !== null) {\n            partialData.push([\n                oneEncoded,\n                (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.intToUnpaddedBytes)(this._version)\n            ]);\n        } else {\n            partialData.push([\n                zeroEncoded\n            ]);\n        }\n        return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(partialData);\n    }\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */ isContract() {\n        if (this._codeHash === null && this._codeSize === null) {\n            throw Error(`Insufficient data as codeHash=null and codeSize=null`);\n        }\n        return this._codeHash !== null && !(0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(this._codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL) || this._codeSize !== null && this._codeSize !== 0;\n    }\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */ isEmpty() {\n        // helpful for determination in partial accounts\n        if (this._balance !== null && this.balance !== _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0 || this._nonce === null && this.nonce !== _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0 || this._codeHash !== null && !(0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(this.codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL)) {\n            return false;\n        }\n        return this.balance === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0 && this.nonce === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0 && (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(this.codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL);\n    }\n}\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */ const isValidAddress = function(hexAddress) {\n    try {\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsString)(hexAddress);\n    } catch (e) {\n        return false;\n    }\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */ const toChecksumAddress = function(hexAddress, eip1191ChainId) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsHexString)(hexAddress);\n    const address = (0,_internal_js__WEBPACK_IMPORTED_MODULE_6__.stripHexPrefix)(hexAddress).toLowerCase();\n    let prefix = \"\";\n    if (eip1191ChainId !== undefined) {\n        const chainId = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(eip1191ChainId));\n        prefix = chainId.toString() + \"0x\";\n    }\n    const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.utf8ToBytes)(prefix + address);\n    const hash = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)((0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(bytes)).slice(2);\n    let ret = \"\";\n    for(let i = 0; i < address.length; i++){\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        } else {\n            ret += address[i];\n        }\n    }\n    return `0x${ret}`;\n};\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */ const isValidChecksumAddress = function(hexAddress, eip1191ChainId) {\n    return isValidAddress(hexAddress) && toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress;\n};\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */ const generateAddress = function(from, nonce) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(from);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(nonce);\n    if ((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(nonce) === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([\n            from,\n            Uint8Array.from([])\n        ])).subarray(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([\n        from,\n        nonce\n    ])).subarray(-20);\n};\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */ const generateAddress2 = function(from, salt, initCode) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(from);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(salt);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(initCode);\n    if (from.length !== 20) {\n        throw new Error(\"Expected from to be of length 20\");\n    }\n    if (salt.length !== 32) {\n        throw new Error(\"Expected salt to be of length 32\");\n    }\n    const address = (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(\"0xff\"), from, salt, (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(initCode)));\n    return address.subarray(-20);\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */ const isValidPrivate = function(privateKey) {\n    return ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.utils.isValidPrivateKey(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */ const isValidPublic = function(publicKey, sanitize = false) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        // Automatically checks whether point is on curve\n        try {\n            ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(Uint8Array.from([\n                4\n            ]), publicKey));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    if (!sanitize) {\n        return false;\n    }\n    try {\n        ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(publicKey);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */ const pubToAddress = function(pubKey, sanitize = false) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);\n    }\n    if (pubKey.length !== 64) {\n        throw new Error(\"Expected pubKey to be of length 64\");\n    }\n    // Only take the lower 160bits of the hash\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(pubKey).subarray(-20);\n};\nconst publicToAddress = pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */ const privateToPublic = function(privateKey) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(privateKey);\n    // skip the type flag and use the X, Y points\n    return ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1);\n};\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */ const privateToAddress = function(privateKey) {\n    return publicToAddress(privateToPublic(privateKey));\n};\n/**\n * Converts a public key to the Ethereum format.\n */ const importPublic = function(publicKey) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1);\n    }\n    return publicKey;\n};\n/**\n * Returns the zero address.\n */ const zeroAddress = function() {\n    const addressLength = 20;\n    const addr = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.zeros)(addressLength);\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(addr);\n};\n/**\n * Checks if a given address is the zero address.\n */ const isZeroAddress = function(hexAddress) {\n    try {\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsString)(hexAddress);\n    } catch (e) {\n        return false;\n    }\n    const zeroAddr = zeroAddress();\n    return zeroAddr === hexAddress;\n};\nfunction accountBodyFromSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        storageRoot.length === 0 ? _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP : storageRoot,\n        codeHash.length === 0 ? _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL : codeHash\n    ];\n}\nconst emptyUint8Arr = new Uint8Array(0);\nfunction accountBodyToSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(storageRoot, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP) ? emptyUint8Arr : storageRoot,\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL) ? emptyUint8Arr : codeHash\n    ];\n}\n/**\n * Converts a slim account (per snap protocol spec) to the RLP encoded version of the account\n * @param body Array of 4 Uint8Array-like items to represent the account\n * @returns RLP encoded version of the account\n */ function accountBodyToRLP(body, couldBeSlim = true) {\n    const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;\n    return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(accountBody);\n} //# sourceMappingURL=account.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9hY2NvdW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0M7QUFDc0I7QUFDRztBQUNtSDtBQUN6RztBQUNPO0FBQ2pDO0FBQy9DOzs7Ozs7Ozs7Q0FTQyxHQUNNLE1BQU1xQjtJQUNUOzs7O0tBSUMsR0FDREMsWUFBWUMsUUFBUVQsbURBQVEsRUFBRVUsVUFBVVYsbURBQVEsRUFBRVcsY0FBY1Qsd0RBQWEsRUFBRVUsV0FBV1gseURBQWMsRUFBRVksV0FBVyxJQUFJLEVBQUVDLFVBQVUsQ0FBQyxDQUFFO1FBQ3BJLElBQUksQ0FBQ0MsTUFBTSxHQUFHO1FBQ2QsSUFBSSxDQUFDQyxRQUFRLEdBQUc7UUFDaEIsSUFBSSxDQUFDQyxZQUFZLEdBQUc7UUFDcEIsSUFBSSxDQUFDQyxTQUFTLEdBQUc7UUFDakIsbURBQW1EO1FBQ25ELElBQUksQ0FBQ0MsU0FBUyxHQUFHO1FBQ2pCLElBQUksQ0FBQ0MsUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ0wsTUFBTSxHQUFHTjtRQUNkLElBQUksQ0FBQ08sUUFBUSxHQUFHTjtRQUNoQixJQUFJLENBQUNPLFlBQVksR0FBR047UUFDcEIsSUFBSSxDQUFDTyxTQUFTLEdBQUdOO1FBQ2pCLElBQUlDLGFBQWEsUUFBUUQsYUFBYSxRQUFRLENBQUMsSUFBSSxDQUFDUyxVQUFVLElBQUk7WUFDOURSLFdBQVc7UUFDZjtRQUNBLElBQUksQ0FBQ00sU0FBUyxHQUFHTjtRQUNqQixJQUFJLENBQUNPLFFBQVEsR0FBR047UUFDaEIsSUFBSSxDQUFDUSxTQUFTO0lBQ2xCO0lBQ0EsSUFBSVIsVUFBVTtRQUNWLElBQUksSUFBSSxDQUFDTSxRQUFRLEtBQUssTUFBTTtZQUN4QixPQUFPLElBQUksQ0FBQ0EsUUFBUTtRQUN4QixPQUNLO1lBQ0QsTUFBTUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUNILFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDckQ7SUFDSjtJQUNBLElBQUlOLFFBQVFNLFFBQVEsRUFBRTtRQUNsQixJQUFJLENBQUNBLFFBQVEsR0FBR0E7SUFDcEI7SUFDQSxJQUFJWCxRQUFRO1FBQ1IsSUFBSSxJQUFJLENBQUNNLE1BQU0sS0FBSyxNQUFNO1lBQ3RCLE9BQU8sSUFBSSxDQUFDQSxNQUFNO1FBQ3RCLE9BQ0s7WUFDRCxNQUFNUSxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQ1IsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUNqRDtJQUNKO0lBQ0EsSUFBSU4sTUFBTU0sTUFBTSxFQUFFO1FBQ2QsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO0lBQ2xCO0lBQ0EsSUFBSUwsVUFBVTtRQUNWLElBQUksSUFBSSxDQUFDTSxRQUFRLEtBQUssTUFBTTtZQUN4QixPQUFPLElBQUksQ0FBQ0EsUUFBUTtRQUN4QixPQUNLO1lBQ0QsTUFBTU8sTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUNQLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDckQ7SUFDSjtJQUNBLElBQUlOLFFBQVFNLFFBQVEsRUFBRTtRQUNsQixJQUFJLENBQUNBLFFBQVEsR0FBR0E7SUFDcEI7SUFDQSxJQUFJTCxjQUFjO1FBQ2QsSUFBSSxJQUFJLENBQUNNLFlBQVksS0FBSyxNQUFNO1lBQzVCLE9BQU8sSUFBSSxDQUFDQSxZQUFZO1FBQzVCLE9BQ0s7WUFDRCxNQUFNTSxNQUFNLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQ04sWUFBWSxDQUFDLFdBQVcsQ0FBQztRQUM3RDtJQUNKO0lBQ0EsSUFBSU4sWUFBWU0sWUFBWSxFQUFFO1FBQzFCLElBQUksQ0FBQ0EsWUFBWSxHQUFHQTtJQUN4QjtJQUNBLElBQUlMLFdBQVc7UUFDWCxJQUFJLElBQUksQ0FBQ00sU0FBUyxLQUFLLE1BQU07WUFDekIsT0FBTyxJQUFJLENBQUNBLFNBQVM7UUFDekIsT0FDSztZQUNELE1BQU1LLE1BQU0sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDTCxTQUFTLENBQUMsV0FBVyxDQUFDO1FBQ3ZEO0lBQ0o7SUFDQSxJQUFJTixTQUFTTSxTQUFTLEVBQUU7UUFDcEIsSUFBSSxDQUFDQSxTQUFTLEdBQUdBO0lBQ3JCO0lBQ0EsSUFBSUwsV0FBVztRQUNYLElBQUksSUFBSSxDQUFDTSxTQUFTLEtBQUssTUFBTTtZQUN6QixPQUFPLElBQUksQ0FBQ0EsU0FBUztRQUN6QixPQUNLO1lBQ0QsTUFBTUksTUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUNKLFNBQVMsQ0FBQyxXQUFXLENBQUM7UUFDdkQ7SUFDSjtJQUNBLElBQUlOLFNBQVNNLFNBQVMsRUFBRTtRQUNwQixJQUFJLENBQUNBLFNBQVMsR0FBR0E7SUFDckI7SUFDQSxPQUFPSyxnQkFBZ0JDLFdBQVcsRUFBRTtRQUNoQyxNQUFNLEVBQUVoQixLQUFLLEVBQUVDLE9BQU8sRUFBRUMsV0FBVyxFQUFFQyxRQUFRLEVBQUUsR0FBR2E7UUFDbEQsSUFBSWhCLFVBQVUsUUFBUUMsWUFBWSxRQUFRQyxnQkFBZ0IsUUFBUUMsYUFBYSxNQUFNO1lBQ2pGLE1BQU1XLE1BQU0sQ0FBQywrQ0FBK0MsQ0FBQztRQUNqRTtRQUNBLE9BQU8sSUFBSWhCLFFBQVFFLFVBQVVpQixZQUFZcEMsd0RBQWFBLENBQUNPLGtEQUFPQSxDQUFDWSxVQUFVaUIsV0FBV2hCLFlBQVlnQixZQUFZcEMsd0RBQWFBLENBQUNPLGtEQUFPQSxDQUFDYSxZQUFZZ0IsV0FBV2YsZ0JBQWdCZSxZQUFZN0Isa0RBQU9BLENBQUNjLGVBQWVlLFdBQVdkLGFBQWFjLFlBQVk3QixrREFBT0EsQ0FBQ2UsWUFBWWM7SUFDeFE7SUFDQSxPQUFPQyx1QkFBdUJDLGtCQUFrQixFQUFFO1FBQzlDLE1BQU0sRUFBRW5CLEtBQUssRUFBRUMsT0FBTyxFQUFFQyxXQUFXLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxPQUFPLEVBQUUsR0FBR2M7UUFDckUsSUFBSW5CLFVBQVUsUUFDVkMsWUFBWSxRQUNaQyxnQkFBZ0IsUUFDaEJDLGFBQWEsUUFDYkMsYUFBYSxRQUNiQyxZQUFZLE1BQU07WUFDbEIsTUFBTVMsTUFBTSxDQUFDLHVCQUF1QixDQUFDO1FBQ3pDO1FBQ0EsT0FBTyxJQUFJaEIsUUFBUUUsVUFBVWlCLGFBQWFqQixVQUFVLE9BQU9uQix3REFBYUEsQ0FBQ08sa0RBQU9BLENBQUNZLFVBQVVBLE9BQU9DLFlBQVlnQixhQUFhaEIsWUFBWSxPQUFPcEIsd0RBQWFBLENBQUNPLGtEQUFPQSxDQUFDYSxZQUFZQSxTQUFTQyxnQkFBZ0JlLGFBQWFmLGdCQUFnQixPQUFPZCxrREFBT0EsQ0FBQ2MsZUFBZUEsYUFBYUMsYUFBYWMsYUFBYWQsYUFBYSxPQUFPZixrREFBT0EsQ0FBQ2UsWUFBWUEsVUFBVUMsYUFBYWEsYUFBYWIsYUFBYSxPQUFPckIscURBQVVBLENBQUNLLGtEQUFPQSxDQUFDZ0IsYUFBYUEsVUFBVUMsWUFBWVksYUFBYVosWUFBWSxPQUFPdEIscURBQVVBLENBQUNLLGtEQUFPQSxDQUFDaUIsWUFBWUE7SUFDcGdCO0lBQ0EsT0FBT2UseUJBQXlCQyxVQUFVLEVBQUU7UUFDeEMsTUFBTUMsU0FBUzdDLGdEQUFHQSxDQUFDOEMsTUFBTSxDQUFDRjtRQUMxQixJQUFJLENBQUNHLE1BQU1DLE9BQU8sQ0FBQ0gsU0FBUztZQUN4QixNQUFNLElBQUlSLE1BQU07UUFDcEI7UUFDQSxPQUFPLElBQUksQ0FBQ1ksZUFBZSxDQUFDSjtJQUNoQztJQUNBLE9BQU9LLGdDQUFnQ04sVUFBVSxFQUFFO1FBQy9DLE1BQU1DLFNBQVM3QyxnREFBR0EsQ0FBQzhDLE1BQU0sQ0FBQ0Y7UUFDMUIsSUFBSSxDQUFDRyxNQUFNQyxPQUFPLENBQUNILFNBQVM7WUFDeEIsTUFBTSxJQUFJUixNQUFNO1FBQ3BCO1FBQ0EsSUFBSWQsUUFBUTtRQUNaLElBQUksQ0FBQ3dCLE1BQU1DLE9BQU8sQ0FBQ0gsTUFBTSxDQUFDLEVBQUUsR0FBRztZQUMzQixNQUFNLElBQUlSLE1BQU07UUFDcEIsT0FDSztZQUNELE1BQU1jLHFCQUFxQjdDLHFEQUFVQSxDQUFDdUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2xELElBQUlNLHVCQUF1QixLQUFLQSx1QkFBdUIsR0FBRztnQkFDdEQsTUFBTSxJQUFJZCxNQUFNLENBQUMsd0JBQXdCLEVBQUVjLG1CQUFtQixVQUFVLENBQUM7WUFDN0U7WUFDQSxJQUFJQSx1QkFBdUIsR0FBRztnQkFDMUI1QixRQUFRbkIsd0RBQWFBLENBQUN5QyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDdEM7UUFDSjtRQUNBLElBQUlyQixVQUFVO1FBQ2QsSUFBSSxDQUFDdUIsTUFBTUMsT0FBTyxDQUFDSCxNQUFNLENBQUMsRUFBRSxHQUFHO1lBQzNCLE1BQU0sSUFBSVIsTUFBTTtRQUNwQixPQUNLO1lBQ0QsTUFBTWMscUJBQXFCN0MscURBQVVBLENBQUN1QyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDbEQsSUFBSU0sdUJBQXVCLEtBQUtBLHVCQUF1QixHQUFHO2dCQUN0RCxNQUFNLElBQUlkLE1BQU0sQ0FBQyx3QkFBd0IsRUFBRWMsbUJBQW1CLFlBQVksQ0FBQztZQUMvRTtZQUNBLElBQUlBLHVCQUF1QixHQUFHO2dCQUMxQjNCLFVBQVVwQix3REFBYUEsQ0FBQ3lDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN4QztRQUNKO1FBQ0EsSUFBSXBCLGNBQWM7UUFDbEIsSUFBSSxDQUFDc0IsTUFBTUMsT0FBTyxDQUFDSCxNQUFNLENBQUMsRUFBRSxHQUFHO1lBQzNCLE1BQU0sSUFBSVIsTUFBTTtRQUNwQixPQUNLO1lBQ0QsTUFBTWMscUJBQXFCN0MscURBQVVBLENBQUN1QyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDbEQsSUFBSU0sdUJBQXVCLEtBQUtBLHVCQUF1QixHQUFHO2dCQUN0RCxNQUFNLElBQUlkLE1BQU0sQ0FBQyx3QkFBd0IsRUFBRWMsbUJBQW1CLGdCQUFnQixDQUFDO1lBQ25GO1lBQ0EsSUFBSUEsdUJBQXVCLEdBQUc7Z0JBQzFCMUIsY0FBY29CLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUM5QjtRQUNKO1FBQ0EsSUFBSW5CLFdBQVc7UUFDZixJQUFJLENBQUNxQixNQUFNQyxPQUFPLENBQUNILE1BQU0sQ0FBQyxFQUFFLEdBQUc7WUFDM0IsTUFBTSxJQUFJUixNQUFNO1FBQ3BCLE9BQ0s7WUFDRCxNQUFNYyxxQkFBcUI3QyxxREFBVUEsQ0FBQ3VDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNsRCxJQUFJTSx1QkFBdUIsS0FBS0EsdUJBQXVCLEdBQUc7Z0JBQ3RELE1BQU0sSUFBSWQsTUFBTSxDQUFDLHdCQUF3QixFQUFFYyxtQkFBbUIsYUFBYSxDQUFDO1lBQ2hGO1lBQ0EsSUFBSUEsdUJBQXVCLEdBQUc7Z0JBQzFCekIsV0FBV21CLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUMzQjtRQUNKO1FBQ0EsSUFBSWxCLFdBQVc7UUFDZixJQUFJLENBQUNvQixNQUFNQyxPQUFPLENBQUNILE1BQU0sQ0FBQyxFQUFFLEdBQUc7WUFDM0IsTUFBTSxJQUFJUixNQUFNO1FBQ3BCLE9BQ0s7WUFDRCxNQUFNYyxxQkFBcUI3QyxxREFBVUEsQ0FBQ3VDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNsRCxJQUFJTSx1QkFBdUIsS0FBS0EsdUJBQXVCLEdBQUc7Z0JBQ3RELE1BQU0sSUFBSWQsTUFBTSxDQUFDLHdCQUF3QixFQUFFYyxtQkFBbUIsYUFBYSxDQUFDO1lBQ2hGO1lBQ0EsSUFBSUEsdUJBQXVCLEdBQUc7Z0JBQzFCeEIsV0FBV3JCLHFEQUFVQSxDQUFDdUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3RDO1FBQ0o7UUFDQSxJQUFJakIsVUFBVTtRQUNkLElBQUksQ0FBQ21CLE1BQU1DLE9BQU8sQ0FBQ0gsTUFBTSxDQUFDLEVBQUUsR0FBRztZQUMzQixNQUFNLElBQUlSLE1BQU07UUFDcEIsT0FDSztZQUNELE1BQU1jLHFCQUFxQjdDLHFEQUFVQSxDQUFDdUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2xELElBQUlNLHVCQUF1QixLQUFLQSx1QkFBdUIsR0FBRztnQkFDdEQsTUFBTSxJQUFJZCxNQUFNLENBQUMsd0JBQXdCLEVBQUVjLG1CQUFtQixZQUFZLENBQUM7WUFDL0U7WUFDQSxJQUFJQSx1QkFBdUIsR0FBRztnQkFDMUJ2QixVQUFVdEIscURBQVVBLENBQUN1QyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDckM7UUFDSjtRQUNBLE9BQU8sSUFBSSxDQUFDSixzQkFBc0IsQ0FBQztZQUFFakI7WUFBU0Q7WUFBT0U7WUFBYUM7WUFBVUM7WUFBVUM7UUFBUTtJQUNsRztJQUNBLE9BQU9xQixnQkFBZ0JKLE1BQU0sRUFBRTtRQUMzQixNQUFNLENBQUN0QixPQUFPQyxTQUFTQyxhQUFhQyxTQUFTLEdBQUdtQjtRQUNoRCxPQUFPLElBQUl4QixRQUFRakIsd0RBQWFBLENBQUNtQixRQUFRbkIsd0RBQWFBLENBQUNvQixVQUFVQyxhQUFhQztJQUNsRjtJQUNBVSxZQUFZO1FBQ1IsSUFBSSxJQUFJLENBQUNQLE1BQU0sS0FBSyxRQUFRLElBQUksQ0FBQ0EsTUFBTSxHQUFHZixtREFBUUEsRUFBRTtZQUNoRCxNQUFNLElBQUl1QixNQUFNO1FBQ3BCO1FBQ0EsSUFBSSxJQUFJLENBQUNQLFFBQVEsS0FBSyxRQUFRLElBQUksQ0FBQ0EsUUFBUSxHQUFHaEIsbURBQVFBLEVBQUU7WUFDcEQsTUFBTSxJQUFJdUIsTUFBTTtRQUNwQjtRQUNBLElBQUksSUFBSSxDQUFDTixZQUFZLEtBQUssUUFBUSxJQUFJLENBQUNBLFlBQVksQ0FBQ3FCLE1BQU0sS0FBSyxJQUFJO1lBQy9ELE1BQU0sSUFBSWYsTUFBTTtRQUNwQjtRQUNBLElBQUksSUFBSSxDQUFDTCxTQUFTLEtBQUssUUFBUSxJQUFJLENBQUNBLFNBQVMsQ0FBQ29CLE1BQU0sS0FBSyxJQUFJO1lBQ3pELE1BQU0sSUFBSWYsTUFBTTtRQUNwQjtRQUNBLElBQUksSUFBSSxDQUFDSixTQUFTLEtBQUssUUFBUSxJQUFJLENBQUNBLFNBQVMsR0FBR25CLG1EQUFRQSxFQUFFO1lBQ3RELE1BQU0sSUFBSXVCLE1BQU07UUFDcEI7SUFDSjtJQUNBOztLQUVDLEdBQ0RnQixNQUFNO1FBQ0YsT0FBTztZQUNIbEQsZ0VBQXFCQSxDQUFDLElBQUksQ0FBQ29CLEtBQUs7WUFDaENwQixnRUFBcUJBLENBQUMsSUFBSSxDQUFDcUIsT0FBTztZQUNsQyxJQUFJLENBQUNDLFdBQVc7WUFDaEIsSUFBSSxDQUFDQyxRQUFRO1NBQ2hCO0lBQ0w7SUFDQTs7S0FFQyxHQUNENEIsWUFBWTtRQUNSLE9BQU90RCxnREFBR0EsQ0FBQ3VELE1BQU0sQ0FBQyxJQUFJLENBQUNGLEdBQUc7SUFDOUI7SUFDQUcsMkJBQTJCO1FBQ3ZCLE1BQU1DLGNBQWMsRUFBRTtRQUN0QixNQUFNQyxjQUFjaEQsNkRBQWtCQSxDQUFDO1FBQ3ZDLE1BQU1pRCxhQUFhakQsNkRBQWtCQSxDQUFDO1FBQ3RDLElBQUksSUFBSSxDQUFDbUIsTUFBTSxLQUFLLE1BQU07WUFDdEI0QixZQUFZRyxJQUFJLENBQUM7Z0JBQUNEO2dCQUFZeEQsZ0VBQXFCQSxDQUFDLElBQUksQ0FBQzBCLE1BQU07YUFBRTtRQUNyRSxPQUNLO1lBQ0Q0QixZQUFZRyxJQUFJLENBQUM7Z0JBQUNGO2FBQVk7UUFDbEM7UUFDQSxJQUFJLElBQUksQ0FBQzVCLFFBQVEsS0FBSyxNQUFNO1lBQ3hCMkIsWUFBWUcsSUFBSSxDQUFDO2dCQUFDRDtnQkFBWXhELGdFQUFxQkEsQ0FBQyxJQUFJLENBQUMyQixRQUFRO2FBQUU7UUFDdkUsT0FDSztZQUNEMkIsWUFBWUcsSUFBSSxDQUFDO2dCQUFDRjthQUFZO1FBQ2xDO1FBQ0EsSUFBSSxJQUFJLENBQUMzQixZQUFZLEtBQUssTUFBTTtZQUM1QjBCLFlBQVlHLElBQUksQ0FBQztnQkFBQ0Q7Z0JBQVksSUFBSSxDQUFDNUIsWUFBWTthQUFDO1FBQ3BELE9BQ0s7WUFDRDBCLFlBQVlHLElBQUksQ0FBQztnQkFBQ0Y7YUFBWTtRQUNsQztRQUNBLElBQUksSUFBSSxDQUFDMUIsU0FBUyxLQUFLLE1BQU07WUFDekJ5QixZQUFZRyxJQUFJLENBQUM7Z0JBQUNEO2dCQUFZLElBQUksQ0FBQzNCLFNBQVM7YUFBQztRQUNqRCxPQUNLO1lBQ0R5QixZQUFZRyxJQUFJLENBQUM7Z0JBQUNGO2FBQVk7UUFDbEM7UUFDQSxJQUFJLElBQUksQ0FBQ3pCLFNBQVMsS0FBSyxNQUFNO1lBQ3pCd0IsWUFBWUcsSUFBSSxDQUFDO2dCQUFDRDtnQkFBWWpELDZEQUFrQkEsQ0FBQyxJQUFJLENBQUN1QixTQUFTO2FBQUU7UUFDckUsT0FDSztZQUNEd0IsWUFBWUcsSUFBSSxDQUFDO2dCQUFDRjthQUFZO1FBQ2xDO1FBQ0EsSUFBSSxJQUFJLENBQUN4QixRQUFRLEtBQUssTUFBTTtZQUN4QnVCLFlBQVlHLElBQUksQ0FBQztnQkFBQ0Q7Z0JBQVlqRCw2REFBa0JBLENBQUMsSUFBSSxDQUFDd0IsUUFBUTthQUFFO1FBQ3BFLE9BQ0s7WUFDRHVCLFlBQVlHLElBQUksQ0FBQztnQkFBQ0Y7YUFBWTtRQUNsQztRQUNBLE9BQU8xRCxnREFBR0EsQ0FBQ3VELE1BQU0sQ0FBQ0U7SUFDdEI7SUFDQTs7S0FFQyxHQUNEdEIsYUFBYTtRQUNULElBQUksSUFBSSxDQUFDSCxTQUFTLEtBQUssUUFBUSxJQUFJLENBQUNDLFNBQVMsS0FBSyxNQUFNO1lBQ3BELE1BQU1JLE1BQU0sQ0FBQyxvREFBb0QsQ0FBQztRQUN0RTtRQUNBLE9BQVEsSUFBSyxDQUFDTCxTQUFTLEtBQUssUUFBUSxDQUFDeEIsc0RBQVdBLENBQUMsSUFBSSxDQUFDd0IsU0FBUyxFQUFFakIseURBQWNBLEtBQzFFLElBQUksQ0FBQ2tCLFNBQVMsS0FBSyxRQUFRLElBQUksQ0FBQ0EsU0FBUyxLQUFLO0lBQ3ZEO0lBQ0E7Ozs7S0FJQyxHQUNENEIsVUFBVTtRQUNOLGdEQUFnRDtRQUNoRCxJQUFJLElBQUssQ0FBQy9CLFFBQVEsS0FBSyxRQUFRLElBQUksQ0FBQ04sT0FBTyxLQUFLVixtREFBUUEsSUFDbkQsSUFBSSxDQUFDZSxNQUFNLEtBQUssUUFBUSxJQUFJLENBQUNOLEtBQUssS0FBS1QsbURBQVFBLElBQy9DLElBQUksQ0FBQ2tCLFNBQVMsS0FBSyxRQUFRLENBQUN4QixzREFBV0EsQ0FBQyxJQUFJLENBQUNrQixRQUFRLEVBQUVYLHlEQUFjQSxHQUFJO1lBQzFFLE9BQU87UUFDWDtRQUNBLE9BQVEsSUFBSSxDQUFDUyxPQUFPLEtBQUtWLG1EQUFRQSxJQUM3QixJQUFJLENBQUNTLEtBQUssS0FBS1QsbURBQVFBLElBQ3ZCTixzREFBV0EsQ0FBQyxJQUFJLENBQUNrQixRQUFRLEVBQUVYLHlEQUFjQTtJQUNqRDtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxNQUFNK0MsaUJBQWlCLFNBQVVDLFVBQVU7SUFDOUMsSUFBSTtRQUNBNUMsMkRBQWNBLENBQUM0QztJQUNuQixFQUNBLE9BQU9DLEdBQUc7UUFDTixPQUFPO0lBQ1g7SUFDQSxPQUFPLHNCQUFzQkMsSUFBSSxDQUFDRjtBQUN0QyxFQUFFO0FBQ0Y7Ozs7Ozs7Ozs7O0NBV0MsR0FDTSxNQUFNRyxvQkFBb0IsU0FBVUgsVUFBVSxFQUFFSSxjQUFjO0lBQ2pFakQsOERBQWlCQSxDQUFDNkM7SUFDbEIsTUFBTUssVUFBVWhELDREQUFjQSxDQUFDMkMsWUFBWU0sV0FBVztJQUN0RCxJQUFJQyxTQUFTO0lBQ2IsSUFBSUgsbUJBQW1CM0IsV0FBVztRQUM5QixNQUFNK0IsVUFBVW5FLHdEQUFhQSxDQUFDTyxrREFBT0EsQ0FBQ3dEO1FBQ3RDRyxTQUFTQyxRQUFRQyxRQUFRLEtBQUs7SUFDbEM7SUFDQSxNQUFNQyxRQUFRN0Qsc0RBQVdBLENBQUMwRCxTQUFTRjtJQUNuQyxNQUFNTSxPQUFPckUscURBQVVBLENBQUNKLDBFQUFTQSxDQUFDd0UsUUFBUUUsS0FBSyxDQUFDO0lBQ2hELElBQUlDLE1BQU07SUFDVixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSVQsUUFBUWhCLE1BQU0sRUFBRXlCLElBQUs7UUFDckMsSUFBSUMsU0FBU0osSUFBSSxDQUFDRyxFQUFFLEVBQUUsT0FBTyxHQUFHO1lBQzVCRCxPQUFPUixPQUFPLENBQUNTLEVBQUUsQ0FBQ0UsV0FBVztRQUNqQyxPQUNLO1lBQ0RILE9BQU9SLE9BQU8sQ0FBQ1MsRUFBRTtRQUNyQjtJQUNKO0lBQ0EsT0FBTyxDQUFDLEVBQUUsRUFBRUQsSUFBSSxDQUFDO0FBQ3JCLEVBQUU7QUFDRjs7OztDQUlDLEdBQ00sTUFBTUkseUJBQXlCLFNBQVVqQixVQUFVLEVBQUVJLGNBQWM7SUFDdEUsT0FBT0wsZUFBZUMsZUFBZUcsa0JBQWtCSCxZQUFZSSxvQkFBb0JKO0FBQzNGLEVBQUU7QUFDRjs7OztDQUlDLEdBQ00sTUFBTWtCLGtCQUFrQixTQUFVQyxJQUFJLEVBQUUzRCxLQUFLO0lBQ2hETiwwREFBYUEsQ0FBQ2lFO0lBQ2RqRSwwREFBYUEsQ0FBQ007SUFDZCxJQUFJbkIsd0RBQWFBLENBQUNtQixXQUFXVCxtREFBUUEsRUFBRTtRQUNuQywwREFBMEQ7UUFDMUQsdURBQXVEO1FBQ3ZELE9BQU9iLDBFQUFTQSxDQUFDRCxnREFBR0EsQ0FBQ3VELE1BQU0sQ0FBQztZQUFDMkI7WUFBTUMsV0FBV0QsSUFBSSxDQUFDLEVBQUU7U0FBRSxHQUFHRSxRQUFRLENBQUMsQ0FBQztJQUN4RTtJQUNBLDBDQUEwQztJQUMxQyxPQUFPbkYsMEVBQVNBLENBQUNELGdEQUFHQSxDQUFDdUQsTUFBTSxDQUFDO1FBQUMyQjtRQUFNM0Q7S0FBTSxHQUFHNkQsUUFBUSxDQUFDLENBQUM7QUFDMUQsRUFBRTtBQUNGOzs7OztDQUtDLEdBQ00sTUFBTUMsbUJBQW1CLFNBQVVILElBQUksRUFBRUksSUFBSSxFQUFFQyxRQUFRO0lBQzFEdEUsMERBQWFBLENBQUNpRTtJQUNkakUsMERBQWFBLENBQUNxRTtJQUNkckUsMERBQWFBLENBQUNzRTtJQUNkLElBQUlMLEtBQUs5QixNQUFNLEtBQUssSUFBSTtRQUNwQixNQUFNLElBQUlmLE1BQU07SUFDcEI7SUFDQSxJQUFJaUQsS0FBS2xDLE1BQU0sS0FBSyxJQUFJO1FBQ3BCLE1BQU0sSUFBSWYsTUFBTTtJQUNwQjtJQUNBLE1BQU0rQixVQUFVbkUsMEVBQVNBLENBQUNNLHNEQUFXQSxDQUFDRSxxREFBVUEsQ0FBQyxTQUFTeUUsTUFBTUksTUFBTXJGLDBFQUFTQSxDQUFDc0Y7SUFDaEYsT0FBT25CLFFBQVFnQixRQUFRLENBQUMsQ0FBQztBQUM3QixFQUFFO0FBQ0Y7O0NBRUMsR0FDTSxNQUFNSSxpQkFBaUIsU0FBVUMsVUFBVTtJQUM5QyxPQUFPdkYseUVBQVNBLENBQUN3RixLQUFLLENBQUNDLGlCQUFpQixDQUFDRjtBQUM3QyxFQUFFO0FBQ0Y7Ozs7O0NBS0MsR0FDTSxNQUFNRyxnQkFBZ0IsU0FBVUMsU0FBUyxFQUFFQyxXQUFXLEtBQUs7SUFDOUQ3RSwwREFBYUEsQ0FBQzRFO0lBQ2QsSUFBSUEsVUFBVXpDLE1BQU0sS0FBSyxJQUFJO1FBQ3pCLGdDQUFnQztRQUNoQyxpREFBaUQ7UUFDakQsSUFBSTtZQUNBbEQseUVBQVNBLENBQUM2RixlQUFlLENBQUNDLE9BQU8sQ0FBQ3pGLHNEQUFXQSxDQUFDNEUsV0FBV0QsSUFBSSxDQUFDO2dCQUFDO2FBQUUsR0FBR1c7WUFDcEUsT0FBTztRQUNYLEVBQ0EsT0FBTzdCLEdBQUc7WUFDTixPQUFPO1FBQ1g7SUFDSjtJQUNBLElBQUksQ0FBQzhCLFVBQVU7UUFDWCxPQUFPO0lBQ1g7SUFDQSxJQUFJO1FBQ0E1Rix5RUFBU0EsQ0FBQzZGLGVBQWUsQ0FBQ0MsT0FBTyxDQUFDSDtRQUNsQyxPQUFPO0lBQ1gsRUFDQSxPQUFPN0IsR0FBRztRQUNOLE9BQU87SUFDWDtBQUNKLEVBQUU7QUFDRjs7Ozs7Q0FLQyxHQUNNLE1BQU1pQyxlQUFlLFNBQVVDLE1BQU0sRUFBRUosV0FBVyxLQUFLO0lBQzFEN0UsMERBQWFBLENBQUNpRjtJQUNkLElBQUlKLFlBQVlJLE9BQU85QyxNQUFNLEtBQUssSUFBSTtRQUNsQzhDLFNBQVNoRyx5RUFBU0EsQ0FBQzZGLGVBQWUsQ0FBQ0MsT0FBTyxDQUFDRSxRQUFRQyxVQUFVLENBQUMsT0FBT3hCLEtBQUssQ0FBQztJQUMvRTtJQUNBLElBQUl1QixPQUFPOUMsTUFBTSxLQUFLLElBQUk7UUFDdEIsTUFBTSxJQUFJZixNQUFNO0lBQ3BCO0lBQ0EsMENBQTBDO0lBQzFDLE9BQU9wQywwRUFBU0EsQ0FBQ2lHLFFBQVFkLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZDLEVBQUU7QUFDSyxNQUFNZ0Isa0JBQWtCSCxhQUFhO0FBQzVDOzs7Q0FHQyxHQUNNLE1BQU1JLGtCQUFrQixTQUFVWixVQUFVO0lBQy9DeEUsMERBQWFBLENBQUN3RTtJQUNkLDZDQUE2QztJQUM3QyxPQUFPdkYseUVBQVNBLENBQUM2RixlQUFlLENBQUNPLGNBQWMsQ0FBQ2IsWUFBWVUsVUFBVSxDQUFDLE9BQU94QixLQUFLLENBQUM7QUFDeEYsRUFBRTtBQUNGOzs7Q0FHQyxHQUNNLE1BQU00QixtQkFBbUIsU0FBVWQsVUFBVTtJQUNoRCxPQUFPVyxnQkFBZ0JDLGdCQUFnQlo7QUFDM0MsRUFBRTtBQUNGOztDQUVDLEdBQ00sTUFBTWUsZUFBZSxTQUFVWCxTQUFTO0lBQzNDNUUsMERBQWFBLENBQUM0RTtJQUNkLElBQUlBLFVBQVV6QyxNQUFNLEtBQUssSUFBSTtRQUN6QnlDLFlBQVkzRix5RUFBU0EsQ0FBQzZGLGVBQWUsQ0FBQ0MsT0FBTyxDQUFDSCxXQUFXTSxVQUFVLENBQUMsT0FBT3hCLEtBQUssQ0FBQztJQUNyRjtJQUNBLE9BQU9rQjtBQUNYLEVBQUU7QUFDRjs7Q0FFQyxHQUNNLE1BQU1ZLGNBQWM7SUFDdkIsTUFBTUMsZ0JBQWdCO0lBQ3RCLE1BQU1DLE9BQU85RixnREFBS0EsQ0FBQzZGO0lBQ25CLE9BQU9yRyxxREFBVUEsQ0FBQ3NHO0FBQ3RCLEVBQUU7QUFDRjs7Q0FFQyxHQUNNLE1BQU1DLGdCQUFnQixTQUFVN0MsVUFBVTtJQUM3QyxJQUFJO1FBQ0E1QywyREFBY0EsQ0FBQzRDO0lBQ25CLEVBQ0EsT0FBT0MsR0FBRztRQUNOLE9BQU87SUFDWDtJQUNBLE1BQU02QyxXQUFXSjtJQUNqQixPQUFPSSxhQUFhOUM7QUFDeEIsRUFBRTtBQUNLLFNBQVMrQyxvQkFBb0JDLElBQUk7SUFDcEMsTUFBTSxDQUFDeEYsT0FBT0MsU0FBU0MsYUFBYUMsU0FBUyxHQUFHcUY7SUFDaEQsT0FBTztRQUNIeEY7UUFDQUM7UUFDQUMsWUFBWTJCLE1BQU0sS0FBSyxJQUFJcEMsd0RBQWFBLEdBQUdTO1FBQzNDQyxTQUFTMEIsTUFBTSxLQUFLLElBQUlyQyx5REFBY0EsR0FBR1c7S0FDNUM7QUFDTDtBQUNBLE1BQU1zRixnQkFBZ0IsSUFBSTdCLFdBQVc7QUFDOUIsU0FBUzhCLGtCQUFrQkYsSUFBSTtJQUNsQyxNQUFNLENBQUN4RixPQUFPQyxTQUFTQyxhQUFhQyxTQUFTLEdBQUdxRjtJQUNoRCxPQUFPO1FBQ0h4RjtRQUNBQztRQUNBaEIsc0RBQVdBLENBQUNpQixhQUFhVCx3REFBYUEsSUFBSWdHLGdCQUFnQnZGO1FBQzFEakIsc0RBQVdBLENBQUNrQixVQUFVWCx5REFBY0EsSUFBSWlHLGdCQUFnQnRGO0tBQzNEO0FBQ0w7QUFDQTs7OztDQUlDLEdBQ00sU0FBU3dGLGlCQUFpQkgsSUFBSSxFQUFFSSxjQUFjLElBQUk7SUFDckQsTUFBTUMsY0FBY0QsY0FBY0wsb0JBQW9CQyxRQUFRQTtJQUM5RCxPQUFPL0csZ0RBQUdBLENBQUN1RCxNQUFNLENBQUM2RDtBQUN0QixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3FvZ25pdGEvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9hY2NvdW50LmpzPzVlZDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUkxQIH0gZnJvbSAnQGV0aGVyZXVtanMvcmxwJztcbmltcG9ydCB7IGtlY2NhazI1NiB9IGZyb20gJ2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9rZWNjYWsuanMnO1xuaW1wb3J0IHsgc2VjcDI1NmsxIH0gZnJvbSAnZXRoZXJldW0tY3J5cHRvZ3JhcGh5L3NlY3AyNTZrMS5qcyc7XG5pbXBvcnQgeyBiaWdJbnRUb1VucGFkZGVkQnl0ZXMsIGJ5dGVzVG9CaWdJbnQsIGJ5dGVzVG9IZXgsIGJ5dGVzVG9JbnQsIGNvbmNhdEJ5dGVzLCBlcXVhbHNCeXRlcywgaGV4VG9CeXRlcywgaW50VG9VbnBhZGRlZEJ5dGVzLCB0b0J5dGVzLCB1dGY4VG9CeXRlcywgemVyb3MsIH0gZnJvbSAnLi9ieXRlcy5qcyc7XG5pbXBvcnQgeyBCSUdJTlRfMCwgS0VDQ0FLMjU2X05VTEwsIEtFQ0NBSzI1Nl9STFAgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBhc3NlcnRJc0J5dGVzLCBhc3NlcnRJc0hleFN0cmluZywgYXNzZXJ0SXNTdHJpbmcgfSBmcm9tICcuL2hlbHBlcnMuanMnO1xuaW1wb3J0IHsgc3RyaXBIZXhQcmVmaXggfSBmcm9tICcuL2ludGVybmFsLmpzJztcbi8qKlxuICogQWNjb3VudCBjbGFzcyB0byBsb2FkIGFuZCBtYWludGFpbiB0aGUgIGJhc2ljIGFjY291bnQgb2JqZWN0cy5cbiAqIFN1cHBvcnRzIHBhcnRpYWwgbG9hZGluZyBhbmQgYWNjZXNzIHJlcXVpcmVkIGZvciB2ZXJrbGUgd2l0aCBudWxsXG4gKiBhcyB0aGUgcGxhY2Vob2xkZXIuXG4gKlxuICogTm90ZTogcGFzc2luZyB1bmRlZmluZWQgaW4gY29uc3RydWN0b3IgaXMgZGlmZmVyZW50IGZyb20gbnVsbFxuICogV2hpbGUgdW5kZWZpbmVkIGxlYWRzIHRvIGRlZmF1bHQgYXNzaWdubWVudCwgbnVsbCBpcyByZXRhaW5lZFxuICogdG8gdHJhY2sgdGhlIGluZm9ybWF0aW9uIG5vdCBhdmFpbGFibGUvbG9hZGVkIGJlY2F1c2Ugb2YgcGFydGlhbFxuICogd2l0bmVzcyBhY2Nlc3NcbiAqL1xuZXhwb3J0IGNsYXNzIEFjY291bnQge1xuICAgIC8qKlxuICAgICAqIFRoaXMgY29uc3RydWN0b3IgYXNzaWducyBhbmQgdmFsaWRhdGVzIHRoZSB2YWx1ZXMuXG4gICAgICogVXNlIHRoZSBzdGF0aWMgZmFjdG9yeSBtZXRob2RzIHRvIGFzc2lzdCBpbiBjcmVhdGluZyBhbiBBY2NvdW50IGZyb20gdmFyeWluZyBkYXRhIHR5cGVzLlxuICAgICAqIHVuZGVmaW5lZCBnZXQgYXNzaWduZWQgd2l0aCB0aGUgZGVmYXVsdHMgcHJlc2VudCwgYnV0IG51bGwgYXJncyBhcmUgcmV0YWluZWQgYXMgaXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihub25jZSA9IEJJR0lOVF8wLCBiYWxhbmNlID0gQklHSU5UXzAsIHN0b3JhZ2VSb290ID0gS0VDQ0FLMjU2X1JMUCwgY29kZUhhc2ggPSBLRUNDQUsyNTZfTlVMTCwgY29kZVNpemUgPSBudWxsLCB2ZXJzaW9uID0gMCkge1xuICAgICAgICB0aGlzLl9ub25jZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2JhbGFuY2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9zdG9yYWdlUm9vdCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NvZGVIYXNoID0gbnVsbDtcbiAgICAgICAgLy8gY29kZVNpemUgYW5kIHZlcnNpb24gaXMgc2VwYXJhdGVseSBzdG9yZWQgaW4gVktUXG4gICAgICAgIHRoaXMuX2NvZGVTaXplID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdmVyc2lvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuX25vbmNlID0gbm9uY2U7XG4gICAgICAgIHRoaXMuX2JhbGFuY2UgPSBiYWxhbmNlO1xuICAgICAgICB0aGlzLl9zdG9yYWdlUm9vdCA9IHN0b3JhZ2VSb290O1xuICAgICAgICB0aGlzLl9jb2RlSGFzaCA9IGNvZGVIYXNoO1xuICAgICAgICBpZiAoY29kZVNpemUgPT09IG51bGwgJiYgY29kZUhhc2ggIT09IG51bGwgJiYgIXRoaXMuaXNDb250cmFjdCgpKSB7XG4gICAgICAgICAgICBjb2RlU2l6ZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY29kZVNpemUgPSBjb2RlU2l6ZTtcbiAgICAgICAgdGhpcy5fdmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIHRoaXMuX3ZhbGlkYXRlKCk7XG4gICAgfVxuICAgIGdldCB2ZXJzaW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fdmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZlcnNpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgdmVyc2lvbj0ke3RoaXMuX3ZlcnNpb259IG5vdCBsb2FkZWRgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQgdmVyc2lvbihfdmVyc2lvbikge1xuICAgICAgICB0aGlzLl92ZXJzaW9uID0gX3ZlcnNpb247XG4gICAgfVxuICAgIGdldCBub25jZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX25vbmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbm9uY2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgbm9uY2U9JHt0aGlzLl9ub25jZX0gbm90IGxvYWRlZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldCBub25jZShfbm9uY2UpIHtcbiAgICAgICAgdGhpcy5fbm9uY2UgPSBfbm9uY2U7XG4gICAgfVxuICAgIGdldCBiYWxhbmNlKCkge1xuICAgICAgICBpZiAodGhpcy5fYmFsYW5jZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JhbGFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgYmFsYW5jZT0ke3RoaXMuX2JhbGFuY2V9IG5vdCBsb2FkZWRgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQgYmFsYW5jZShfYmFsYW5jZSkge1xuICAgICAgICB0aGlzLl9iYWxhbmNlID0gX2JhbGFuY2U7XG4gICAgfVxuICAgIGdldCBzdG9yYWdlUm9vdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0b3JhZ2VSb290ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RvcmFnZVJvb3Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgc3RvcmFnZVJvb3Q9JHt0aGlzLl9zdG9yYWdlUm9vdH0gbm90IGxvYWRlZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldCBzdG9yYWdlUm9vdChfc3RvcmFnZVJvb3QpIHtcbiAgICAgICAgdGhpcy5fc3RvcmFnZVJvb3QgPSBfc3RvcmFnZVJvb3Q7XG4gICAgfVxuICAgIGdldCBjb2RlSGFzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvZGVIYXNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29kZUhhc2g7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgY29kZUhhc2g9JHt0aGlzLl9jb2RlSGFzaH0gbm90IGxvYWRlZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldCBjb2RlSGFzaChfY29kZUhhc2gpIHtcbiAgICAgICAgdGhpcy5fY29kZUhhc2ggPSBfY29kZUhhc2g7XG4gICAgfVxuICAgIGdldCBjb2RlU2l6ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvZGVTaXplICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29kZVNpemU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgY29kZUhhc2g9JHt0aGlzLl9jb2RlU2l6ZX0gbm90IGxvYWRlZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldCBjb2RlU2l6ZShfY29kZVNpemUpIHtcbiAgICAgICAgdGhpcy5fY29kZVNpemUgPSBfY29kZVNpemU7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQWNjb3VudERhdGEoYWNjb3VudERhdGEpIHtcbiAgICAgICAgY29uc3QgeyBub25jZSwgYmFsYW5jZSwgc3RvcmFnZVJvb3QsIGNvZGVIYXNoIH0gPSBhY2NvdW50RGF0YTtcbiAgICAgICAgaWYgKG5vbmNlID09PSBudWxsIHx8IGJhbGFuY2UgPT09IG51bGwgfHwgc3RvcmFnZVJvb3QgPT09IG51bGwgfHwgY29kZUhhc2ggPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBQYXJ0aWFsIGZpZWxkcyBub3Qgc3VwcG9ydGVkIGluIGZyb21BY2NvdW50RGF0YWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQWNjb3VudChub25jZSAhPT0gdW5kZWZpbmVkID8gYnl0ZXNUb0JpZ0ludCh0b0J5dGVzKG5vbmNlKSkgOiB1bmRlZmluZWQsIGJhbGFuY2UgIT09IHVuZGVmaW5lZCA/IGJ5dGVzVG9CaWdJbnQodG9CeXRlcyhiYWxhbmNlKSkgOiB1bmRlZmluZWQsIHN0b3JhZ2VSb290ICE9PSB1bmRlZmluZWQgPyB0b0J5dGVzKHN0b3JhZ2VSb290KSA6IHVuZGVmaW5lZCwgY29kZUhhc2ggIT09IHVuZGVmaW5lZCA/IHRvQnl0ZXMoY29kZUhhc2gpIDogdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21QYXJ0aWFsQWNjb3VudERhdGEocGFydGlhbEFjY291bnREYXRhKSB7XG4gICAgICAgIGNvbnN0IHsgbm9uY2UsIGJhbGFuY2UsIHN0b3JhZ2VSb290LCBjb2RlSGFzaCwgY29kZVNpemUsIHZlcnNpb24gfSA9IHBhcnRpYWxBY2NvdW50RGF0YTtcbiAgICAgICAgaWYgKG5vbmNlID09PSBudWxsICYmXG4gICAgICAgICAgICBiYWxhbmNlID09PSBudWxsICYmXG4gICAgICAgICAgICBzdG9yYWdlUm9vdCA9PT0gbnVsbCAmJlxuICAgICAgICAgICAgY29kZUhhc2ggPT09IG51bGwgJiZcbiAgICAgICAgICAgIGNvZGVTaXplID09PSBudWxsICYmXG4gICAgICAgICAgICB2ZXJzaW9uID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgQWxsIHBhcnRpYWwgZmllbGRzIG51bGxgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEFjY291bnQobm9uY2UgIT09IHVuZGVmaW5lZCAmJiBub25jZSAhPT0gbnVsbCA/IGJ5dGVzVG9CaWdJbnQodG9CeXRlcyhub25jZSkpIDogbm9uY2UsIGJhbGFuY2UgIT09IHVuZGVmaW5lZCAmJiBiYWxhbmNlICE9PSBudWxsID8gYnl0ZXNUb0JpZ0ludCh0b0J5dGVzKGJhbGFuY2UpKSA6IGJhbGFuY2UsIHN0b3JhZ2VSb290ICE9PSB1bmRlZmluZWQgJiYgc3RvcmFnZVJvb3QgIT09IG51bGwgPyB0b0J5dGVzKHN0b3JhZ2VSb290KSA6IHN0b3JhZ2VSb290LCBjb2RlSGFzaCAhPT0gdW5kZWZpbmVkICYmIGNvZGVIYXNoICE9PSBudWxsID8gdG9CeXRlcyhjb2RlSGFzaCkgOiBjb2RlSGFzaCwgY29kZVNpemUgIT09IHVuZGVmaW5lZCAmJiBjb2RlU2l6ZSAhPT0gbnVsbCA/IGJ5dGVzVG9JbnQodG9CeXRlcyhjb2RlU2l6ZSkpIDogY29kZVNpemUsIHZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiB2ZXJzaW9uICE9PSBudWxsID8gYnl0ZXNUb0ludCh0b0J5dGVzKHZlcnNpb24pKSA6IHZlcnNpb24pO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVJscFNlcmlhbGl6ZWRBY2NvdW50KHNlcmlhbGl6ZWQpIHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gUkxQLmRlY29kZShzZXJpYWxpemVkKTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzZXJpYWxpemVkIGFjY291bnQgaW5wdXQuIE11c3QgYmUgYXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5mcm9tVmFsdWVzQXJyYXkodmFsdWVzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21SbHBTZXJpYWxpemVkUGFydGlhbEFjY291bnQoc2VyaWFsaXplZCkge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBSTFAuZGVjb2RlKHNlcmlhbGl6ZWQpO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNlcmlhbGl6ZWQgYWNjb3VudCBpbnB1dC4gTXVzdCBiZSBhcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBub25jZSA9IG51bGw7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXNbMF0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcGFydGlhbCBub25jZSBlbmNvZGluZy4gTXVzdCBiZSBhcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaXNOb3ROdWxsSW5kaWNhdG9yID0gYnl0ZXNUb0ludCh2YWx1ZXNbMF1bMF0pO1xuICAgICAgICAgICAgaWYgKGlzTm90TnVsbEluZGljYXRvciAhPT0gMCAmJiBpc05vdE51bGxJbmRpY2F0b3IgIT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaXNOdWxsSW5kaWNhdG9yPSR7aXNOb3ROdWxsSW5kaWNhdG9yfSBmb3Igbm9uY2VgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc05vdE51bGxJbmRpY2F0b3IgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBub25jZSA9IGJ5dGVzVG9CaWdJbnQodmFsdWVzWzBdWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgYmFsYW5jZSA9IG51bGw7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXNbMV0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcGFydGlhbCBiYWxhbmNlIGVuY29kaW5nLiBNdXN0IGJlIGFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpc05vdE51bGxJbmRpY2F0b3IgPSBieXRlc1RvSW50KHZhbHVlc1sxXVswXSk7XG4gICAgICAgICAgICBpZiAoaXNOb3ROdWxsSW5kaWNhdG9yICE9PSAwICYmIGlzTm90TnVsbEluZGljYXRvciAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBpc051bGxJbmRpY2F0b3I9JHtpc05vdE51bGxJbmRpY2F0b3J9IGZvciBiYWxhbmNlYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNOb3ROdWxsSW5kaWNhdG9yID09PSAxKSB7XG4gICAgICAgICAgICAgICAgYmFsYW5jZSA9IGJ5dGVzVG9CaWdJbnQodmFsdWVzWzFdWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgc3RvcmFnZVJvb3QgPSBudWxsO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzWzJdKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHBhcnRpYWwgc3RvcmFnZVJvb3QgZW5jb2RpbmcuIE11c3QgYmUgYXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGlzTm90TnVsbEluZGljYXRvciA9IGJ5dGVzVG9JbnQodmFsdWVzWzJdWzBdKTtcbiAgICAgICAgICAgIGlmIChpc05vdE51bGxJbmRpY2F0b3IgIT09IDAgJiYgaXNOb3ROdWxsSW5kaWNhdG9yICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGlzTnVsbEluZGljYXRvcj0ke2lzTm90TnVsbEluZGljYXRvcn0gZm9yIHN0b3JhZ2VSb290YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNOb3ROdWxsSW5kaWNhdG9yID09PSAxKSB7XG4gICAgICAgICAgICAgICAgc3RvcmFnZVJvb3QgPSB2YWx1ZXNbMl1bMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvZGVIYXNoID0gbnVsbDtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlc1szXSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwYXJ0aWFsIGNvZGVIYXNoIGVuY29kaW5nLiBNdXN0IGJlIGFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpc05vdE51bGxJbmRpY2F0b3IgPSBieXRlc1RvSW50KHZhbHVlc1szXVswXSk7XG4gICAgICAgICAgICBpZiAoaXNOb3ROdWxsSW5kaWNhdG9yICE9PSAwICYmIGlzTm90TnVsbEluZGljYXRvciAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBpc051bGxJbmRpY2F0b3I9JHtpc05vdE51bGxJbmRpY2F0b3J9IGZvciBjb2RlSGFzaGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzTm90TnVsbEluZGljYXRvciA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGNvZGVIYXNoID0gdmFsdWVzWzNdWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBjb2RlU2l6ZSA9IG51bGw7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXNbNF0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcGFydGlhbCBjb2RlU2l6ZSBlbmNvZGluZy4gTXVzdCBiZSBhcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaXNOb3ROdWxsSW5kaWNhdG9yID0gYnl0ZXNUb0ludCh2YWx1ZXNbNF1bMF0pO1xuICAgICAgICAgICAgaWYgKGlzTm90TnVsbEluZGljYXRvciAhPT0gMCAmJiBpc05vdE51bGxJbmRpY2F0b3IgIT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaXNOdWxsSW5kaWNhdG9yPSR7aXNOb3ROdWxsSW5kaWNhdG9yfSBmb3IgY29kZVNpemVgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc05vdE51bGxJbmRpY2F0b3IgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBjb2RlU2l6ZSA9IGJ5dGVzVG9JbnQodmFsdWVzWzRdWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgdmVyc2lvbiA9IG51bGw7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXNbNV0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcGFydGlhbCB2ZXJzaW9uIGVuY29kaW5nLiBNdXN0IGJlIGFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpc05vdE51bGxJbmRpY2F0b3IgPSBieXRlc1RvSW50KHZhbHVlc1s1XVswXSk7XG4gICAgICAgICAgICBpZiAoaXNOb3ROdWxsSW5kaWNhdG9yICE9PSAwICYmIGlzTm90TnVsbEluZGljYXRvciAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBpc051bGxJbmRpY2F0b3I9JHtpc05vdE51bGxJbmRpY2F0b3J9IGZvciB2ZXJzaW9uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNOb3ROdWxsSW5kaWNhdG9yID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdmVyc2lvbiA9IGJ5dGVzVG9JbnQodmFsdWVzWzVdWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5mcm9tUGFydGlhbEFjY291bnREYXRhKHsgYmFsYW5jZSwgbm9uY2UsIHN0b3JhZ2VSb290LCBjb2RlSGFzaCwgY29kZVNpemUsIHZlcnNpb24gfSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tVmFsdWVzQXJyYXkodmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IFtub25jZSwgYmFsYW5jZSwgc3RvcmFnZVJvb3QsIGNvZGVIYXNoXSA9IHZhbHVlcztcbiAgICAgICAgcmV0dXJuIG5ldyBBY2NvdW50KGJ5dGVzVG9CaWdJbnQobm9uY2UpLCBieXRlc1RvQmlnSW50KGJhbGFuY2UpLCBzdG9yYWdlUm9vdCwgY29kZUhhc2gpO1xuICAgIH1cbiAgICBfdmFsaWRhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9ub25jZSAhPT0gbnVsbCAmJiB0aGlzLl9ub25jZSA8IEJJR0lOVF8wKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vbmNlIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYmFsYW5jZSAhPT0gbnVsbCAmJiB0aGlzLl9iYWxhbmNlIDwgQklHSU5UXzApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFsYW5jZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3N0b3JhZ2VSb290ICE9PSBudWxsICYmIHRoaXMuX3N0b3JhZ2VSb290Lmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc3RvcmFnZVJvb3QgbXVzdCBoYXZlIGEgbGVuZ3RoIG9mIDMyJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2NvZGVIYXNoICE9PSBudWxsICYmIHRoaXMuX2NvZGVIYXNoLmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY29kZUhhc2ggbXVzdCBoYXZlIGEgbGVuZ3RoIG9mIDMyJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2NvZGVTaXplICE9PSBudWxsICYmIHRoaXMuX2NvZGVTaXplIDwgQklHSU5UXzApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY29kZVNpemUgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVybycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgVWludDhBcnJheXMgb2YgdGhlIHJhdyBieXRlcyBmb3IgdGhlIGFjY291bnQsIGluIG9yZGVyLlxuICAgICAqL1xuICAgIHJhdygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGJpZ0ludFRvVW5wYWRkZWRCeXRlcyh0aGlzLm5vbmNlKSxcbiAgICAgICAgICAgIGJpZ0ludFRvVW5wYWRkZWRCeXRlcyh0aGlzLmJhbGFuY2UpLFxuICAgICAgICAgICAgdGhpcy5zdG9yYWdlUm9vdCxcbiAgICAgICAgICAgIHRoaXMuY29kZUhhc2gsXG4gICAgICAgIF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFJMUCBzZXJpYWxpemF0aW9uIG9mIHRoZSBhY2NvdW50IGFzIGEgYFVpbnQ4QXJyYXlgLlxuICAgICAqL1xuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIFJMUC5lbmNvZGUodGhpcy5yYXcoKSk7XG4gICAgfVxuICAgIHNlcmlhbGl6ZVdpdGhQYXJ0aWFsSW5mbygpIHtcbiAgICAgICAgY29uc3QgcGFydGlhbERhdGEgPSBbXTtcbiAgICAgICAgY29uc3QgemVyb0VuY29kZWQgPSBpbnRUb1VucGFkZGVkQnl0ZXMoMCk7XG4gICAgICAgIGNvbnN0IG9uZUVuY29kZWQgPSBpbnRUb1VucGFkZGVkQnl0ZXMoMSk7XG4gICAgICAgIGlmICh0aGlzLl9ub25jZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcGFydGlhbERhdGEucHVzaChbb25lRW5jb2RlZCwgYmlnSW50VG9VbnBhZGRlZEJ5dGVzKHRoaXMuX25vbmNlKV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFydGlhbERhdGEucHVzaChbemVyb0VuY29kZWRdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYmFsYW5jZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcGFydGlhbERhdGEucHVzaChbb25lRW5jb2RlZCwgYmlnSW50VG9VbnBhZGRlZEJ5dGVzKHRoaXMuX2JhbGFuY2UpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXJ0aWFsRGF0YS5wdXNoKFt6ZXJvRW5jb2RlZF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zdG9yYWdlUm9vdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcGFydGlhbERhdGEucHVzaChbb25lRW5jb2RlZCwgdGhpcy5fc3RvcmFnZVJvb3RdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhcnRpYWxEYXRhLnB1c2goW3plcm9FbmNvZGVkXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2NvZGVIYXNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwYXJ0aWFsRGF0YS5wdXNoKFtvbmVFbmNvZGVkLCB0aGlzLl9jb2RlSGFzaF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFydGlhbERhdGEucHVzaChbemVyb0VuY29kZWRdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY29kZVNpemUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHBhcnRpYWxEYXRhLnB1c2goW29uZUVuY29kZWQsIGludFRvVW5wYWRkZWRCeXRlcyh0aGlzLl9jb2RlU2l6ZSldKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhcnRpYWxEYXRhLnB1c2goW3plcm9FbmNvZGVkXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHBhcnRpYWxEYXRhLnB1c2goW29uZUVuY29kZWQsIGludFRvVW5wYWRkZWRCeXRlcyh0aGlzLl92ZXJzaW9uKV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFydGlhbERhdGEucHVzaChbemVyb0VuY29kZWRdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUkxQLmVuY29kZShwYXJ0aWFsRGF0YSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBgQm9vbGVhbmAgZGV0ZXJtaW5pbmcgaWYgdGhlIGFjY291bnQgaXMgYSBjb250cmFjdC5cbiAgICAgKi9cbiAgICBpc0NvbnRyYWN0KCkge1xuICAgICAgICBpZiAodGhpcy5fY29kZUhhc2ggPT09IG51bGwgJiYgdGhpcy5fY29kZVNpemUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBJbnN1ZmZpY2llbnQgZGF0YSBhcyBjb2RlSGFzaD1udWxsIGFuZCBjb2RlU2l6ZT1udWxsYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgodGhpcy5fY29kZUhhc2ggIT09IG51bGwgJiYgIWVxdWFsc0J5dGVzKHRoaXMuX2NvZGVIYXNoLCBLRUNDQUsyNTZfTlVMTCkpIHx8XG4gICAgICAgICAgICAodGhpcy5fY29kZVNpemUgIT09IG51bGwgJiYgdGhpcy5fY29kZVNpemUgIT09IDApKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGBCb29sZWFuYCBkZXRlcm1pbmluZyBpZiB0aGUgYWNjb3VudCBpcyBlbXB0eSBjb21wbHlpbmcgdG8gdGhlIGRlZmluaXRpb24gb2ZcbiAgICAgKiBhY2NvdW50IGVtcHRpbmVzcyBpbiBbRUlQLTE2MV0oaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xNjEpOlxuICAgICAqIFwiQW4gYWNjb3VudCBpcyBjb25zaWRlcmVkIGVtcHR5IHdoZW4gaXQgaGFzIG5vIGNvZGUgYW5kIHplcm8gbm9uY2UgYW5kIHplcm8gYmFsYW5jZS5cIlxuICAgICAqL1xuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIC8vIGhlbHBmdWwgZm9yIGRldGVybWluYXRpb24gaW4gcGFydGlhbCBhY2NvdW50c1xuICAgICAgICBpZiAoKHRoaXMuX2JhbGFuY2UgIT09IG51bGwgJiYgdGhpcy5iYWxhbmNlICE9PSBCSUdJTlRfMCkgfHxcbiAgICAgICAgICAgICh0aGlzLl9ub25jZSA9PT0gbnVsbCAmJiB0aGlzLm5vbmNlICE9PSBCSUdJTlRfMCkgfHxcbiAgICAgICAgICAgICh0aGlzLl9jb2RlSGFzaCAhPT0gbnVsbCAmJiAhZXF1YWxzQnl0ZXModGhpcy5jb2RlSGFzaCwgS0VDQ0FLMjU2X05VTEwpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodGhpcy5iYWxhbmNlID09PSBCSUdJTlRfMCAmJlxuICAgICAgICAgICAgdGhpcy5ub25jZSA9PT0gQklHSU5UXzAgJiZcbiAgICAgICAgICAgIGVxdWFsc0J5dGVzKHRoaXMuY29kZUhhc2gsIEtFQ0NBSzI1Nl9OVUxMKSk7XG4gICAgfVxufVxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGFkZHJlc3MgaXMgYSB2YWxpZC4gQWNjZXB0cyBjaGVja3N1bW1lZCBhZGRyZXNzZXMgdG9vLlxuICovXG5leHBvcnQgY29uc3QgaXNWYWxpZEFkZHJlc3MgPSBmdW5jdGlvbiAoaGV4QWRkcmVzcykge1xuICAgIHRyeSB7XG4gICAgICAgIGFzc2VydElzU3RyaW5nKGhleEFkZHJlc3MpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAvXjB4WzAtOWEtZkEtRl17NDB9JC8udGVzdChoZXhBZGRyZXNzKTtcbn07XG4vKipcbiAqIFJldHVybnMgYSBjaGVja3N1bW1lZCBhZGRyZXNzLlxuICpcbiAqIElmIGFuIGVpcDExOTFDaGFpbklkIGlzIHByb3ZpZGVkLCB0aGUgY2hhaW5JZCB3aWxsIGJlIGluY2x1ZGVkIGluIHRoZSBjaGVja3N1bSBjYWxjdWxhdGlvbi4gVGhpc1xuICogaGFzIHRoZSBlZmZlY3Qgb2YgY2hlY2tzdW1tZWQgYWRkcmVzc2VzIGZvciBvbmUgY2hhaW4gaGF2aW5nIGludmFsaWQgY2hlY2tzdW1zIGZvciBvdGhlcnMuXG4gKiBGb3IgbW9yZSBkZXRhaWxzIHNlZSBbRUlQLTExOTFdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTE5MSkuXG4gKlxuICogV0FSTklORzogQ2hlY2tzdW1zIHdpdGggYW5kIHdpdGhvdXQgdGhlIGNoYWluSWQgd2lsbCBkaWZmZXIgYW5kIHRoZSBFSVAtMTE5MSBjaGVja3N1bSBpcyBub3RcbiAqIGJhY2t3YXJkcyBjb21wYXRpYmxlIHRvIHRoZSBvcmlnaW5hbCB3aWRlbHkgYWRvcHRlZCBjaGVja3N1bSBmb3JtYXQgc3RhbmRhcmQgaW50cm9kdWNlZCBpblxuICogW0VJUC01NV0oaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC01NSksIHNvIHRoaXMgd2lsbCBicmVhayBpbiBleGlzdGluZyBhcHBsaWNhdGlvbnMuXG4gKiBVc2FnZSBvZiB0aGlzIEVJUCBpcyB0aGVyZWZvcmUgZGlzY291cmFnZWQgdW5sZXNzIHlvdSBoYXZlIGEgdmVyeSB0YXJnZXRlZCB1c2UgY2FzZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHRvQ2hlY2tzdW1BZGRyZXNzID0gZnVuY3Rpb24gKGhleEFkZHJlc3MsIGVpcDExOTFDaGFpbklkKSB7XG4gICAgYXNzZXJ0SXNIZXhTdHJpbmcoaGV4QWRkcmVzcyk7XG4gICAgY29uc3QgYWRkcmVzcyA9IHN0cmlwSGV4UHJlZml4KGhleEFkZHJlc3MpLnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IHByZWZpeCA9ICcnO1xuICAgIGlmIChlaXAxMTkxQ2hhaW5JZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGNoYWluSWQgPSBieXRlc1RvQmlnSW50KHRvQnl0ZXMoZWlwMTE5MUNoYWluSWQpKTtcbiAgICAgICAgcHJlZml4ID0gY2hhaW5JZC50b1N0cmluZygpICsgJzB4JztcbiAgICB9XG4gICAgY29uc3QgYnl0ZXMgPSB1dGY4VG9CeXRlcyhwcmVmaXggKyBhZGRyZXNzKTtcbiAgICBjb25zdCBoYXNoID0gYnl0ZXNUb0hleChrZWNjYWsyNTYoYnl0ZXMpKS5zbGljZSgyKTtcbiAgICBsZXQgcmV0ID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhZGRyZXNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwYXJzZUludChoYXNoW2ldLCAxNikgPj0gOCkge1xuICAgICAgICAgICAgcmV0ICs9IGFkZHJlc3NbaV0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldCArPSBhZGRyZXNzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBgMHgke3JldH1gO1xufTtcbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBhZGRyZXNzIGlzIGEgdmFsaWQgY2hlY2tzdW1tZWQgYWRkcmVzcy5cbiAqXG4gKiBTZWUgdG9DaGVja3N1bUFkZHJlc3MnIGRvY3VtZW50YXRpb24gZm9yIGRldGFpbHMgYWJvdXQgdGhlIGVpcDExOTFDaGFpbklkIHBhcmFtZXRlci5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzVmFsaWRDaGVja3N1bUFkZHJlc3MgPSBmdW5jdGlvbiAoaGV4QWRkcmVzcywgZWlwMTE5MUNoYWluSWQpIHtcbiAgICByZXR1cm4gaXNWYWxpZEFkZHJlc3MoaGV4QWRkcmVzcykgJiYgdG9DaGVja3N1bUFkZHJlc3MoaGV4QWRkcmVzcywgZWlwMTE5MUNoYWluSWQpID09PSBoZXhBZGRyZXNzO1xufTtcbi8qKlxuICogR2VuZXJhdGVzIGFuIGFkZHJlc3Mgb2YgYSBuZXdseSBjcmVhdGVkIGNvbnRyYWN0LlxuICogQHBhcmFtIGZyb20gVGhlIGFkZHJlc3Mgd2hpY2ggaXMgY3JlYXRpbmcgdGhpcyBuZXcgYWRkcmVzc1xuICogQHBhcmFtIG5vbmNlIFRoZSBub25jZSBvZiB0aGUgZnJvbSBhY2NvdW50XG4gKi9cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUFkZHJlc3MgPSBmdW5jdGlvbiAoZnJvbSwgbm9uY2UpIHtcbiAgICBhc3NlcnRJc0J5dGVzKGZyb20pO1xuICAgIGFzc2VydElzQnl0ZXMobm9uY2UpO1xuICAgIGlmIChieXRlc1RvQmlnSW50KG5vbmNlKSA9PT0gQklHSU5UXzApIHtcbiAgICAgICAgLy8gaW4gUkxQIHdlIHdhbnQgdG8gZW5jb2RlIG51bGwgaW4gdGhlIGNhc2Ugb2YgemVybyBub25jZVxuICAgICAgICAvLyByZWFkIHRoZSBSTFAgZG9jdW1lbnRhdGlvbiBmb3IgYW4gYW5zd2VyIGlmIHlvdSBkYXJlXG4gICAgICAgIHJldHVybiBrZWNjYWsyNTYoUkxQLmVuY29kZShbZnJvbSwgVWludDhBcnJheS5mcm9tKFtdKV0pKS5zdWJhcnJheSgtMjApO1xuICAgIH1cbiAgICAvLyBPbmx5IHRha2UgdGhlIGxvd2VyIDE2MGJpdHMgb2YgdGhlIGhhc2hcbiAgICByZXR1cm4ga2VjY2FrMjU2KFJMUC5lbmNvZGUoW2Zyb20sIG5vbmNlXSkpLnN1YmFycmF5KC0yMCk7XG59O1xuLyoqXG4gKiBHZW5lcmF0ZXMgYW4gYWRkcmVzcyBmb3IgYSBjb250cmFjdCBjcmVhdGVkIHVzaW5nIENSRUFURTIuXG4gKiBAcGFyYW0gZnJvbSBUaGUgYWRkcmVzcyB3aGljaCBpcyBjcmVhdGluZyB0aGlzIG5ldyBhZGRyZXNzXG4gKiBAcGFyYW0gc2FsdCBBIHNhbHRcbiAqIEBwYXJhbSBpbml0Q29kZSBUaGUgaW5pdCBjb2RlIG9mIHRoZSBjb250cmFjdCBiZWluZyBjcmVhdGVkXG4gKi9cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUFkZHJlc3MyID0gZnVuY3Rpb24gKGZyb20sIHNhbHQsIGluaXRDb2RlKSB7XG4gICAgYXNzZXJ0SXNCeXRlcyhmcm9tKTtcbiAgICBhc3NlcnRJc0J5dGVzKHNhbHQpO1xuICAgIGFzc2VydElzQnl0ZXMoaW5pdENvZGUpO1xuICAgIGlmIChmcm9tLmxlbmd0aCAhPT0gMjApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBmcm9tIHRvIGJlIG9mIGxlbmd0aCAyMCcpO1xuICAgIH1cbiAgICBpZiAoc2FsdC5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgc2FsdCB0byBiZSBvZiBsZW5ndGggMzInKTtcbiAgICB9XG4gICAgY29uc3QgYWRkcmVzcyA9IGtlY2NhazI1Nihjb25jYXRCeXRlcyhoZXhUb0J5dGVzKCcweGZmJyksIGZyb20sIHNhbHQsIGtlY2NhazI1Nihpbml0Q29kZSkpKTtcbiAgICByZXR1cm4gYWRkcmVzcy5zdWJhcnJheSgtMjApO1xufTtcbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBwcml2YXRlIGtleSBzYXRpc2ZpZXMgdGhlIHJ1bGVzIG9mIHRoZSBjdXJ2ZSBzZWNwMjU2azEuXG4gKi9cbmV4cG9ydCBjb25zdCBpc1ZhbGlkUHJpdmF0ZSA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gICAgcmV0dXJuIHNlY3AyNTZrMS51dGlscy5pc1ZhbGlkUHJpdmF0ZUtleShwcml2YXRlS2V5KTtcbn07XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgcHVibGljIGtleSBzYXRpc2ZpZXMgdGhlIHJ1bGVzIG9mIHRoZSBjdXJ2ZSBzZWNwMjU2azFcbiAqIGFuZCB0aGUgcmVxdWlyZW1lbnRzIG9mIEV0aGVyZXVtLlxuICogQHBhcmFtIHB1YmxpY0tleSBUaGUgdHdvIHBvaW50cyBvZiBhbiB1bmNvbXByZXNzZWQga2V5LCB1bmxlc3Mgc2FuaXRpemUgaXMgZW5hYmxlZFxuICogQHBhcmFtIHNhbml0aXplIEFjY2VwdCBwdWJsaWMga2V5cyBpbiBvdGhlciBmb3JtYXRzXG4gKi9cbmV4cG9ydCBjb25zdCBpc1ZhbGlkUHVibGljID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgc2FuaXRpemUgPSBmYWxzZSkge1xuICAgIGFzc2VydElzQnl0ZXMocHVibGljS2V5KTtcbiAgICBpZiAocHVibGljS2V5Lmxlbmd0aCA9PT0gNjQpIHtcbiAgICAgICAgLy8gQ29udmVydCB0byBTRUMxIGZvciBzZWNwMjU2azFcbiAgICAgICAgLy8gQXV0b21hdGljYWxseSBjaGVja3Mgd2hldGhlciBwb2ludCBpcyBvbiBjdXJ2ZVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2VjcDI1NmsxLlByb2plY3RpdmVQb2ludC5mcm9tSGV4KGNvbmNhdEJ5dGVzKFVpbnQ4QXJyYXkuZnJvbShbNF0pLCBwdWJsaWNLZXkpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFzYW5pdGl6ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHNlY3AyNTZrMS5Qcm9qZWN0aXZlUG9pbnQuZnJvbUhleChwdWJsaWNLZXkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGV0aGVyZXVtIGFkZHJlc3Mgb2YgYSBnaXZlbiBwdWJsaWMga2V5LlxuICogQWNjZXB0cyBcIkV0aGVyZXVtIHB1YmxpYyBrZXlzXCIgYW5kIFNFQzEgZW5jb2RlZCBrZXlzLlxuICogQHBhcmFtIHB1YktleSBUaGUgdHdvIHBvaW50cyBvZiBhbiB1bmNvbXByZXNzZWQga2V5LCB1bmxlc3Mgc2FuaXRpemUgaXMgZW5hYmxlZFxuICogQHBhcmFtIHNhbml0aXplIEFjY2VwdCBwdWJsaWMga2V5cyBpbiBvdGhlciBmb3JtYXRzXG4gKi9cbmV4cG9ydCBjb25zdCBwdWJUb0FkZHJlc3MgPSBmdW5jdGlvbiAocHViS2V5LCBzYW5pdGl6ZSA9IGZhbHNlKSB7XG4gICAgYXNzZXJ0SXNCeXRlcyhwdWJLZXkpO1xuICAgIGlmIChzYW5pdGl6ZSAmJiBwdWJLZXkubGVuZ3RoICE9PSA2NCkge1xuICAgICAgICBwdWJLZXkgPSBzZWNwMjU2azEuUHJvamVjdGl2ZVBvaW50LmZyb21IZXgocHViS2V5KS50b1Jhd0J5dGVzKGZhbHNlKS5zbGljZSgxKTtcbiAgICB9XG4gICAgaWYgKHB1YktleS5sZW5ndGggIT09IDY0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgcHViS2V5IHRvIGJlIG9mIGxlbmd0aCA2NCcpO1xuICAgIH1cbiAgICAvLyBPbmx5IHRha2UgdGhlIGxvd2VyIDE2MGJpdHMgb2YgdGhlIGhhc2hcbiAgICByZXR1cm4ga2VjY2FrMjU2KHB1YktleSkuc3ViYXJyYXkoLTIwKTtcbn07XG5leHBvcnQgY29uc3QgcHVibGljVG9BZGRyZXNzID0gcHViVG9BZGRyZXNzO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBldGhlcmV1bSBwdWJsaWMga2V5IG9mIGEgZ2l2ZW4gcHJpdmF0ZSBrZXkuXG4gKiBAcGFyYW0gcHJpdmF0ZUtleSBBIHByaXZhdGUga2V5IG11c3QgYmUgMjU2IGJpdHMgd2lkZVxuICovXG5leHBvcnQgY29uc3QgcHJpdmF0ZVRvUHVibGljID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgICBhc3NlcnRJc0J5dGVzKHByaXZhdGVLZXkpO1xuICAgIC8vIHNraXAgdGhlIHR5cGUgZmxhZyBhbmQgdXNlIHRoZSBYLCBZIHBvaW50c1xuICAgIHJldHVybiBzZWNwMjU2azEuUHJvamVjdGl2ZVBvaW50LmZyb21Qcml2YXRlS2V5KHByaXZhdGVLZXkpLnRvUmF3Qnl0ZXMoZmFsc2UpLnNsaWNlKDEpO1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUgZXRoZXJldW0gYWRkcmVzcyBvZiBhIGdpdmVuIHByaXZhdGUga2V5LlxuICogQHBhcmFtIHByaXZhdGVLZXkgQSBwcml2YXRlIGtleSBtdXN0IGJlIDI1NiBiaXRzIHdpZGVcbiAqL1xuZXhwb3J0IGNvbnN0IHByaXZhdGVUb0FkZHJlc3MgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICAgIHJldHVybiBwdWJsaWNUb0FkZHJlc3MocHJpdmF0ZVRvUHVibGljKHByaXZhdGVLZXkpKTtcbn07XG4vKipcbiAqIENvbnZlcnRzIGEgcHVibGljIGtleSB0byB0aGUgRXRoZXJldW0gZm9ybWF0LlxuICovXG5leHBvcnQgY29uc3QgaW1wb3J0UHVibGljID0gZnVuY3Rpb24gKHB1YmxpY0tleSkge1xuICAgIGFzc2VydElzQnl0ZXMocHVibGljS2V5KTtcbiAgICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT0gNjQpIHtcbiAgICAgICAgcHVibGljS2V5ID0gc2VjcDI1NmsxLlByb2plY3RpdmVQb2ludC5mcm9tSGV4KHB1YmxpY0tleSkudG9SYXdCeXRlcyhmYWxzZSkuc2xpY2UoMSk7XG4gICAgfVxuICAgIHJldHVybiBwdWJsaWNLZXk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSB6ZXJvIGFkZHJlc3MuXG4gKi9cbmV4cG9ydCBjb25zdCB6ZXJvQWRkcmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBhZGRyZXNzTGVuZ3RoID0gMjA7XG4gICAgY29uc3QgYWRkciA9IHplcm9zKGFkZHJlc3NMZW5ndGgpO1xuICAgIHJldHVybiBieXRlc1RvSGV4KGFkZHIpO1xufTtcbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gYWRkcmVzcyBpcyB0aGUgemVybyBhZGRyZXNzLlxuICovXG5leHBvcnQgY29uc3QgaXNaZXJvQWRkcmVzcyA9IGZ1bmN0aW9uIChoZXhBZGRyZXNzKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgYXNzZXJ0SXNTdHJpbmcoaGV4QWRkcmVzcyk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgemVyb0FkZHIgPSB6ZXJvQWRkcmVzcygpO1xuICAgIHJldHVybiB6ZXJvQWRkciA9PT0gaGV4QWRkcmVzcztcbn07XG5leHBvcnQgZnVuY3Rpb24gYWNjb3VudEJvZHlGcm9tU2xpbShib2R5KSB7XG4gICAgY29uc3QgW25vbmNlLCBiYWxhbmNlLCBzdG9yYWdlUm9vdCwgY29kZUhhc2hdID0gYm9keTtcbiAgICByZXR1cm4gW1xuICAgICAgICBub25jZSxcbiAgICAgICAgYmFsYW5jZSxcbiAgICAgICAgc3RvcmFnZVJvb3QubGVuZ3RoID09PSAwID8gS0VDQ0FLMjU2X1JMUCA6IHN0b3JhZ2VSb290LFxuICAgICAgICBjb2RlSGFzaC5sZW5ndGggPT09IDAgPyBLRUNDQUsyNTZfTlVMTCA6IGNvZGVIYXNoLFxuICAgIF07XG59XG5jb25zdCBlbXB0eVVpbnQ4QXJyID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG5leHBvcnQgZnVuY3Rpb24gYWNjb3VudEJvZHlUb1NsaW0oYm9keSkge1xuICAgIGNvbnN0IFtub25jZSwgYmFsYW5jZSwgc3RvcmFnZVJvb3QsIGNvZGVIYXNoXSA9IGJvZHk7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgbm9uY2UsXG4gICAgICAgIGJhbGFuY2UsXG4gICAgICAgIGVxdWFsc0J5dGVzKHN0b3JhZ2VSb290LCBLRUNDQUsyNTZfUkxQKSA/IGVtcHR5VWludDhBcnIgOiBzdG9yYWdlUm9vdCxcbiAgICAgICAgZXF1YWxzQnl0ZXMoY29kZUhhc2gsIEtFQ0NBSzI1Nl9OVUxMKSA/IGVtcHR5VWludDhBcnIgOiBjb2RlSGFzaCxcbiAgICBdO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIHNsaW0gYWNjb3VudCAocGVyIHNuYXAgcHJvdG9jb2wgc3BlYykgdG8gdGhlIFJMUCBlbmNvZGVkIHZlcnNpb24gb2YgdGhlIGFjY291bnRcbiAqIEBwYXJhbSBib2R5IEFycmF5IG9mIDQgVWludDhBcnJheS1saWtlIGl0ZW1zIHRvIHJlcHJlc2VudCB0aGUgYWNjb3VudFxuICogQHJldHVybnMgUkxQIGVuY29kZWQgdmVyc2lvbiBvZiB0aGUgYWNjb3VudFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWNjb3VudEJvZHlUb1JMUChib2R5LCBjb3VsZEJlU2xpbSA9IHRydWUpIHtcbiAgICBjb25zdCBhY2NvdW50Qm9keSA9IGNvdWxkQmVTbGltID8gYWNjb3VudEJvZHlGcm9tU2xpbShib2R5KSA6IGJvZHk7XG4gICAgcmV0dXJuIFJMUC5lbmNvZGUoYWNjb3VudEJvZHkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWNjb3VudC5qcy5tYXAiXSwibmFtZXMiOlsiUkxQIiwia2VjY2FrMjU2Iiwic2VjcDI1NmsxIiwiYmlnSW50VG9VbnBhZGRlZEJ5dGVzIiwiYnl0ZXNUb0JpZ0ludCIsImJ5dGVzVG9IZXgiLCJieXRlc1RvSW50IiwiY29uY2F0Qnl0ZXMiLCJlcXVhbHNCeXRlcyIsImhleFRvQnl0ZXMiLCJpbnRUb1VucGFkZGVkQnl0ZXMiLCJ0b0J5dGVzIiwidXRmOFRvQnl0ZXMiLCJ6ZXJvcyIsIkJJR0lOVF8wIiwiS0VDQ0FLMjU2X05VTEwiLCJLRUNDQUsyNTZfUkxQIiwiYXNzZXJ0SXNCeXRlcyIsImFzc2VydElzSGV4U3RyaW5nIiwiYXNzZXJ0SXNTdHJpbmciLCJzdHJpcEhleFByZWZpeCIsIkFjY291bnQiLCJjb25zdHJ1Y3RvciIsIm5vbmNlIiwiYmFsYW5jZSIsInN0b3JhZ2VSb290IiwiY29kZUhhc2giLCJjb2RlU2l6ZSIsInZlcnNpb24iLCJfbm9uY2UiLCJfYmFsYW5jZSIsIl9zdG9yYWdlUm9vdCIsIl9jb2RlSGFzaCIsIl9jb2RlU2l6ZSIsIl92ZXJzaW9uIiwiaXNDb250cmFjdCIsIl92YWxpZGF0ZSIsIkVycm9yIiwiZnJvbUFjY291bnREYXRhIiwiYWNjb3VudERhdGEiLCJ1bmRlZmluZWQiLCJmcm9tUGFydGlhbEFjY291bnREYXRhIiwicGFydGlhbEFjY291bnREYXRhIiwiZnJvbVJscFNlcmlhbGl6ZWRBY2NvdW50Iiwic2VyaWFsaXplZCIsInZhbHVlcyIsImRlY29kZSIsIkFycmF5IiwiaXNBcnJheSIsImZyb21WYWx1ZXNBcnJheSIsImZyb21SbHBTZXJpYWxpemVkUGFydGlhbEFjY291bnQiLCJpc05vdE51bGxJbmRpY2F0b3IiLCJsZW5ndGgiLCJyYXciLCJzZXJpYWxpemUiLCJlbmNvZGUiLCJzZXJpYWxpemVXaXRoUGFydGlhbEluZm8iLCJwYXJ0aWFsRGF0YSIsInplcm9FbmNvZGVkIiwib25lRW5jb2RlZCIsInB1c2giLCJpc0VtcHR5IiwiaXNWYWxpZEFkZHJlc3MiLCJoZXhBZGRyZXNzIiwiZSIsInRlc3QiLCJ0b0NoZWNrc3VtQWRkcmVzcyIsImVpcDExOTFDaGFpbklkIiwiYWRkcmVzcyIsInRvTG93ZXJDYXNlIiwicHJlZml4IiwiY2hhaW5JZCIsInRvU3RyaW5nIiwiYnl0ZXMiLCJoYXNoIiwic2xpY2UiLCJyZXQiLCJpIiwicGFyc2VJbnQiLCJ0b1VwcGVyQ2FzZSIsImlzVmFsaWRDaGVja3N1bUFkZHJlc3MiLCJnZW5lcmF0ZUFkZHJlc3MiLCJmcm9tIiwiVWludDhBcnJheSIsInN1YmFycmF5IiwiZ2VuZXJhdGVBZGRyZXNzMiIsInNhbHQiLCJpbml0Q29kZSIsImlzVmFsaWRQcml2YXRlIiwicHJpdmF0ZUtleSIsInV0aWxzIiwiaXNWYWxpZFByaXZhdGVLZXkiLCJpc1ZhbGlkUHVibGljIiwicHVibGljS2V5Iiwic2FuaXRpemUiLCJQcm9qZWN0aXZlUG9pbnQiLCJmcm9tSGV4IiwicHViVG9BZGRyZXNzIiwicHViS2V5IiwidG9SYXdCeXRlcyIsInB1YmxpY1RvQWRkcmVzcyIsInByaXZhdGVUb1B1YmxpYyIsImZyb21Qcml2YXRlS2V5IiwicHJpdmF0ZVRvQWRkcmVzcyIsImltcG9ydFB1YmxpYyIsInplcm9BZGRyZXNzIiwiYWRkcmVzc0xlbmd0aCIsImFkZHIiLCJpc1plcm9BZGRyZXNzIiwiemVyb0FkZHIiLCJhY2NvdW50Qm9keUZyb21TbGltIiwiYm9keSIsImVtcHR5VWludDhBcnIiLCJhY2NvdW50Qm9keVRvU2xpbSIsImFjY291bnRCb2R5VG9STFAiLCJjb3VsZEJlU2xpbSIsImFjY291bnRCb2R5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/address.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/address.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Address: () => (/* binding */ Address)\n/* harmony export */ });\n/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./account.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/account.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/constants.js\");\n\n\n\n/**\n * Handling and generating Ethereum addresses\n */ class Address {\n    constructor(bytes){\n        if (bytes.length !== 20) {\n            throw new Error(\"Invalid address length\");\n        }\n        this.bytes = bytes;\n    }\n    /**\n     * Returns the zero address.\n     */ static zero() {\n        return new Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.zeros)(20));\n    }\n    /**\n     * Returns an Address object from a hex-encoded string.\n     * @param str - Hex-encoded address\n     */ static fromString(str) {\n        if (!(0,_account_js__WEBPACK_IMPORTED_MODULE_0__.isValidAddress)(str)) {\n            throw new Error(`Invalid address input=${str}`);\n        }\n        return new Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(str));\n    }\n    /**\n     * Returns an address for a given public key.\n     * @param pubKey The two points of an uncompressed key\n     */ static fromPublicKey(pubKey) {\n        if (!(pubKey instanceof Uint8Array)) {\n            throw new Error(\"Public key should be Uint8Array\");\n        }\n        const bytes = (0,_account_js__WEBPACK_IMPORTED_MODULE_0__.pubToAddress)(pubKey);\n        return new Address(bytes);\n    }\n    /**\n     * Returns an address for a given private key.\n     * @param privateKey A private key must be 256 bits wide\n     */ static fromPrivateKey(privateKey) {\n        if (!(privateKey instanceof Uint8Array)) {\n            throw new Error(\"Private key should be Uint8Array\");\n        }\n        const bytes = (0,_account_js__WEBPACK_IMPORTED_MODULE_0__.privateToAddress)(privateKey);\n        return new Address(bytes);\n    }\n    /**\n     * Generates an address for a newly created contract.\n     * @param from The address which is creating this new address\n     * @param nonce The nonce of the from account\n     */ static generate(from, nonce) {\n        if (typeof nonce !== \"bigint\") {\n            throw new Error(\"Expected nonce to be a bigint\");\n        }\n        return new Address((0,_account_js__WEBPACK_IMPORTED_MODULE_0__.generateAddress)(from.bytes, (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(nonce)));\n    }\n    /**\n     * Generates an address for a contract created using CREATE2.\n     * @param from The address which is creating this new address\n     * @param salt A salt\n     * @param initCode The init code of the contract being created\n     */ static generate2(from, salt, initCode) {\n        if (!(salt instanceof Uint8Array)) {\n            throw new Error(\"Expected salt to be a Uint8Array\");\n        }\n        if (!(initCode instanceof Uint8Array)) {\n            throw new Error(\"Expected initCode to be a Uint8Array\");\n        }\n        return new Address((0,_account_js__WEBPACK_IMPORTED_MODULE_0__.generateAddress2)(from.bytes, salt, initCode));\n    }\n    /**\n     * Is address equal to another.\n     */ equals(address) {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(this.bytes, address.bytes);\n    }\n    /**\n     * Is address zero.\n     */ isZero() {\n        return this.equals(Address.zero());\n    }\n    /**\n     * True if address is in the address range defined\n     * by EIP-1352\n     */ isPrecompileOrSystemAddress() {\n        const address = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(this.bytes);\n        const rangeMin = _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0;\n        const rangeMax = BigInt(\"0xffff\");\n        return address >= rangeMin && address <= rangeMax;\n    }\n    /**\n     * Returns hex encoding of address.\n     */ toString() {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.bytes);\n    }\n    /**\n     * Returns a new Uint8Array representation of address.\n     */ toBytes() {\n        return new Uint8Array(this.bytes);\n    }\n} //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncEventEmitter: () => (/* binding */ AsyncEventEmitter)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/**\n * Ported to Typescript from original implementation below:\n * https://github.com/ahultgren/async-eventemitter -- MIT licensed\n *\n * Type Definitions based on work by: patarapolw <https://github.com/patarapolw> -- MIT licensed\n * that was contributed to Definitely Typed below:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/async-eventemitter\n */ \nasync function runInSeries(context, tasks, data) {\n    let error;\n    for await (const task of tasks){\n        try {\n            if (task.length < 2) {\n                //sync\n                task.call(context, data);\n            } else {\n                await new Promise((resolve, reject)=>{\n                    task.call(context, data, (error)=>{\n                        if (error) {\n                            reject(error);\n                        } else {\n                            resolve();\n                        }\n                    });\n                });\n            }\n        } catch (e) {\n            error = e;\n        }\n    }\n    if (error) {\n        throw error;\n    }\n}\nclass AsyncEventEmitter extends events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n    emit(event, ...args) {\n        let [data, callback] = args;\n        const self = this;\n        let listeners = self._events[event] ?? [];\n        // Optional data argument\n        if (callback === undefined && typeof data === \"function\") {\n            callback = data;\n            data = undefined;\n        }\n        // Special treatment of internal newListener and removeListener events\n        if (event === \"newListener\" || event === \"removeListener\") {\n            data = {\n                event: data,\n                fn: callback\n            };\n            callback = undefined;\n        }\n        // A single listener is just a function not an array...\n        listeners = Array.isArray(listeners) ? listeners : [\n            listeners\n        ];\n        runInSeries(self, listeners.slice(), data).then(callback).catch(callback);\n        return self.listenerCount(event) > 0;\n    }\n    once(event, listener) {\n        const self = this;\n        let g;\n        if (typeof listener !== \"function\") {\n            throw new TypeError(\"listener must be a function\");\n        }\n        // Hack to support set arity\n        if (listener.length >= 2) {\n            g = function(e, next) {\n                self.removeListener(event, g);\n                void listener(e, next);\n            };\n        } else {\n            g = function(e) {\n                self.removeListener(event, g);\n                void listener(e, g);\n            };\n        }\n        self.on(event, g);\n        return self;\n    }\n    first(event, listener) {\n        let listeners = this._events[event] ?? [];\n        // Contract\n        if (typeof listener !== \"function\") {\n            throw new TypeError(\"listener must be a function\");\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [\n                listeners\n            ];\n        }\n        listeners.unshift(listener);\n        return this;\n    }\n    before(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener);\n    }\n    after(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener, \"after\");\n    }\n    beforeOrAfter(event, target, listener, beforeOrAfter) {\n        let listeners = this._events[event] ?? [];\n        let i;\n        let index;\n        const add = beforeOrAfter === \"after\" ? 1 : 0;\n        // Contract\n        if (typeof listener !== \"function\") {\n            throw new TypeError(\"listener must be a function\");\n        }\n        if (typeof target !== \"function\") {\n            throw new TypeError(\"target must be a function\");\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [\n                listeners\n            ];\n        }\n        index = listeners.length;\n        for(i = listeners.length; i--;){\n            if (listeners[i] === target) {\n                index = i + add;\n                break;\n            }\n        }\n        listeners.splice(index, 0, listener);\n        return this;\n    }\n    on(event, listener) {\n        return super.on(event, listener);\n    }\n    addListener(event, listener) {\n        return super.addListener(event, listener);\n    }\n    prependListener(event, listener) {\n        return super.prependListener(event, listener);\n    }\n    prependOnceListener(event, listener) {\n        return super.prependOnceListener(event, listener);\n    }\n    removeAllListeners(event) {\n        return super.removeAllListeners(event);\n    }\n    removeListener(event, listener) {\n        return super.removeListener(event, listener);\n    }\n    eventNames() {\n        return super.eventNames();\n    }\n    listeners(event) {\n        return super.listeners(event);\n    }\n    listenerCount(event) {\n        return super.listenerCount(event);\n    }\n    getMaxListeners() {\n        return super.getMaxListeners();\n    }\n    setMaxListeners(maxListeners) {\n        return super.setMaxListeners(maxListeners);\n    }\n} //# sourceMappingURL=asyncEventEmitter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/blobs.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/blobs.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blobsToCommitments: () => (/* binding */ blobsToCommitments),\n/* harmony export */   blobsToProofs: () => (/* binding */ blobsToProofs),\n/* harmony export */   commitmentsToVersionedHashes: () => (/* binding */ commitmentsToVersionedHashes),\n/* harmony export */   computeVersionedHash: () => (/* binding */ computeVersionedHash),\n/* harmony export */   getBlobs: () => (/* binding */ getBlobs)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_sha256_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/sha256.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/sha256.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\n\n/**\n * These utilities for constructing blobs are borrowed from https://github.com/Inphi/eip4844-interop.git\n */ const BYTES_PER_FIELD_ELEMENT = 32;\nconst FIELD_ELEMENTS_PER_BLOB = 4096;\nconst USEFUL_BYTES_PER_BLOB = 32 * FIELD_ELEMENTS_PER_BLOB;\nconst MAX_BLOBS_PER_TX = 2;\nconst MAX_USEFUL_BYTES_PER_TX = USEFUL_BYTES_PER_BLOB * MAX_BLOBS_PER_TX - 1;\nconst BLOB_SIZE = BYTES_PER_FIELD_ELEMENT * FIELD_ELEMENTS_PER_BLOB;\nfunction get_padded(data, blobs_len) {\n    const pdata = new Uint8Array(blobs_len * USEFUL_BYTES_PER_BLOB).fill(0);\n    pdata.set(data);\n    pdata[data.byteLength] = 0x80;\n    return pdata;\n}\nfunction get_blob(data) {\n    const blob = new Uint8Array(BLOB_SIZE);\n    for(let i = 0; i < FIELD_ELEMENTS_PER_BLOB; i++){\n        const chunk = new Uint8Array(32);\n        chunk.set(data.subarray(i * 31, (i + 1) * 31), 0);\n        blob.set(chunk, i * 32);\n    }\n    return blob;\n}\nconst getBlobs = (input)=>{\n    const data = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes)(input);\n    const len = data.byteLength;\n    if (len === 0) {\n        throw Error(\"invalid blob data\");\n    }\n    if (len > MAX_USEFUL_BYTES_PER_TX) {\n        throw Error(\"blob data is too large\");\n    }\n    const blobs_len = Math.ceil(len / USEFUL_BYTES_PER_BLOB);\n    const pdata = get_padded(data, blobs_len);\n    const blobs = [];\n    for(let i = 0; i < blobs_len; i++){\n        const chunk = pdata.subarray(i * USEFUL_BYTES_PER_BLOB, (i + 1) * USEFUL_BYTES_PER_BLOB);\n        const blob = get_blob(chunk);\n        blobs.push(blob);\n    }\n    return blobs;\n};\nconst blobsToCommitments = (kzg, blobs)=>{\n    const commitments = [];\n    for (const blob of blobs){\n        commitments.push(kzg.blobToKzgCommitment(blob));\n    }\n    return commitments;\n};\nconst blobsToProofs = (kzg, blobs, commitments)=>{\n    const proofs = blobs.map((blob, ctx)=>kzg.computeBlobKzgProof(blob, commitments[ctx]));\n    return proofs;\n};\n/**\n * Converts a vector commitment for a given data blob to its versioned hash.  For 4844, this version\n * number will be 0x01 for KZG vector commitments but could be different if future vector commitment\n * types are introduced\n * @param commitment a vector commitment to a blob\n * @param blobCommitmentVersion the version number corresponding to the type of vector commitment\n * @returns a versioned hash corresponding to a given blob vector commitment\n */ const computeVersionedHash = (commitment, blobCommitmentVersion)=>{\n    const computedVersionedHash = new Uint8Array(32);\n    computedVersionedHash.set([\n        blobCommitmentVersion\n    ], 0);\n    computedVersionedHash.set((0,ethereum_cryptography_sha256_js__WEBPACK_IMPORTED_MODULE_0__.sha256)(commitment).subarray(1), 1);\n    return computedVersionedHash;\n};\n/**\n * Generate an array of versioned hashes from corresponding kzg commitments\n * @param commitments array of kzg commitments\n * @returns array of versioned hashes\n * Note: assumes KZG commitments (version 1 version hashes)\n */ const commitmentsToVersionedHashes = (commitments)=>{\n    const hashes = [];\n    for (const commitment of commitments){\n        hashes.push(computeVersionedHash(commitment, 0x01));\n    }\n    return hashes;\n}; //# sourceMappingURL=blobs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9ibG9icy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXlEO0FBQ2hCO0FBQ3pDOztDQUVDLEdBQ0QsTUFBTUUsMEJBQTBCO0FBQ2hDLE1BQU1DLDBCQUEwQjtBQUNoQyxNQUFNQyx3QkFBd0IsS0FBS0Q7QUFDbkMsTUFBTUUsbUJBQW1CO0FBQ3pCLE1BQU1DLDBCQUEwQkYsd0JBQXdCQyxtQkFBbUI7QUFDM0UsTUFBTUUsWUFBWUwsMEJBQTBCQztBQUM1QyxTQUFTSyxXQUFXQyxJQUFJLEVBQUVDLFNBQVM7SUFDL0IsTUFBTUMsUUFBUSxJQUFJQyxXQUFXRixZQUFZTix1QkFBdUJTLElBQUksQ0FBQztJQUNyRUYsTUFBTUcsR0FBRyxDQUFDTDtJQUNWRSxLQUFLLENBQUNGLEtBQUtNLFVBQVUsQ0FBQyxHQUFHO0lBQ3pCLE9BQU9KO0FBQ1g7QUFDQSxTQUFTSyxTQUFTUCxJQUFJO0lBQ2xCLE1BQU1RLE9BQU8sSUFBSUwsV0FBV0w7SUFDNUIsSUFBSyxJQUFJVyxJQUFJLEdBQUdBLElBQUlmLHlCQUF5QmUsSUFBSztRQUM5QyxNQUFNQyxRQUFRLElBQUlQLFdBQVc7UUFDN0JPLE1BQU1MLEdBQUcsQ0FBQ0wsS0FBS1csUUFBUSxDQUFDRixJQUFJLElBQUksQ0FBQ0EsSUFBSSxLQUFLLEtBQUs7UUFDL0NELEtBQUtILEdBQUcsQ0FBQ0ssT0FBT0QsSUFBSTtJQUN4QjtJQUNBLE9BQU9EO0FBQ1g7QUFDTyxNQUFNSSxXQUFXLENBQUNDO0lBQ3JCLE1BQU1iLE9BQU9SLHNEQUFXQSxDQUFDcUI7SUFDekIsTUFBTUMsTUFBTWQsS0FBS00sVUFBVTtJQUMzQixJQUFJUSxRQUFRLEdBQUc7UUFDWCxNQUFNQyxNQUFNO0lBQ2hCO0lBQ0EsSUFBSUQsTUFBTWpCLHlCQUF5QjtRQUMvQixNQUFNa0IsTUFBTTtJQUNoQjtJQUNBLE1BQU1kLFlBQVllLEtBQUtDLElBQUksQ0FBQ0gsTUFBTW5CO0lBQ2xDLE1BQU1PLFFBQVFILFdBQVdDLE1BQU1DO0lBQy9CLE1BQU1pQixRQUFRLEVBQUU7SUFDaEIsSUFBSyxJQUFJVCxJQUFJLEdBQUdBLElBQUlSLFdBQVdRLElBQUs7UUFDaEMsTUFBTUMsUUFBUVIsTUFBTVMsUUFBUSxDQUFDRixJQUFJZCx1QkFBdUIsQ0FBQ2MsSUFBSSxLQUFLZDtRQUNsRSxNQUFNYSxPQUFPRCxTQUFTRztRQUN0QlEsTUFBTUMsSUFBSSxDQUFDWDtJQUNmO0lBQ0EsT0FBT1U7QUFDWCxFQUFFO0FBQ0ssTUFBTUUscUJBQXFCLENBQUNDLEtBQUtIO0lBQ3BDLE1BQU1JLGNBQWMsRUFBRTtJQUN0QixLQUFLLE1BQU1kLFFBQVFVLE1BQU87UUFDdEJJLFlBQVlILElBQUksQ0FBQ0UsSUFBSUUsbUJBQW1CLENBQUNmO0lBQzdDO0lBQ0EsT0FBT2M7QUFDWCxFQUFFO0FBQ0ssTUFBTUUsZ0JBQWdCLENBQUNILEtBQUtILE9BQU9JO0lBQ3RDLE1BQU1HLFNBQVNQLE1BQU1RLEdBQUcsQ0FBQyxDQUFDbEIsTUFBTW1CLE1BQVFOLElBQUlPLG1CQUFtQixDQUFDcEIsTUFBTWMsV0FBVyxDQUFDSyxJQUFJO0lBQ3RGLE9BQU9GO0FBQ1gsRUFBRTtBQUNGOzs7Ozs7O0NBT0MsR0FDTSxNQUFNSSx1QkFBdUIsQ0FBQ0MsWUFBWUM7SUFDN0MsTUFBTUMsd0JBQXdCLElBQUk3QixXQUFXO0lBQzdDNkIsc0JBQXNCM0IsR0FBRyxDQUFDO1FBQUMwQjtLQUFzQixFQUFFO0lBQ25EQyxzQkFBc0IzQixHQUFHLENBQUNkLHVFQUFNQSxDQUFDdUMsWUFBWW5CLFFBQVEsQ0FBQyxJQUFJO0lBQzFELE9BQU9xQjtBQUNYLEVBQUU7QUFDRjs7Ozs7Q0FLQyxHQUNNLE1BQU1DLCtCQUErQixDQUFDWDtJQUN6QyxNQUFNWSxTQUFTLEVBQUU7SUFDakIsS0FBSyxNQUFNSixjQUFjUixZQUFhO1FBQ2xDWSxPQUFPZixJQUFJLENBQUNVLHFCQUFxQkMsWUFBWTtJQUNqRDtJQUNBLE9BQU9JO0FBQ1gsRUFBRSxDQUNGLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3FvZ25pdGEvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9ibG9icy5qcz9iNzQwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNoYTI1NiB9IGZyb20gJ2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9zaGEyNTYuanMnO1xuaW1wb3J0IHsgdXRmOFRvQnl0ZXMgfSBmcm9tICcuL2J5dGVzLmpzJztcbi8qKlxuICogVGhlc2UgdXRpbGl0aWVzIGZvciBjb25zdHJ1Y3RpbmcgYmxvYnMgYXJlIGJvcnJvd2VkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL0lucGhpL2VpcDQ4NDQtaW50ZXJvcC5naXRcbiAqL1xuY29uc3QgQllURVNfUEVSX0ZJRUxEX0VMRU1FTlQgPSAzMjtcbmNvbnN0IEZJRUxEX0VMRU1FTlRTX1BFUl9CTE9CID0gNDA5NjtcbmNvbnN0IFVTRUZVTF9CWVRFU19QRVJfQkxPQiA9IDMyICogRklFTERfRUxFTUVOVFNfUEVSX0JMT0I7XG5jb25zdCBNQVhfQkxPQlNfUEVSX1RYID0gMjtcbmNvbnN0IE1BWF9VU0VGVUxfQllURVNfUEVSX1RYID0gVVNFRlVMX0JZVEVTX1BFUl9CTE9CICogTUFYX0JMT0JTX1BFUl9UWCAtIDE7XG5jb25zdCBCTE9CX1NJWkUgPSBCWVRFU19QRVJfRklFTERfRUxFTUVOVCAqIEZJRUxEX0VMRU1FTlRTX1BFUl9CTE9CO1xuZnVuY3Rpb24gZ2V0X3BhZGRlZChkYXRhLCBibG9ic19sZW4pIHtcbiAgICBjb25zdCBwZGF0YSA9IG5ldyBVaW50OEFycmF5KGJsb2JzX2xlbiAqIFVTRUZVTF9CWVRFU19QRVJfQkxPQikuZmlsbCgwKTtcbiAgICBwZGF0YS5zZXQoZGF0YSk7XG4gICAgcGRhdGFbZGF0YS5ieXRlTGVuZ3RoXSA9IDB4ODA7XG4gICAgcmV0dXJuIHBkYXRhO1xufVxuZnVuY3Rpb24gZ2V0X2Jsb2IoZGF0YSkge1xuICAgIGNvbnN0IGJsb2IgPSBuZXcgVWludDhBcnJheShCTE9CX1NJWkUpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgRklFTERfRUxFTUVOVFNfUEVSX0JMT0I7IGkrKykge1xuICAgICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgICAgICAgY2h1bmsuc2V0KGRhdGEuc3ViYXJyYXkoaSAqIDMxLCAoaSArIDEpICogMzEpLCAwKTtcbiAgICAgICAgYmxvYi5zZXQoY2h1bmssIGkgKiAzMik7XG4gICAgfVxuICAgIHJldHVybiBibG9iO1xufVxuZXhwb3J0IGNvbnN0IGdldEJsb2JzID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IHV0ZjhUb0J5dGVzKGlucHV0KTtcbiAgICBjb25zdCBsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICB0aHJvdyBFcnJvcignaW52YWxpZCBibG9iIGRhdGEnKTtcbiAgICB9XG4gICAgaWYgKGxlbiA+IE1BWF9VU0VGVUxfQllURVNfUEVSX1RYKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdibG9iIGRhdGEgaXMgdG9vIGxhcmdlJyk7XG4gICAgfVxuICAgIGNvbnN0IGJsb2JzX2xlbiA9IE1hdGguY2VpbChsZW4gLyBVU0VGVUxfQllURVNfUEVSX0JMT0IpO1xuICAgIGNvbnN0IHBkYXRhID0gZ2V0X3BhZGRlZChkYXRhLCBibG9ic19sZW4pO1xuICAgIGNvbnN0IGJsb2JzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9ic19sZW47IGkrKykge1xuICAgICAgICBjb25zdCBjaHVuayA9IHBkYXRhLnN1YmFycmF5KGkgKiBVU0VGVUxfQllURVNfUEVSX0JMT0IsIChpICsgMSkgKiBVU0VGVUxfQllURVNfUEVSX0JMT0IpO1xuICAgICAgICBjb25zdCBibG9iID0gZ2V0X2Jsb2IoY2h1bmspO1xuICAgICAgICBibG9icy5wdXNoKGJsb2IpO1xuICAgIH1cbiAgICByZXR1cm4gYmxvYnM7XG59O1xuZXhwb3J0IGNvbnN0IGJsb2JzVG9Db21taXRtZW50cyA9IChremcsIGJsb2JzKSA9PiB7XG4gICAgY29uc3QgY29tbWl0bWVudHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGJsb2Igb2YgYmxvYnMpIHtcbiAgICAgICAgY29tbWl0bWVudHMucHVzaChremcuYmxvYlRvS3pnQ29tbWl0bWVudChibG9iKSk7XG4gICAgfVxuICAgIHJldHVybiBjb21taXRtZW50cztcbn07XG5leHBvcnQgY29uc3QgYmxvYnNUb1Byb29mcyA9IChremcsIGJsb2JzLCBjb21taXRtZW50cykgPT4ge1xuICAgIGNvbnN0IHByb29mcyA9IGJsb2JzLm1hcCgoYmxvYiwgY3R4KSA9PiBremcuY29tcHV0ZUJsb2JLemdQcm9vZihibG9iLCBjb21taXRtZW50c1tjdHhdKSk7XG4gICAgcmV0dXJuIHByb29mcztcbn07XG4vKipcbiAqIENvbnZlcnRzIGEgdmVjdG9yIGNvbW1pdG1lbnQgZm9yIGEgZ2l2ZW4gZGF0YSBibG9iIHRvIGl0cyB2ZXJzaW9uZWQgaGFzaC4gIEZvciA0ODQ0LCB0aGlzIHZlcnNpb25cbiAqIG51bWJlciB3aWxsIGJlIDB4MDEgZm9yIEtaRyB2ZWN0b3IgY29tbWl0bWVudHMgYnV0IGNvdWxkIGJlIGRpZmZlcmVudCBpZiBmdXR1cmUgdmVjdG9yIGNvbW1pdG1lbnRcbiAqIHR5cGVzIGFyZSBpbnRyb2R1Y2VkXG4gKiBAcGFyYW0gY29tbWl0bWVudCBhIHZlY3RvciBjb21taXRtZW50IHRvIGEgYmxvYlxuICogQHBhcmFtIGJsb2JDb21taXRtZW50VmVyc2lvbiB0aGUgdmVyc2lvbiBudW1iZXIgY29ycmVzcG9uZGluZyB0byB0aGUgdHlwZSBvZiB2ZWN0b3IgY29tbWl0bWVudFxuICogQHJldHVybnMgYSB2ZXJzaW9uZWQgaGFzaCBjb3JyZXNwb25kaW5nIHRvIGEgZ2l2ZW4gYmxvYiB2ZWN0b3IgY29tbWl0bWVudFxuICovXG5leHBvcnQgY29uc3QgY29tcHV0ZVZlcnNpb25lZEhhc2ggPSAoY29tbWl0bWVudCwgYmxvYkNvbW1pdG1lbnRWZXJzaW9uKSA9PiB7XG4gICAgY29uc3QgY29tcHV0ZWRWZXJzaW9uZWRIYXNoID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICAgIGNvbXB1dGVkVmVyc2lvbmVkSGFzaC5zZXQoW2Jsb2JDb21taXRtZW50VmVyc2lvbl0sIDApO1xuICAgIGNvbXB1dGVkVmVyc2lvbmVkSGFzaC5zZXQoc2hhMjU2KGNvbW1pdG1lbnQpLnN1YmFycmF5KDEpLCAxKTtcbiAgICByZXR1cm4gY29tcHV0ZWRWZXJzaW9uZWRIYXNoO1xufTtcbi8qKlxuICogR2VuZXJhdGUgYW4gYXJyYXkgb2YgdmVyc2lvbmVkIGhhc2hlcyBmcm9tIGNvcnJlc3BvbmRpbmcga3pnIGNvbW1pdG1lbnRzXG4gKiBAcGFyYW0gY29tbWl0bWVudHMgYXJyYXkgb2Yga3pnIGNvbW1pdG1lbnRzXG4gKiBAcmV0dXJucyBhcnJheSBvZiB2ZXJzaW9uZWQgaGFzaGVzXG4gKiBOb3RlOiBhc3N1bWVzIEtaRyBjb21taXRtZW50cyAodmVyc2lvbiAxIHZlcnNpb24gaGFzaGVzKVxuICovXG5leHBvcnQgY29uc3QgY29tbWl0bWVudHNUb1ZlcnNpb25lZEhhc2hlcyA9IChjb21taXRtZW50cykgPT4ge1xuICAgIGNvbnN0IGhhc2hlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgY29tbWl0bWVudCBvZiBjb21taXRtZW50cykge1xuICAgICAgICBoYXNoZXMucHVzaChjb21wdXRlVmVyc2lvbmVkSGFzaChjb21taXRtZW50LCAweDAxKSk7XG4gICAgfVxuICAgIHJldHVybiBoYXNoZXM7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmxvYnMuanMubWFwIl0sIm5hbWVzIjpbInNoYTI1NiIsInV0ZjhUb0J5dGVzIiwiQllURVNfUEVSX0ZJRUxEX0VMRU1FTlQiLCJGSUVMRF9FTEVNRU5UU19QRVJfQkxPQiIsIlVTRUZVTF9CWVRFU19QRVJfQkxPQiIsIk1BWF9CTE9CU19QRVJfVFgiLCJNQVhfVVNFRlVMX0JZVEVTX1BFUl9UWCIsIkJMT0JfU0laRSIsImdldF9wYWRkZWQiLCJkYXRhIiwiYmxvYnNfbGVuIiwicGRhdGEiLCJVaW50OEFycmF5IiwiZmlsbCIsInNldCIsImJ5dGVMZW5ndGgiLCJnZXRfYmxvYiIsImJsb2IiLCJpIiwiY2h1bmsiLCJzdWJhcnJheSIsImdldEJsb2JzIiwiaW5wdXQiLCJsZW4iLCJFcnJvciIsIk1hdGgiLCJjZWlsIiwiYmxvYnMiLCJwdXNoIiwiYmxvYnNUb0NvbW1pdG1lbnRzIiwia3pnIiwiY29tbWl0bWVudHMiLCJibG9iVG9LemdDb21taXRtZW50IiwiYmxvYnNUb1Byb29mcyIsInByb29mcyIsIm1hcCIsImN0eCIsImNvbXB1dGVCbG9iS3pnUHJvb2YiLCJjb21wdXRlVmVyc2lvbmVkSGFzaCIsImNvbW1pdG1lbnQiLCJibG9iQ29tbWl0bWVudFZlcnNpb24iLCJjb21wdXRlZFZlcnNpb25lZEhhc2giLCJjb21taXRtZW50c1RvVmVyc2lvbmVkSGFzaGVzIiwiaGFzaGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/blobs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/bytes.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/bytes.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHexPrefix: () => (/* binding */ addHexPrefix),\n/* harmony export */   bigInt64ToBytes: () => (/* binding */ bigInt64ToBytes),\n/* harmony export */   bigIntMax: () => (/* binding */ bigIntMax),\n/* harmony export */   bigIntMin: () => (/* binding */ bigIntMin),\n/* harmony export */   bigIntToAddressBytes: () => (/* binding */ bigIntToAddressBytes),\n/* harmony export */   bigIntToBytes: () => (/* binding */ bigIntToBytes),\n/* harmony export */   bigIntToHex: () => (/* binding */ bigIntToHex),\n/* harmony export */   bigIntToUnpaddedBytes: () => (/* binding */ bigIntToUnpaddedBytes),\n/* harmony export */   bytesToBigInt: () => (/* binding */ bytesToBigInt),\n/* harmony export */   bytesToBigInt64: () => (/* binding */ bytesToBigInt64),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToInt: () => (/* binding */ bytesToInt),\n/* harmony export */   bytesToInt32: () => (/* binding */ bytesToInt32),\n/* harmony export */   bytesToUnprefixedHex: () => (/* binding */ bytesToUnprefixedHex),\n/* harmony export */   bytesToUtf8: () => (/* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToUtf8),\n/* harmony export */   compareBytes: () => (/* binding */ compareBytes),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   equalsBytes: () => (/* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.equalsBytes),\n/* harmony export */   fromSigned: () => (/* binding */ fromSigned),\n/* harmony export */   hexToBigInt: () => (/* binding */ hexToBigInt),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   int32ToBytes: () => (/* binding */ int32ToBytes),\n/* harmony export */   intToBytes: () => (/* binding */ intToBytes),\n/* harmony export */   intToHex: () => (/* binding */ intToHex),\n/* harmony export */   intToUnpaddedBytes: () => (/* binding */ intToUnpaddedBytes),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   setLengthLeft: () => (/* binding */ setLengthLeft),\n/* harmony export */   setLengthRight: () => (/* binding */ setLengthRight),\n/* harmony export */   short: () => (/* binding */ short),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   toUnsigned: () => (/* binding */ toUnsigned),\n/* harmony export */   unpadArray: () => (/* binding */ unpadArray),\n/* harmony export */   unpadBytes: () => (/* binding */ unpadBytes),\n/* harmony export */   unpadHex: () => (/* binding */ unpadHex),\n/* harmony export */   unprefixedHexToBytes: () => (/* binding */ unprefixedHexToBytes),\n/* harmony export */   utf8ToBytes: () => (/* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes),\n/* harmony export */   validateNoLeadingZeroes: () => (/* binding */ validateNoLeadingZeroes),\n/* harmony export */   zeros: () => (/* binding */ zeros)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_random_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/random.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/random.js\");\n/* harmony import */ var ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/utils.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/utils.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n// eslint-disable-next-line no-restricted-imports\n\n\n\nconst BIGINT_0 = BigInt(0);\n/**\n * @deprecated\n */ const bytesToUnprefixedHex = ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex;\n// hexToBytes cache\nconst hexToBytesMapFirstKey = {};\nconst hexToBytesMapSecondKey = {};\nfor(let i = 0; i < 16; i++){\n    const vSecondKey = i;\n    const vFirstKey = i * 16;\n    const key = i.toString(16).toLowerCase();\n    hexToBytesMapSecondKey[key] = vSecondKey;\n    hexToBytesMapSecondKey[key.toUpperCase()] = vSecondKey;\n    hexToBytesMapFirstKey[key] = vFirstKey;\n    hexToBytesMapFirstKey[key.toUpperCase()] = vFirstKey;\n}\n/**\n * NOTE: only use this function if the string is even, and only consists of hex characters\n * If this is not the case, this function could return weird results\n * @deprecated\n */ function _unprefixedHexToBytes(hex) {\n    const byteLen = hex.length;\n    const bytes = new Uint8Array(byteLen / 2);\n    for(let i = 0; i < byteLen; i += 2){\n        bytes[i / 2] = hexToBytesMapFirstKey[hex[i]] + hexToBytesMapSecondKey[hex[i + 1]];\n    }\n    return bytes;\n}\n/**\n * @deprecated\n */ const unprefixedHexToBytes = (inp)=>{\n    if (inp.slice(0, 2) === \"0x\") {\n        throw new Error(\"hex string is prefixed with 0x, should be unprefixed\");\n    } else {\n        return _unprefixedHexToBytes((0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(inp));\n    }\n};\n/****************  Borrowed from @chainsafe/ssz */ // Caching this info costs about ~1000 bytes and speeds up toHexString() by x6\nconst hexByByte = Array.from({\n    length: 256\n}, (v, i)=>i.toString(16).padStart(2, \"0\"));\nconst bytesToHex = (bytes)=>{\n    let hex = `0x`;\n    if (bytes === undefined || bytes.length === 0) return hex;\n    for (const byte of bytes){\n        hex = `${hex}${hexByByte[byte]}`;\n    }\n    return hex;\n};\n// BigInt cache for the numbers 0 - 256*256-1 (two-byte bytes)\nconst BIGINT_CACHE = [];\nfor(let i = 0; i <= 256 * 256 - 1; i++){\n    BIGINT_CACHE[i] = BigInt(i);\n}\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n * @param {Uint8Array} bytes the bytes to convert\n * @returns {bigint}\n */ const bytesToBigInt = (bytes, littleEndian = false)=>{\n    if (littleEndian) {\n        bytes.reverse();\n    }\n    const hex = bytesToHex(bytes);\n    if (hex === \"0x\") {\n        return BIGINT_0;\n    }\n    if (hex.length === 4) {\n        // If the byte length is 1 (this is faster than checking `bytes.length === 1`)\n        return BIGINT_CACHE[bytes[0]];\n    }\n    if (hex.length === 6) {\n        return BIGINT_CACHE[bytes[0] * 256 + bytes[1]];\n    }\n    return BigInt(hex);\n};\n/**\n * Converts a {@link Uint8Array} to a {@link number}.\n * @param {Uint8Array} bytes the bytes to convert\n * @return  {number}\n * @throws If the input number exceeds 53 bits.\n */ const bytesToInt = (bytes)=>{\n    const res = Number(bytesToBigInt(bytes));\n    if (!Number.isSafeInteger(res)) throw new Error(\"Number exceeds 53 bits\");\n    return res;\n};\n// TODO: Restrict the input type to only PrefixedHexString\n/**\n * Converts a {@link PrefixedHexString} to a {@link Uint8Array}\n * @param {PrefixedHexString | string} hex The 0x-prefixed hex string to convert\n * @returns {Uint8Array} The converted bytes\n * @throws If the input is not a valid 0x-prefixed hex string\n */ const hexToBytes = (hex)=>{\n    if (typeof hex !== \"string\") {\n        throw new Error(`hex argument type ${typeof hex} must be of type string`);\n    }\n    if (!/^0x[0-9a-fA-F]*$/.test(hex)) {\n        throw new Error(`Input must be a 0x-prefixed hexadecimal string, got ${hex}`);\n    }\n    const unprefixedHex = hex.slice(2);\n    return _unprefixedHexToBytes(unprefixedHex.length % 2 === 0 ? unprefixedHex : (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(unprefixedHex));\n};\n/******************************************/ /**\n * Converts a {@link number} into a {@link PrefixedHexString}\n * @param {number} i\n * @return {PrefixedHexString}\n */ const intToHex = (i)=>{\n    if (!Number.isSafeInteger(i) || i < 0) {\n        throw new Error(`Received an invalid integer type: ${i}`);\n    }\n    return `0x${i.toString(16)}`;\n};\n/**\n * Converts an {@link number} to a {@link Uint8Array}\n * @param {Number} i\n * @return {Uint8Array}\n */ const intToBytes = (i)=>{\n    const hex = intToHex(i);\n    return hexToBytes(hex);\n};\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n *  * @param {bigint} num the bigint to convert\n * @returns {Uint8Array}\n */ const bigIntToBytes = (num, littleEndian = false)=>{\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    const bytes = toBytes(`0x${(0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(num.toString(16))}`);\n    return littleEndian ? bytes.reverse() : bytes;\n};\n/**\n * Returns a Uint8Array filled with 0s.\n * @param {number} bytes the number of bytes of the Uint8Array\n * @return {Uint8Array}\n */ const zeros = (bytes)=>{\n    return new Uint8Array(bytes);\n};\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @param {boolean} right whether to start padding form the left or right\n * @return {Uint8Array}\n */ const setLength = (msg, length, right)=>{\n    if (right) {\n        if (msg.length < length) {\n            return new Uint8Array([\n                ...msg,\n                ...zeros(length - msg.length)\n            ]);\n        }\n        return msg.subarray(0, length);\n    } else {\n        if (msg.length < length) {\n            return new Uint8Array([\n                ...zeros(length - msg.length),\n                ...msg\n            ]);\n        }\n        return msg.subarray(-length);\n    }\n};\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */ const setLengthLeft = (msg, length)=>{\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(msg);\n    return setLength(msg, length, false);\n};\n/**\n * Right Pads a `Uint8Array` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */ const setLengthRight = (msg, length)=>{\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(msg);\n    return setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Uint8Array`, `number[]` or `string`.\n * @param {Uint8Array|number[]|string} a\n * @return {Uint8Array|number[]|string}\n */ const stripZeros = (a)=>{\n    let first = a[0];\n    while(a.length > 0 && first.toString() === \"0\"){\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param {Uint8Array} a\n * @return {Uint8Array}\n */ const unpadBytes = (a)=>{\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param  {number[]} a\n * @return {number[]}\n */ const unpadArray = (a)=>{\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsArray)(a);\n    return stripZeros(a);\n};\n// TODO: Restrict the input type to only PrefixedHexString\n/**\n * Trims leading zeros from a `PrefixedHexString`.\n * @param {PrefixedHexString | string} a\n * @return {PrefixedHexString}\n */ const unpadHex = (a)=>{\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsHexString)(a);\n    return `0x${stripZeros((0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(a))}`;\n};\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Buffer`, `Uint8Array`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBytes()` method.\n * @param {ToBytesInputTypes} v the value\n * @return {Uint8Array}\n */ const toBytes = (v)=>{\n    if (v === null || v === undefined) {\n        return new Uint8Array();\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Uint8Array.from(v);\n    }\n    if (typeof v === \"string\") {\n        if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.isHexString)(v)) {\n            throw new Error(`Cannot convert string to Uint8Array. toBytes only supports 0x-prefixed hex strings and this string was given: ${v}`);\n        }\n        return hexToBytes(v);\n    }\n    if (typeof v === \"number\") {\n        return intToBytes(v);\n    }\n    if (typeof v === \"bigint\") {\n        if (v < BIGINT_0) {\n            throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n        }\n        let n = v.toString(16);\n        if (n.length % 2) n = \"0\" + n;\n        return unprefixedHexToBytes(n);\n    }\n    if (v.toBytes !== undefined) {\n        // converts a `TransformableToBytes` object to a Uint8Array\n        return v.toBytes();\n    }\n    throw new Error(\"invalid type\");\n};\n/**\n * Interprets a `Uint8Array` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param {Uint8Array} num Signed integer value\n * @returns {bigint}\n */ const fromSigned = (num)=>{\n    return BigInt.asIntN(256, bytesToBigInt(num));\n};\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Uint8Array`. Assumes 256-bit numbers.\n * @param {bigint} num\n * @returns {Uint8Array}\n */ const toUnsigned = (num)=>{\n    return bigIntToBytes(BigInt.asUintN(256, num));\n};\n/**\n * Adds \"0x\" to a given `string` if it does not already start with \"0x\".\n * @param {string} str\n * @return {PrefixedHexString}\n */ const addHexPrefix = (str)=>{\n    if (typeof str !== \"string\") {\n        return str;\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.isHexString)(str) ? str : `0x${str}`;\n};\n/**\n * Shortens a string  or Uint8Array's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n * @param {Uint8Array | string} bytes\n * @param {number} maxLength\n * @return {string}\n */ const short = (bytes, maxLength = 50)=>{\n    const byteStr = bytes instanceof Uint8Array ? bytesToHex(bytes) : bytes;\n    const len = byteStr.slice(0, 2) === \"0x\" ? maxLength + 2 : maxLength;\n    if (byteStr.length <= len) {\n        return byteStr;\n    }\n    return byteStr.slice(0, len) + \"…\";\n};\n/**\n * Checks provided Uint8Array for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Uint8Array values\n * @throws if any provided value is found to have leading zero bytes\n */ const validateNoLeadingZeroes = (values)=>{\n    for (const [k, v] of Object.entries(values)){\n        if (v !== undefined && v.length > 0 && v[0] === 0) {\n            throw new Error(`${k} cannot have leading zeroes, received: ${bytesToHex(v)}`);\n        }\n    }\n};\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n * @param {bigint} num the bigint to convert\n * @returns {PrefixedHexString}\n */ const bigIntToHex = (num)=>{\n    return `0x${num.toString(16)}`;\n};\n/**\n * Calculates max bigint from an array of bigints\n * @param args array of bigints\n */ const bigIntMax = (...args)=>args.reduce((m, e)=>e > m ? e : m);\n/**\n * Calculates min BigInt from an array of BigInts\n * @param args array of bigints\n */ const bigIntMin = (...args)=>args.reduce((m, e)=>e < m ? e : m);\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {bigint} value the bigint to convert\n * @returns {Uint8Array}\n */ const bigIntToUnpaddedBytes = (value)=>{\n    return unpadBytes(bigIntToBytes(value));\n};\nconst bigIntToAddressBytes = (value, strict = true)=>{\n    const addressBytes = bigIntToBytes(value);\n    if (strict && addressBytes.length > 20) {\n        throw Error(`Invalid address bytes length=${addressBytes.length} strict=${strict}`);\n    }\n    // setLength already slices if more than requisite length\n    return setLengthLeft(addressBytes, 20);\n};\n/**\n * Convert value from number to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {number} value the bigint to convert\n * @returns {Uint8Array}\n */ const intToUnpaddedBytes = (value)=>{\n    return unpadBytes(intToBytes(value));\n};\n/**\n * Compares two Uint8Arrays and returns a number indicating their order in a sorted array.\n *\n * @param {Uint8Array} value1 - The first Uint8Array to compare.\n * @param {Uint8Array} value2 - The second Uint8Array to compare.\n * @returns {number} A positive number if value1 is larger than value2,\n *                   A negative number if value1 is smaller than value2,\n *                   or 0 if value1 and value2 are equal.\n */ const compareBytes = (value1, value2)=>{\n    const bigIntValue1 = bytesToBigInt(value1);\n    const bigIntValue2 = bytesToBigInt(value2);\n    return bigIntValue1 > bigIntValue2 ? 1 : bigIntValue1 < bigIntValue2 ? -1 : 0;\n};\n/**\n * Generates a Uint8Array of random bytes of specified length.\n *\n * @param {number} length - The length of the Uint8Array.\n * @returns {Uint8Array} A Uint8Array of random bytes of specified length.\n */ const randomBytes = (length)=>{\n    return (0,ethereum_cryptography_random_js__WEBPACK_IMPORTED_MODULE_0__.getRandomBytesSync)(length);\n};\n/**\n * This mirrors the functionality of the `ethereum-cryptography` export except\n * it skips the check to validate that every element of `arrays` is indead a `uint8Array`\n * Can give small performance gains on large arrays\n * @param {Uint8Array[]} arrays an array of Uint8Arrays\n * @returns {Uint8Array} one Uint8Array with all the elements of the original set\n * works like `Buffer.concat`\n */ const concatBytes = (...arrays)=>{\n    if (arrays.length === 1) return arrays[0];\n    const length = arrays.reduce((a, arr)=>a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for(let i = 0, pad = 0; i < arrays.length; i++){\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n};\n/**\n * @notice Convert a Uint8Array to a 32-bit integer\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 32-bit integer.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {number} The 32-bit integer read from the input Uint8Array.\n */ function bytesToInt32(bytes, littleEndian = false) {\n    if (bytes.length < 4) {\n        bytes = setLength(bytes, 4, littleEndian);\n    }\n    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    return dataView.getUint32(0, littleEndian);\n}\n/**\n * @notice Convert a Uint8Array to a 64-bit bigint\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 64-bit bigint.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {bigint} The 64-bit bigint read from the input Uint8Array.\n */ function bytesToBigInt64(bytes, littleEndian = false) {\n    if (bytes.length < 8) {\n        bytes = setLength(bytes, 8, littleEndian);\n    }\n    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    return dataView.getBigUint64(0, littleEndian);\n}\n/**\n * @notice Convert a 32-bit integer to a Uint8Array.\n * @param {number} value The 32-bit integer to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 4 containing the integer.\n */ function int32ToBytes(value, littleEndian = false) {\n    const buffer = new ArrayBuffer(4);\n    const dataView = new DataView(buffer);\n    dataView.setUint32(0, value, littleEndian);\n    return new Uint8Array(buffer);\n}\n/**\n * @notice Convert a 64-bit bigint to a Uint8Array.\n * @param {bigint} value The 64-bit bigint to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 8 containing the bigint.\n */ function bigInt64ToBytes(value, littleEndian = false) {\n    const buffer = new ArrayBuffer(8);\n    const dataView = new DataView(buffer);\n    dataView.setBigUint64(0, value, littleEndian);\n    return new Uint8Array(buffer);\n}\n// eslint-disable-next-line no-restricted-imports\n\n// TODO: Restrict the input type to only PrefixedHexString\nfunction hexToBigInt(input) {\n    return bytesToBigInt(hexToBytes((0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.isHexString)(input) ? input : `0x${input}`));\n} //# sourceMappingURL=bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/constants.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/constants.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BIGINT_0: () => (/* binding */ BIGINT_0),\n/* harmony export */   BIGINT_1: () => (/* binding */ BIGINT_1),\n/* harmony export */   BIGINT_100: () => (/* binding */ BIGINT_100),\n/* harmony export */   BIGINT_128: () => (/* binding */ BIGINT_128),\n/* harmony export */   BIGINT_160: () => (/* binding */ BIGINT_160),\n/* harmony export */   BIGINT_2: () => (/* binding */ BIGINT_2),\n/* harmony export */   BIGINT_224: () => (/* binding */ BIGINT_224),\n/* harmony export */   BIGINT_255: () => (/* binding */ BIGINT_255),\n/* harmony export */   BIGINT_256: () => (/* binding */ BIGINT_256),\n/* harmony export */   BIGINT_27: () => (/* binding */ BIGINT_27),\n/* harmony export */   BIGINT_28: () => (/* binding */ BIGINT_28),\n/* harmony export */   BIGINT_2EXP160: () => (/* binding */ BIGINT_2EXP160),\n/* harmony export */   BIGINT_2EXP224: () => (/* binding */ BIGINT_2EXP224),\n/* harmony export */   BIGINT_2EXP256: () => (/* binding */ BIGINT_2EXP256),\n/* harmony export */   BIGINT_2EXP96: () => (/* binding */ BIGINT_2EXP96),\n/* harmony export */   BIGINT_3: () => (/* binding */ BIGINT_3),\n/* harmony export */   BIGINT_31: () => (/* binding */ BIGINT_31),\n/* harmony export */   BIGINT_32: () => (/* binding */ BIGINT_32),\n/* harmony export */   BIGINT_64: () => (/* binding */ BIGINT_64),\n/* harmony export */   BIGINT_7: () => (/* binding */ BIGINT_7),\n/* harmony export */   BIGINT_8: () => (/* binding */ BIGINT_8),\n/* harmony export */   BIGINT_96: () => (/* binding */ BIGINT_96),\n/* harmony export */   BIGINT_NEG1: () => (/* binding */ BIGINT_NEG1),\n/* harmony export */   KECCAK256_NULL: () => (/* binding */ KECCAK256_NULL),\n/* harmony export */   KECCAK256_NULL_S: () => (/* binding */ KECCAK256_NULL_S),\n/* harmony export */   KECCAK256_RLP: () => (/* binding */ KECCAK256_RLP),\n/* harmony export */   KECCAK256_RLP_ARRAY: () => (/* binding */ KECCAK256_RLP_ARRAY),\n/* harmony export */   KECCAK256_RLP_ARRAY_S: () => (/* binding */ KECCAK256_RLP_ARRAY_S),\n/* harmony export */   KECCAK256_RLP_S: () => (/* binding */ KECCAK256_RLP_S),\n/* harmony export */   MAX_INTEGER: () => (/* binding */ MAX_INTEGER),\n/* harmony export */   MAX_INTEGER_BIGINT: () => (/* binding */ MAX_INTEGER_BIGINT),\n/* harmony export */   MAX_UINT64: () => (/* binding */ MAX_UINT64),\n/* harmony export */   MAX_WITHDRAWALS_PER_PAYLOAD: () => (/* binding */ MAX_WITHDRAWALS_PER_PAYLOAD),\n/* harmony export */   RIPEMD160_ADDRESS_STRING: () => (/* binding */ RIPEMD160_ADDRESS_STRING),\n/* harmony export */   RLP_EMPTY_STRING: () => (/* binding */ RLP_EMPTY_STRING),\n/* harmony export */   SECP256K1_ORDER: () => (/* binding */ SECP256K1_ORDER),\n/* harmony export */   SECP256K1_ORDER_DIV_2: () => (/* binding */ SECP256K1_ORDER_DIV_2),\n/* harmony export */   TWO_POW256: () => (/* binding */ TWO_POW256)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\n\n/**\n * 2^64-1\n */ const MAX_UINT64 = BigInt(\"0xffffffffffffffff\");\n/**\n * The max integer that the evm can handle (2^256-1)\n */ const MAX_INTEGER = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */ const MAX_INTEGER_BIGINT = BigInt(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\");\nconst SECP256K1_ORDER = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__.secp256k1.CURVE.n;\nconst SECP256K1_ORDER_DIV_2 = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__.secp256k1.CURVE.n / BigInt(2);\n/**\n * 2^256\n */ const TWO_POW256 = BigInt(\"0x10000000000000000000000000000000000000000000000000000000000000000\");\n/**\n * Keccak-256 hash of null\n */ const KECCAK256_NULL_S = \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\";\n/**\n * Keccak-256 hash of null\n */ const KECCAK256_NULL = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_NULL_S);\n/**\n * Keccak-256 of an RLP of an empty array\n */ const KECCAK256_RLP_ARRAY_S = \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\";\n/**\n * Keccak-256 of an RLP of an empty array\n */ const KECCAK256_RLP_ARRAY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_RLP_ARRAY_S);\n/**\n * Keccak-256 hash of the RLP of null\n */ const KECCAK256_RLP_S = \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\";\n/**\n * Keccak-256 hash of the RLP of null\n */ const KECCAK256_RLP = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_RLP_S);\n/**\n *  RLP encoded empty string\n */ const RLP_EMPTY_STRING = Uint8Array.from([\n    0x80\n]);\nconst MAX_WITHDRAWALS_PER_PAYLOAD = 16;\nconst RIPEMD160_ADDRESS_STRING = \"0000000000000000000000000000000000000003\";\n/**\n * BigInt constants\n */ const BIGINT_NEG1 = BigInt(-1);\nconst BIGINT_0 = BigInt(0);\nconst BIGINT_1 = BigInt(1);\nconst BIGINT_2 = BigInt(2);\nconst BIGINT_3 = BigInt(3);\nconst BIGINT_7 = BigInt(7);\nconst BIGINT_8 = BigInt(8);\nconst BIGINT_27 = BigInt(27);\nconst BIGINT_28 = BigInt(28);\nconst BIGINT_31 = BigInt(31);\nconst BIGINT_32 = BigInt(32);\nconst BIGINT_64 = BigInt(64);\nconst BIGINT_128 = BigInt(128);\nconst BIGINT_255 = BigInt(255);\nconst BIGINT_256 = BigInt(256);\nconst BIGINT_96 = BigInt(96);\nconst BIGINT_100 = BigInt(100);\nconst BIGINT_160 = BigInt(160);\nconst BIGINT_224 = BigInt(224);\nconst BIGINT_2EXP96 = BigInt(79228162514264337593543950336);\nconst BIGINT_2EXP160 = BigInt(1461501637330902918203684832716283019655932542976);\nconst BIGINT_2EXP224 = BigInt(26959946667150639794667015087019630673637144422540572481103610249216);\nconst BIGINT_2EXP256 = BIGINT_2 ** BIGINT_256; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErRDtBQUN2QjtBQUN4Qzs7Q0FFQyxHQUNNLE1BQU1FLGFBQWFDLE9BQU8sc0JBQXNCO0FBQ3ZEOztDQUVDLEdBQ00sTUFBTUMsY0FBY0QsT0FBTyxzRUFBc0U7QUFDeEc7Ozs7Q0FJQyxHQUNNLE1BQU1FLHFCQUFxQkYsT0FBTyxrRkFBa0Y7QUFDcEgsTUFBTUcsa0JBQWtCTix5RUFBU0EsQ0FBQ08sS0FBSyxDQUFDQyxDQUFDLENBQUM7QUFDMUMsTUFBTUMsd0JBQXdCVCx5RUFBU0EsQ0FBQ08sS0FBSyxDQUFDQyxDQUFDLEdBQUdMLE9BQU8sR0FBRztBQUNuRTs7Q0FFQyxHQUNNLE1BQU1PLGFBQWFQLE9BQU8sdUVBQXVFO0FBQ3hHOztDQUVDLEdBQ00sTUFBTVEsbUJBQW1CLHFFQUFxRTtBQUNyRzs7Q0FFQyxHQUNNLE1BQU1DLGlCQUFpQlgscURBQVVBLENBQUNVLGtCQUFrQjtBQUMzRDs7Q0FFQyxHQUNNLE1BQU1FLHdCQUF3QixxRUFBcUU7QUFDMUc7O0NBRUMsR0FDTSxNQUFNQyxzQkFBc0JiLHFEQUFVQSxDQUFDWSx1QkFBdUI7QUFDckU7O0NBRUMsR0FDTSxNQUFNRSxrQkFBa0IscUVBQXFFO0FBQ3BHOztDQUVDLEdBQ00sTUFBTUMsZ0JBQWdCZixxREFBVUEsQ0FBQ2MsaUJBQWlCO0FBQ3pEOztDQUVDLEdBQ00sTUFBTUUsbUJBQW1CQyxXQUFXQyxJQUFJLENBQUM7SUFBQztDQUFLLEVBQUU7QUFDakQsTUFBTUMsOEJBQThCLEdBQUc7QUFDdkMsTUFBTUMsMkJBQTJCLDJDQUEyQztBQUNuRjs7Q0FFQyxHQUNNLE1BQU1DLGNBQWNuQixPQUFPLENBQUMsR0FBRztBQUMvQixNQUFNb0IsV0FBV3BCLE9BQU8sR0FBRztBQUMzQixNQUFNcUIsV0FBV3JCLE9BQU8sR0FBRztBQUMzQixNQUFNc0IsV0FBV3RCLE9BQU8sR0FBRztBQUMzQixNQUFNdUIsV0FBV3ZCLE9BQU8sR0FBRztBQUMzQixNQUFNd0IsV0FBV3hCLE9BQU8sR0FBRztBQUMzQixNQUFNeUIsV0FBV3pCLE9BQU8sR0FBRztBQUMzQixNQUFNMEIsWUFBWTFCLE9BQU8sSUFBSTtBQUM3QixNQUFNMkIsWUFBWTNCLE9BQU8sSUFBSTtBQUM3QixNQUFNNEIsWUFBWTVCLE9BQU8sSUFBSTtBQUM3QixNQUFNNkIsWUFBWTdCLE9BQU8sSUFBSTtBQUM3QixNQUFNOEIsWUFBWTlCLE9BQU8sSUFBSTtBQUM3QixNQUFNK0IsYUFBYS9CLE9BQU8sS0FBSztBQUMvQixNQUFNZ0MsYUFBYWhDLE9BQU8sS0FBSztBQUMvQixNQUFNaUMsYUFBYWpDLE9BQU8sS0FBSztBQUMvQixNQUFNa0MsWUFBWWxDLE9BQU8sSUFBSTtBQUM3QixNQUFNbUMsYUFBYW5DLE9BQU8sS0FBSztBQUMvQixNQUFNb0MsYUFBYXBDLE9BQU8sS0FBSztBQUMvQixNQUFNcUMsYUFBYXJDLE9BQU8sS0FBSztBQUMvQixNQUFNc0MsZ0JBQWdCdEMsT0FBTywrQkFBK0I7QUFDNUQsTUFBTXVDLGlCQUFpQnZDLE9BQU8sbURBQW1EO0FBQ2pGLE1BQU13QyxpQkFBaUJ4QyxPQUFPLHNFQUFzRTtBQUNwRyxNQUFNeUMsaUJBQWlCbkIsWUFBWVcsV0FBVyxDQUNyRCxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xb2duaXRhLy4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vY29uc3RhbnRzLmpzPzAzYjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2VjcDI1NmsxIH0gZnJvbSAnZXRoZXJldW0tY3J5cHRvZ3JhcGh5L3NlY3AyNTZrMS5qcyc7XG5pbXBvcnQgeyBoZXhUb0J5dGVzIH0gZnJvbSAnLi9ieXRlcy5qcyc7XG4vKipcbiAqIDJeNjQtMVxuICovXG5leHBvcnQgY29uc3QgTUFYX1VJTlQ2NCA9IEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJyk7XG4vKipcbiAqIFRoZSBtYXggaW50ZWdlciB0aGF0IHRoZSBldm0gY2FuIGhhbmRsZSAoMl4yNTYtMSlcbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9JTlRFR0VSID0gQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYnKTtcbi8qKlxuICogVGhlIG1heCBpbnRlZ2VyIHRoYXQgdGhlIGV2bSBjYW4gaGFuZGxlICgyXjI1Ni0xKSBhcyBhIGJpZ2ludFxuICogMl4yNTYtMSBlcXVhbHMgdG8gMzQwMjgyMzY2OTIwOTM4NDYzNDYzMzc0NjA3NDMxNzY4MjExNDU1XG4gKiBXZSB1c2UgbGl0ZXJhbCB2YWx1ZSBpbnN0ZWFkIG9mIGNhbGN1bGF0ZWQgdmFsdWUgZm9yIGNvbXBhdGliaWxpdHkgaXNzdWUuXG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfSU5URUdFUl9CSUdJTlQgPSBCaWdJbnQoJzExNTc5MjA4OTIzNzMxNjE5NTQyMzU3MDk4NTAwODY4NzkwNzg1MzI2OTk4NDY2NTY0MDU2NDAzOTQ1NzU4NDAwNzkxMzEyOTYzOTkzNScpO1xuZXhwb3J0IGNvbnN0IFNFQ1AyNTZLMV9PUkRFUiA9IHNlY3AyNTZrMS5DVVJWRS5uO1xuZXhwb3J0IGNvbnN0IFNFQ1AyNTZLMV9PUkRFUl9ESVZfMiA9IHNlY3AyNTZrMS5DVVJWRS5uIC8gQmlnSW50KDIpO1xuLyoqXG4gKiAyXjI1NlxuICovXG5leHBvcnQgY29uc3QgVFdPX1BPVzI1NiA9IEJpZ0ludCgnMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcpO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgbnVsbFxuICovXG5leHBvcnQgY29uc3QgS0VDQ0FLMjU2X05VTExfUyA9ICcweGM1ZDI0NjAxODZmNzIzM2M5MjdlN2RiMmRjYzcwM2MwZTUwMGI2NTNjYTgyMjczYjdiZmFkODA0NWQ4NWE0NzAnO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgbnVsbFxuICovXG5leHBvcnQgY29uc3QgS0VDQ0FLMjU2X05VTEwgPSBoZXhUb0J5dGVzKEtFQ0NBSzI1Nl9OVUxMX1MpO1xuLyoqXG4gKiBLZWNjYWstMjU2IG9mIGFuIFJMUCBvZiBhbiBlbXB0eSBhcnJheVxuICovXG5leHBvcnQgY29uc3QgS0VDQ0FLMjU2X1JMUF9BUlJBWV9TID0gJzB4MWRjYzRkZThkZWM3NWQ3YWFiODViNTY3YjZjY2Q0MWFkMzEyNDUxYjk0OGE3NDEzZjBhMTQyZmQ0MGQ0OTM0Nyc7XG4vKipcbiAqIEtlY2Nhay0yNTYgb2YgYW4gUkxQIG9mIGFuIGVtcHR5IGFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCBLRUNDQUsyNTZfUkxQX0FSUkFZID0gaGV4VG9CeXRlcyhLRUNDQUsyNTZfUkxQX0FSUkFZX1MpO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgdGhlIFJMUCBvZiBudWxsXG4gKi9cbmV4cG9ydCBjb25zdCBLRUNDQUsyNTZfUkxQX1MgPSAnMHg1NmU4MWYxNzFiY2M1NWE2ZmY4MzQ1ZTY5MmMwZjg2ZTViNDhlMDFiOTk2Y2FkYzAwMTYyMmZiNWUzNjNiNDIxJztcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIHRoZSBSTFAgb2YgbnVsbFxuICovXG5leHBvcnQgY29uc3QgS0VDQ0FLMjU2X1JMUCA9IGhleFRvQnl0ZXMoS0VDQ0FLMjU2X1JMUF9TKTtcbi8qKlxuICogIFJMUCBlbmNvZGVkIGVtcHR5IHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgUkxQX0VNUFRZX1NUUklORyA9IFVpbnQ4QXJyYXkuZnJvbShbMHg4MF0pO1xuZXhwb3J0IGNvbnN0IE1BWF9XSVRIRFJBV0FMU19QRVJfUEFZTE9BRCA9IDE2O1xuZXhwb3J0IGNvbnN0IFJJUEVNRDE2MF9BRERSRVNTX1NUUklORyA9ICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzJztcbi8qKlxuICogQmlnSW50IGNvbnN0YW50c1xuICovXG5leHBvcnQgY29uc3QgQklHSU5UX05FRzEgPSBCaWdJbnQoLTEpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8wID0gQmlnSW50KDApO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8xID0gQmlnSW50KDEpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yID0gQmlnSW50KDIpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8zID0gQmlnSW50KDMpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF83ID0gQmlnSW50KDcpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF84ID0gQmlnSW50KDgpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yNyA9IEJpZ0ludCgyNyk7XG5leHBvcnQgY29uc3QgQklHSU5UXzI4ID0gQmlnSW50KDI4KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMzEgPSBCaWdJbnQoMzEpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8zMiA9IEJpZ0ludCgzMik7XG5leHBvcnQgY29uc3QgQklHSU5UXzY0ID0gQmlnSW50KDY0KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMTI4ID0gQmlnSW50KDEyOCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzI1NSA9IEJpZ0ludCgyNTUpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yNTYgPSBCaWdJbnQoMjU2KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfOTYgPSBCaWdJbnQoOTYpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8xMDAgPSBCaWdJbnQoMTAwKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMTYwID0gQmlnSW50KDE2MCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzIyNCA9IEJpZ0ludCgyMjQpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yRVhQOTYgPSBCaWdJbnQoNzkyMjgxNjI1MTQyNjQzMzc1OTM1NDM5NTAzMzYpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yRVhQMTYwID0gQmlnSW50KDE0NjE1MDE2MzczMzA5MDI5MTgyMDM2ODQ4MzI3MTYyODMwMTk2NTU5MzI1NDI5NzYpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yRVhQMjI0ID0gQmlnSW50KDI2OTU5OTQ2NjY3MTUwNjM5Nzk0NjY3MDE1MDg3MDE5NjMwNjczNjM3MTQ0NDIyNTQwNTcyNDgxMTAzNjEwMjQ5MjE2KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMkVYUDI1NiA9IEJJR0lOVF8yICoqIEJJR0lOVF8yNTY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbInNlY3AyNTZrMSIsImhleFRvQnl0ZXMiLCJNQVhfVUlOVDY0IiwiQmlnSW50IiwiTUFYX0lOVEVHRVIiLCJNQVhfSU5URUdFUl9CSUdJTlQiLCJTRUNQMjU2SzFfT1JERVIiLCJDVVJWRSIsIm4iLCJTRUNQMjU2SzFfT1JERVJfRElWXzIiLCJUV09fUE9XMjU2IiwiS0VDQ0FLMjU2X05VTExfUyIsIktFQ0NBSzI1Nl9OVUxMIiwiS0VDQ0FLMjU2X1JMUF9BUlJBWV9TIiwiS0VDQ0FLMjU2X1JMUF9BUlJBWSIsIktFQ0NBSzI1Nl9STFBfUyIsIktFQ0NBSzI1Nl9STFAiLCJSTFBfRU1QVFlfU1RSSU5HIiwiVWludDhBcnJheSIsImZyb20iLCJNQVhfV0lUSERSQVdBTFNfUEVSX1BBWUxPQUQiLCJSSVBFTUQxNjBfQUREUkVTU19TVFJJTkciLCJCSUdJTlRfTkVHMSIsIkJJR0lOVF8wIiwiQklHSU5UXzEiLCJCSUdJTlRfMiIsIkJJR0lOVF8zIiwiQklHSU5UXzciLCJCSUdJTlRfOCIsIkJJR0lOVF8yNyIsIkJJR0lOVF8yOCIsIkJJR0lOVF8zMSIsIkJJR0lOVF8zMiIsIkJJR0lOVF82NCIsIkJJR0lOVF8xMjgiLCJCSUdJTlRfMjU1IiwiQklHSU5UXzI1NiIsIkJJR0lOVF85NiIsIkJJR0lOVF8xMDAiLCJCSUdJTlRfMTYwIiwiQklHSU5UXzIyNCIsIkJJR0lOVF8yRVhQOTYiLCJCSUdJTlRfMkVYUDE2MCIsIkJJR0lOVF8yRVhQMjI0IiwiQklHSU5UXzJFWFAyNTYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/db.js":
/*!******************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/db.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyEncoding: () => (/* binding */ KeyEncoding),\n/* harmony export */   ValueEncoding: () => (/* binding */ ValueEncoding)\n/* harmony export */ });\nvar KeyEncoding;\n(function(KeyEncoding) {\n    KeyEncoding[\"String\"] = \"string\";\n    KeyEncoding[\"Bytes\"] = \"view\";\n    KeyEncoding[\"Number\"] = \"number\";\n})(KeyEncoding || (KeyEncoding = {}));\nvar ValueEncoding;\n(function(ValueEncoding) {\n    ValueEncoding[\"String\"] = \"string\";\n    ValueEncoding[\"Bytes\"] = \"view\";\n    ValueEncoding[\"JSON\"] = \"json\";\n})(ValueEncoding || (ValueEncoding = {})); //# sourceMappingURL=db.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9kYi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLElBQUlBLFlBQVk7QUFDdEIsVUFBVUEsV0FBVztJQUNsQkEsV0FBVyxDQUFDLFNBQVMsR0FBRztJQUN4QkEsV0FBVyxDQUFDLFFBQVEsR0FBRztJQUN2QkEsV0FBVyxDQUFDLFNBQVMsR0FBRztBQUM1QixHQUFHQSxlQUFnQkEsQ0FBQUEsY0FBYyxDQUFDO0FBQzNCLElBQUlDLGNBQWM7QUFDeEIsVUFBVUEsYUFBYTtJQUNwQkEsYUFBYSxDQUFDLFNBQVMsR0FBRztJQUMxQkEsYUFBYSxDQUFDLFFBQVEsR0FBRztJQUN6QkEsYUFBYSxDQUFDLE9BQU8sR0FBRztBQUM1QixHQUFHQSxpQkFBa0JBLENBQUFBLGdCQUFnQixDQUFDLEtBQ3RDLDhCQUE4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3FvZ25pdGEvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9kYi5qcz8zMjg0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgS2V5RW5jb2Rpbmc7XG4oZnVuY3Rpb24gKEtleUVuY29kaW5nKSB7XG4gICAgS2V5RW5jb2RpbmdbXCJTdHJpbmdcIl0gPSBcInN0cmluZ1wiO1xuICAgIEtleUVuY29kaW5nW1wiQnl0ZXNcIl0gPSBcInZpZXdcIjtcbiAgICBLZXlFbmNvZGluZ1tcIk51bWJlclwiXSA9IFwibnVtYmVyXCI7XG59KShLZXlFbmNvZGluZyB8fCAoS2V5RW5jb2RpbmcgPSB7fSkpO1xuZXhwb3J0IHZhciBWYWx1ZUVuY29kaW5nO1xuKGZ1bmN0aW9uIChWYWx1ZUVuY29kaW5nKSB7XG4gICAgVmFsdWVFbmNvZGluZ1tcIlN0cmluZ1wiXSA9IFwic3RyaW5nXCI7XG4gICAgVmFsdWVFbmNvZGluZ1tcIkJ5dGVzXCJdID0gXCJ2aWV3XCI7XG4gICAgVmFsdWVFbmNvZGluZ1tcIkpTT05cIl0gPSBcImpzb25cIjtcbn0pKFZhbHVlRW5jb2RpbmcgfHwgKFZhbHVlRW5jb2RpbmcgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGIuanMubWFwIl0sIm5hbWVzIjpbIktleUVuY29kaW5nIiwiVmFsdWVFbmNvZGluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/db.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/genesis.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/genesis.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseGethGenesisState: () => (/* binding */ parseGethGenesisState)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n/**\n * Parses the geth genesis state into Blockchain {@link GenesisState}\n * @param json representing the `alloc` key in a Geth genesis file\n */ function parseGethGenesisState(json) {\n    const state = {};\n    for (const address of Object.keys(json.alloc)){\n        let { balance, code, storage, nonce } = json.alloc[address];\n        // create a map with lowercase for easy lookups\n        const prefixedAddress = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(address.toLowerCase());\n        balance = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(balance) ? balance : (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bigIntToHex)(BigInt(balance));\n        code = code !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(code) : undefined;\n        storage = storage !== undefined ? Object.entries(storage) : undefined;\n        nonce = nonce !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(nonce) : undefined;\n        state[prefixedAddress] = [\n            balance,\n            code,\n            storage,\n            nonce\n        ];\n    }\n    return state;\n} //# sourceMappingURL=genesis.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9nZW5lc2lzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1RDtBQUNYO0FBQzVDOzs7Q0FHQyxHQUNNLFNBQVNHLHNCQUFzQkMsSUFBSTtJQUN0QyxNQUFNQyxRQUFRLENBQUM7SUFDZixLQUFLLE1BQU1DLFdBQVdDLE9BQU9DLElBQUksQ0FBQ0osS0FBS0ssS0FBSyxFQUFHO1FBQzNDLElBQUksRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsS0FBSyxFQUFFLEdBQUdULEtBQUtLLEtBQUssQ0FBQ0gsUUFBUTtRQUMzRCwrQ0FBK0M7UUFDL0MsTUFBTVEsa0JBQWtCZCx1REFBWUEsQ0FBQ00sUUFBUVMsV0FBVztRQUN4REwsVUFBVVIseURBQVdBLENBQUNRLFdBQVdBLFVBQVVULHNEQUFXQSxDQUFDZSxPQUFPTjtRQUM5REMsT0FBT0EsU0FBU00sWUFBWWpCLHVEQUFZQSxDQUFDVyxRQUFRTTtRQUNqREwsVUFBVUEsWUFBWUssWUFBWVYsT0FBT1csT0FBTyxDQUFDTixXQUFXSztRQUM1REosUUFBUUEsVUFBVUksWUFBWWpCLHVEQUFZQSxDQUFDYSxTQUFTSTtRQUNwRFosS0FBSyxDQUFDUyxnQkFBZ0IsR0FBRztZQUFDSjtZQUFTQztZQUFNQztZQUFTQztTQUFNO0lBQzVEO0lBQ0EsT0FBT1I7QUFDWCxFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3FvZ25pdGEvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9nZW5lc2lzLmpzP2IwOTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkSGV4UHJlZml4LCBiaWdJbnRUb0hleCB9IGZyb20gJy4vYnl0ZXMuanMnO1xuaW1wb3J0IHsgaXNIZXhTdHJpbmcgfSBmcm9tICcuL2ludGVybmFsLmpzJztcbi8qKlxuICogUGFyc2VzIHRoZSBnZXRoIGdlbmVzaXMgc3RhdGUgaW50byBCbG9ja2NoYWluIHtAbGluayBHZW5lc2lzU3RhdGV9XG4gKiBAcGFyYW0ganNvbiByZXByZXNlbnRpbmcgdGhlIGBhbGxvY2Aga2V5IGluIGEgR2V0aCBnZW5lc2lzIGZpbGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR2V0aEdlbmVzaXNTdGF0ZShqc29uKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGFkZHJlc3Mgb2YgT2JqZWN0LmtleXMoanNvbi5hbGxvYykpIHtcbiAgICAgICAgbGV0IHsgYmFsYW5jZSwgY29kZSwgc3RvcmFnZSwgbm9uY2UgfSA9IGpzb24uYWxsb2NbYWRkcmVzc107XG4gICAgICAgIC8vIGNyZWF0ZSBhIG1hcCB3aXRoIGxvd2VyY2FzZSBmb3IgZWFzeSBsb29rdXBzXG4gICAgICAgIGNvbnN0IHByZWZpeGVkQWRkcmVzcyA9IGFkZEhleFByZWZpeChhZGRyZXNzLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICBiYWxhbmNlID0gaXNIZXhTdHJpbmcoYmFsYW5jZSkgPyBiYWxhbmNlIDogYmlnSW50VG9IZXgoQmlnSW50KGJhbGFuY2UpKTtcbiAgICAgICAgY29kZSA9IGNvZGUgIT09IHVuZGVmaW5lZCA/IGFkZEhleFByZWZpeChjb2RlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgc3RvcmFnZSA9IHN0b3JhZ2UgIT09IHVuZGVmaW5lZCA/IE9iamVjdC5lbnRyaWVzKHN0b3JhZ2UpIDogdW5kZWZpbmVkO1xuICAgICAgICBub25jZSA9IG5vbmNlICE9PSB1bmRlZmluZWQgPyBhZGRIZXhQcmVmaXgobm9uY2UpIDogdW5kZWZpbmVkO1xuICAgICAgICBzdGF0ZVtwcmVmaXhlZEFkZHJlc3NdID0gW2JhbGFuY2UsIGNvZGUsIHN0b3JhZ2UsIG5vbmNlXTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VuZXNpcy5qcy5tYXAiXSwibmFtZXMiOlsiYWRkSGV4UHJlZml4IiwiYmlnSW50VG9IZXgiLCJpc0hleFN0cmluZyIsInBhcnNlR2V0aEdlbmVzaXNTdGF0ZSIsImpzb24iLCJzdGF0ZSIsImFkZHJlc3MiLCJPYmplY3QiLCJrZXlzIiwiYWxsb2MiLCJiYWxhbmNlIiwiY29kZSIsInN0b3JhZ2UiLCJub25jZSIsInByZWZpeGVkQWRkcmVzcyIsInRvTG93ZXJDYXNlIiwiQmlnSW50IiwidW5kZWZpbmVkIiwiZW50cmllcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/genesis.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/helpers.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/helpers.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertIsArray: () => (/* binding */ assertIsArray),\n/* harmony export */   assertIsBytes: () => (/* binding */ assertIsBytes),\n/* harmony export */   assertIsHexString: () => (/* binding */ assertIsHexString),\n/* harmony export */   assertIsString: () => (/* binding */ assertIsString)\n/* harmony export */ });\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */ const assertIsHexString = function(input) {\n    if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(input)) {\n        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */ const assertIsBytes = function(input) {\n    if (!(input instanceof Uint8Array)) {\n        const msg = `This method only supports Uint8Array but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */ const assertIsArray = function(input) {\n    if (!Array.isArray(input)) {\n        const msg = `This method only supports number arrays but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */ const assertIsString = function(input) {\n    if (typeof input !== \"string\") {\n        const msg = `This method only supports strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n}; //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTRDO0FBQzVDOzs7Q0FHQyxHQUNNLE1BQU1DLG9CQUFvQixTQUFVQyxLQUFLO0lBQzVDLElBQUksQ0FBQ0YseURBQVdBLENBQUNFLFFBQVE7UUFDckIsTUFBTUMsTUFBTSxDQUFDLGlFQUFpRSxFQUFFRCxNQUFNLENBQUM7UUFDdkYsTUFBTSxJQUFJRSxNQUFNRDtJQUNwQjtBQUNKLEVBQUU7QUFDRjs7O0NBR0MsR0FDTSxNQUFNRSxnQkFBZ0IsU0FBVUgsS0FBSztJQUN4QyxJQUFJLENBQUVBLENBQUFBLGlCQUFpQkksVUFBUyxHQUFJO1FBQ2hDLE1BQU1ILE1BQU0sQ0FBQyxvREFBb0QsRUFBRUQsTUFBTSxDQUFDO1FBQzFFLE1BQU0sSUFBSUUsTUFBTUQ7SUFDcEI7QUFDSixFQUFFO0FBQ0Y7OztDQUdDLEdBQ00sTUFBTUksZ0JBQWdCLFNBQVVMLEtBQUs7SUFDeEMsSUFBSSxDQUFDTSxNQUFNQyxPQUFPLENBQUNQLFFBQVE7UUFDdkIsTUFBTUMsTUFBTSxDQUFDLHVEQUF1RCxFQUFFRCxNQUFNLENBQUM7UUFDN0UsTUFBTSxJQUFJRSxNQUFNRDtJQUNwQjtBQUNKLEVBQUU7QUFDRjs7O0NBR0MsR0FDTSxNQUFNTyxpQkFBaUIsU0FBVVIsS0FBSztJQUN6QyxJQUFJLE9BQU9BLFVBQVUsVUFBVTtRQUMzQixNQUFNQyxNQUFNLENBQUMsaURBQWlELEVBQUVELE1BQU0sQ0FBQztRQUN2RSxNQUFNLElBQUlFLE1BQU1EO0lBQ3BCO0FBQ0osRUFBRSxDQUNGLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3FvZ25pdGEvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9oZWxwZXJzLmpzP2I2OTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNIZXhTdHJpbmcgfSBmcm9tICcuL2ludGVybmFsLmpzJztcbi8qKlxuICogVGhyb3dzIGlmIGEgc3RyaW5nIGlzIG5vdCBoZXggcHJlZml4ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCBzdHJpbmcgdG8gY2hlY2sgaGV4IHByZWZpeCBvZlxuICovXG5leHBvcnQgY29uc3QgYXNzZXJ0SXNIZXhTdHJpbmcgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoIWlzSGV4U3RyaW5nKGlucHV0KSkge1xuICAgICAgICBjb25zdCBtc2cgPSBgVGhpcyBtZXRob2Qgb25seSBzdXBwb3J0cyAweC1wcmVmaXhlZCBoZXggc3RyaW5ncyBidXQgaW5wdXQgd2FzOiAke2lucHV0fWA7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn07XG4vKipcbiAqIFRocm93cyBpZiBpbnB1dCBpcyBub3QgYSBidWZmZXJcbiAqIEBwYXJhbSB7QnVmZmVyfSBpbnB1dCB2YWx1ZSB0byBjaGVja1xuICovXG5leHBvcnQgY29uc3QgYXNzZXJ0SXNCeXRlcyA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmICghKGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYFRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgVWludDhBcnJheSBidXQgaW5wdXQgd2FzOiAke2lucHV0fWA7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn07XG4vKipcbiAqIFRocm93cyBpZiBpbnB1dCBpcyBub3QgYW4gYXJyYXlcbiAqIEBwYXJhbSB7bnVtYmVyW119IGlucHV0IHZhbHVlIHRvIGNoZWNrXG4gKi9cbmV4cG9ydCBjb25zdCBhc3NlcnRJc0FycmF5ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgICBjb25zdCBtc2cgPSBgVGhpcyBtZXRob2Qgb25seSBzdXBwb3J0cyBudW1iZXIgYXJyYXlzIGJ1dCBpbnB1dCB3YXM6ICR7aW5wdXR9YDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufTtcbi8qKlxuICogVGhyb3dzIGlmIGlucHV0IGlzIG5vdCBhIHN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IHZhbHVlIHRvIGNoZWNrXG4gKi9cbmV4cG9ydCBjb25zdCBhc3NlcnRJc1N0cmluZyA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGBUaGlzIG1ldGhvZCBvbmx5IHN1cHBvcnRzIHN0cmluZ3MgYnV0IGlucHV0IHdhczogJHtpbnB1dH1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiXSwibmFtZXMiOlsiaXNIZXhTdHJpbmciLCJhc3NlcnRJc0hleFN0cmluZyIsImlucHV0IiwibXNnIiwiRXJyb3IiLCJhc3NlcnRJc0J5dGVzIiwiVWludDhBcnJheSIsImFzc2VydElzQXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJhc3NlcnRJc1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.Account),\n/* harmony export */   Address: () => (/* reexport safe */ _address_js__WEBPACK_IMPORTED_MODULE_3__.Address),\n/* harmony export */   AsyncEventEmitter: () => (/* reexport safe */ _asyncEventEmitter_js__WEBPACK_IMPORTED_MODULE_9__.AsyncEventEmitter),\n/* harmony export */   BIGINT_0: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0),\n/* harmony export */   BIGINT_1: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_1),\n/* harmony export */   BIGINT_100: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_100),\n/* harmony export */   BIGINT_128: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_128),\n/* harmony export */   BIGINT_160: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_160),\n/* harmony export */   BIGINT_2: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2),\n/* harmony export */   BIGINT_224: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_224),\n/* harmony export */   BIGINT_255: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_255),\n/* harmony export */   BIGINT_256: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_256),\n/* harmony export */   BIGINT_27: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_27),\n/* harmony export */   BIGINT_28: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_28),\n/* harmony export */   BIGINT_2EXP160: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP160),\n/* harmony export */   BIGINT_2EXP224: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP224),\n/* harmony export */   BIGINT_2EXP256: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP256),\n/* harmony export */   BIGINT_2EXP96: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP96),\n/* harmony export */   BIGINT_3: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_3),\n/* harmony export */   BIGINT_31: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_31),\n/* harmony export */   BIGINT_32: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_32),\n/* harmony export */   BIGINT_64: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_64),\n/* harmony export */   BIGINT_7: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_7),\n/* harmony export */   BIGINT_8: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_8),\n/* harmony export */   BIGINT_96: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_96),\n/* harmony export */   BIGINT_NEG1: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_NEG1),\n/* harmony export */   CLRequest: () => (/* reexport safe */ _requests_js__WEBPACK_IMPORTED_MODULE_17__.CLRequest),\n/* harmony export */   CLRequestFactory: () => (/* reexport safe */ _requests_js__WEBPACK_IMPORTED_MODULE_17__.CLRequestFactory),\n/* harmony export */   CLRequestType: () => (/* reexport safe */ _requests_js__WEBPACK_IMPORTED_MODULE_17__.CLRequestType),\n/* harmony export */   ConsolidationRequest: () => (/* reexport safe */ _requests_js__WEBPACK_IMPORTED_MODULE_17__.ConsolidationRequest),\n/* harmony export */   DepositRequest: () => (/* reexport safe */ _requests_js__WEBPACK_IMPORTED_MODULE_17__.DepositRequest),\n/* harmony export */   GWEI_TO_WEI: () => (/* reexport safe */ _units_js__WEBPACK_IMPORTED_MODULE_1__.GWEI_TO_WEI),\n/* harmony export */   KECCAK256_NULL: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_NULL),\n/* harmony export */   KECCAK256_NULL_S: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_NULL_S),\n/* harmony export */   KECCAK256_RLP: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP),\n/* harmony export */   KECCAK256_RLP_ARRAY: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP_ARRAY),\n/* harmony export */   KECCAK256_RLP_ARRAY_S: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP_ARRAY_S),\n/* harmony export */   KECCAK256_RLP_S: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP_S),\n/* harmony export */   KeyEncoding: () => (/* reexport safe */ _db_js__WEBPACK_IMPORTED_MODULE_4__.KeyEncoding),\n/* harmony export */   Lock: () => (/* reexport safe */ _lock_js__WEBPACK_IMPORTED_MODULE_14__.Lock),\n/* harmony export */   MAX_INTEGER: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_INTEGER),\n/* harmony export */   MAX_INTEGER_BIGINT: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_INTEGER_BIGINT),\n/* harmony export */   MAX_UINT64: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_UINT64),\n/* harmony export */   MAX_WITHDRAWALS_PER_PAYLOAD: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_WITHDRAWALS_PER_PAYLOAD),\n/* harmony export */   MapDB: () => (/* reexport safe */ _mapDB_js__WEBPACK_IMPORTED_MODULE_15__.MapDB),\n/* harmony export */   RIPEMD160_ADDRESS_STRING: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.RIPEMD160_ADDRESS_STRING),\n/* harmony export */   RLP_EMPTY_STRING: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.RLP_EMPTY_STRING),\n/* harmony export */   SECP256K1_ORDER: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.SECP256K1_ORDER),\n/* harmony export */   SECP256K1_ORDER_DIV_2: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.SECP256K1_ORDER_DIV_2),\n/* harmony export */   TWO_POW256: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.TWO_POW256),\n/* harmony export */   TypeOutput: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_8__.TypeOutput),\n/* harmony export */   VERKLE_BALANCE_LEAF_KEY: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_BALANCE_LEAF_KEY),\n/* harmony export */   VERKLE_CODE_HASH_LEAF_KEY: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_CODE_HASH_LEAF_KEY),\n/* harmony export */   VERKLE_CODE_OFFSET: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_CODE_OFFSET),\n/* harmony export */   VERKLE_CODE_SIZE_LEAF_KEY: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_CODE_SIZE_LEAF_KEY),\n/* harmony export */   VERKLE_HEADER_STORAGE_OFFSET: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_HEADER_STORAGE_OFFSET),\n/* harmony export */   VERKLE_MAIN_STORAGE_OFFSET: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_MAIN_STORAGE_OFFSET),\n/* harmony export */   VERKLE_NODE_WIDTH: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_NODE_WIDTH),\n/* harmony export */   VERKLE_NONCE_LEAF_KEY: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_NONCE_LEAF_KEY),\n/* harmony export */   VERKLE_VERSION_LEAF_KEY: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_VERSION_LEAF_KEY),\n/* harmony export */   ValueEncoding: () => (/* reexport safe */ _db_js__WEBPACK_IMPORTED_MODULE_4__.ValueEncoding),\n/* harmony export */   VerkleLeafType: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VerkleLeafType),\n/* harmony export */   Withdrawal: () => (/* reexport safe */ _withdrawal_js__WEBPACK_IMPORTED_MODULE_5__.Withdrawal),\n/* harmony export */   WithdrawalRequest: () => (/* reexport safe */ _requests_js__WEBPACK_IMPORTED_MODULE_17__.WithdrawalRequest),\n/* harmony export */   accountBodyFromSlim: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.accountBodyFromSlim),\n/* harmony export */   accountBodyToRLP: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.accountBodyToRLP),\n/* harmony export */   accountBodyToSlim: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.accountBodyToSlim),\n/* harmony export */   addHexPrefix: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.addHexPrefix),\n/* harmony export */   arrayContainsArray: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.arrayContainsArray),\n/* harmony export */   bigInt64ToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigInt64ToBytes),\n/* harmony export */   bigIntMax: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntMax),\n/* harmony export */   bigIntMin: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntMin),\n/* harmony export */   bigIntToAddressBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToAddressBytes),\n/* harmony export */   bigIntToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToBytes),\n/* harmony export */   bigIntToHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToHex),\n/* harmony export */   bigIntToUnpaddedBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedBytes),\n/* harmony export */   blobsToCommitments: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.blobsToCommitments),\n/* harmony export */   blobsToProofs: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.blobsToProofs),\n/* harmony export */   bytesToBigInt: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToBigInt),\n/* harmony export */   bytesToBigInt64: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToBigInt64),\n/* harmony export */   bytesToHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToHex),\n/* harmony export */   bytesToInt: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToInt),\n/* harmony export */   bytesToInt32: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToInt32),\n/* harmony export */   bytesToUnprefixedHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToUnprefixedHex),\n/* harmony export */   bytesToUtf8: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToUtf8),\n/* harmony export */   calculateSigRecovery: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.calculateSigRecovery),\n/* harmony export */   chunkifyCode: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.chunkifyCode),\n/* harmony export */   commitmentsToVersionedHashes: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.commitmentsToVersionedHashes),\n/* harmony export */   compareBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.compareBytes),\n/* harmony export */   computeVersionedHash: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.computeVersionedHash),\n/* harmony export */   concatBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.concatBytes),\n/* harmony export */   ecrecover: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.ecrecover),\n/* harmony export */   ecsign: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.ecsign),\n/* harmony export */   equalsBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.equalsBytes),\n/* harmony export */   fetchFromProvider: () => (/* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_16__.fetchFromProvider),\n/* harmony export */   formatBigDecimal: () => (/* reexport safe */ _units_js__WEBPACK_IMPORTED_MODULE_1__.formatBigDecimal),\n/* harmony export */   fromAscii: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.fromAscii),\n/* harmony export */   fromRpcSig: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.fromRpcSig),\n/* harmony export */   fromSigned: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.fromSigned),\n/* harmony export */   fromUtf8: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.fromUtf8),\n/* harmony export */   generateAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.generateAddress),\n/* harmony export */   generateAddress2: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.generateAddress2),\n/* harmony export */   getBinarySize: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.getBinarySize),\n/* harmony export */   getBlobs: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.getBlobs),\n/* harmony export */   getKeys: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.getKeys),\n/* harmony export */   getProvider: () => (/* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_16__.getProvider),\n/* harmony export */   getVerkleKey: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.getVerkleKey),\n/* harmony export */   getVerkleStem: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.getVerkleStem),\n/* harmony export */   getVerkleTreeIndexesForStorageSlot: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.getVerkleTreeIndexesForStorageSlot),\n/* harmony export */   getVerkleTreeIndicesForCodeChunk: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.getVerkleTreeIndicesForCodeChunk),\n/* harmony export */   getVerkleTreeKeyForCodeChunk: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.getVerkleTreeKeyForCodeChunk),\n/* harmony export */   getVerkleTreeKeyForStorageSlot: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.getVerkleTreeKeyForStorageSlot),\n/* harmony export */   hashPersonalMessage: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.hashPersonalMessage),\n/* harmony export */   hexToBigInt: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.hexToBigInt),\n/* harmony export */   hexToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.hexToBytes),\n/* harmony export */   importPublic: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.importPublic),\n/* harmony export */   initKZG: () => (/* reexport safe */ _kzg_js__WEBPACK_IMPORTED_MODULE_13__.initKZG),\n/* harmony export */   int32ToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.int32ToBytes),\n/* harmony export */   intToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.intToBytes),\n/* harmony export */   intToHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.intToHex),\n/* harmony export */   intToUnpaddedBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.intToUnpaddedBytes),\n/* harmony export */   isHexString: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.isHexString),\n/* harmony export */   isNestedUint8Array: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_8__.isNestedUint8Array),\n/* harmony export */   isValidAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidAddress),\n/* harmony export */   isValidChecksumAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidChecksumAddress),\n/* harmony export */   isValidPrivate: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidPrivate),\n/* harmony export */   isValidPublic: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidPublic),\n/* harmony export */   isValidSignature: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.isValidSignature),\n/* harmony export */   isZeroAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isZeroAddress),\n/* harmony export */   padToEven: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.padToEven),\n/* harmony export */   parseGethGenesisState: () => (/* reexport safe */ _genesis_js__WEBPACK_IMPORTED_MODULE_11__.parseGethGenesisState),\n/* harmony export */   privateToAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.privateToAddress),\n/* harmony export */   privateToPublic: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.privateToPublic),\n/* harmony export */   pubToAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.pubToAddress),\n/* harmony export */   publicToAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.publicToAddress),\n/* harmony export */   randomBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.randomBytes),\n/* harmony export */   setLengthLeft: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.setLengthLeft),\n/* harmony export */   setLengthRight: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.setLengthRight),\n/* harmony export */   short: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.short),\n/* harmony export */   stripHexPrefix: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.stripHexPrefix),\n/* harmony export */   toAscii: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.toAscii),\n/* harmony export */   toBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.toBytes),\n/* harmony export */   toChecksumAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.toChecksumAddress),\n/* harmony export */   toCompactSig: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.toCompactSig),\n/* harmony export */   toRpcSig: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.toRpcSig),\n/* harmony export */   toType: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_8__.toType),\n/* harmony export */   toUnsigned: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.toUnsigned),\n/* harmony export */   unpadArray: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unpadArray),\n/* harmony export */   unpadBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unpadBytes),\n/* harmony export */   unpadHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unpadHex),\n/* harmony export */   unprefixedHexToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unprefixedHexToBytes),\n/* harmony export */   utf8ToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.utf8ToBytes),\n/* harmony export */   validateNoLeadingZeroes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.validateNoLeadingZeroes),\n/* harmony export */   verifyVerkleProof: () => (/* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.verifyVerkleProof),\n/* harmony export */   zeroAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.zeroAddress),\n/* harmony export */   zeros: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.zeros)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _units_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./units.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/units.js\");\n/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./account.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/account.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./address.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/address.js\");\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./db.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/db.js\");\n/* harmony import */ var _withdrawal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./withdrawal.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/withdrawal.js\");\n/* harmony import */ var _signature_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./signature.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/signature.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/types.js\");\n/* harmony import */ var _asyncEventEmitter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./asyncEventEmitter.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js\");\n/* harmony import */ var _blobs_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./blobs.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/blobs.js\");\n/* harmony import */ var _genesis_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./genesis.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/genesis.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/internal.js\");\n/* harmony import */ var _kzg_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./kzg.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/kzg.js\");\n/* harmony import */ var _lock_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lock.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/lock.js\");\n/* harmony import */ var _mapDB_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./mapDB.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/mapDB.js\");\n/* harmony import */ var _provider_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./provider.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/provider.js\");\n/* harmony import */ var _requests_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./requests.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/requests.js\");\n/* harmony import */ var _verkle_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./verkle.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/verkle.js\");\n/**\n * Constants\n */ \n/**\n * Units helpers\n */ \n/**\n * Account class and helper functions\n */ \n/**\n * Address type\n */ \n/**\n * DB type\n */ \n/**\n * Withdrawal type\n */ \n/**\n * ECDSA signature\n */ \n/**\n * Utilities for manipulating bytes, Uint8Arrays, etc.\n */ \n/**\n * Helpful TypeScript types\n */ \n/**\n * Export ethjs-util methods\n */ \n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0NBRUMsR0FDOEI7QUFDL0I7O0NBRUMsR0FDMEI7QUFDM0I7O0NBRUMsR0FDNEI7QUFDN0I7O0NBRUMsR0FDNEI7QUFDN0I7O0NBRUMsR0FDdUI7QUFDeEI7O0NBRUMsR0FDK0I7QUFDaEM7O0NBRUMsR0FDOEI7QUFDL0I7O0NBRUMsR0FDMEI7QUFDM0I7O0NBRUMsR0FDMEI7QUFDM0I7O0NBRUMsR0FDc0M7QUFDWjtBQUNFO0FBQ3FIO0FBQ3pIO0FBQ0M7QUFDQztBQUNHO0FBQ0E7QUFDRixDQUM1QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xb2duaXRhLy4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vaW5kZXguanM/MDExNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnN0YW50c1xuICovXG5leHBvcnQgKiBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG4vKipcbiAqIFVuaXRzIGhlbHBlcnNcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi91bml0cy5qcyc7XG4vKipcbiAqIEFjY291bnQgY2xhc3MgYW5kIGhlbHBlciBmdW5jdGlvbnNcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9hY2NvdW50LmpzJztcbi8qKlxuICogQWRkcmVzcyB0eXBlXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vYWRkcmVzcy5qcyc7XG4vKipcbiAqIERCIHR5cGVcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9kYi5qcyc7XG4vKipcbiAqIFdpdGhkcmF3YWwgdHlwZVxuICovXG5leHBvcnQgKiBmcm9tICcuL3dpdGhkcmF3YWwuanMnO1xuLyoqXG4gKiBFQ0RTQSBzaWduYXR1cmVcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9zaWduYXR1cmUuanMnO1xuLyoqXG4gKiBVdGlsaXRpZXMgZm9yIG1hbmlwdWxhdGluZyBieXRlcywgVWludDhBcnJheXMsIGV0Yy5cbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9ieXRlcy5qcyc7XG4vKipcbiAqIEhlbHBmdWwgVHlwZVNjcmlwdCB0eXBlc1xuICovXG5leHBvcnQgKiBmcm9tICcuL3R5cGVzLmpzJztcbi8qKlxuICogRXhwb3J0IGV0aGpzLXV0aWwgbWV0aG9kc1xuICovXG5leHBvcnQgKiBmcm9tICcuL2FzeW5jRXZlbnRFbWl0dGVyLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vYmxvYnMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9nZW5lc2lzLmpzJztcbmV4cG9ydCB7IGFycmF5Q29udGFpbnNBcnJheSwgZnJvbUFzY2lpLCBmcm9tVXRmOCwgZ2V0QmluYXJ5U2l6ZSwgZ2V0S2V5cywgaXNIZXhTdHJpbmcsIHBhZFRvRXZlbiwgc3RyaXBIZXhQcmVmaXgsIHRvQXNjaWksIH0gZnJvbSAnLi9pbnRlcm5hbC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2t6Zy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xvY2suanMnO1xuZXhwb3J0ICogZnJvbSAnLi9tYXBEQi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3Byb3ZpZGVyLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vcmVxdWVzdHMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi92ZXJrbGUuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImFycmF5Q29udGFpbnNBcnJheSIsImZyb21Bc2NpaSIsImZyb21VdGY4IiwiZ2V0QmluYXJ5U2l6ZSIsImdldEtleXMiLCJpc0hleFN0cmluZyIsInBhZFRvRXZlbiIsInN0cmlwSGV4UHJlZml4IiwidG9Bc2NpaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/internal.js":
/*!************************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/internal.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayContainsArray: () => (/* binding */ arrayContainsArray),\n/* harmony export */   fromAscii: () => (/* binding */ fromAscii),\n/* harmony export */   fromUtf8: () => (/* binding */ fromUtf8),\n/* harmony export */   getBinarySize: () => (/* binding */ getBinarySize),\n/* harmony export */   getKeys: () => (/* binding */ getKeys),\n/* harmony export */   isHexString: () => (/* binding */ isHexString),\n/* harmony export */   padToEven: () => (/* binding */ padToEven),\n/* harmony export */   stripHexPrefix: () => (/* binding */ stripHexPrefix),\n/* harmony export */   toAscii: () => (/* binding */ toAscii)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/*\nThe MIT License\n\nCopyright (c) 2016 Nick Dodson. nickdodson.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE\n */ \n/**\n * Returns a boolean on whether or not the the input starts with '0x' and matches the optional length\n * @param {string} value the string input value\n * @param {number|undefined} length the optional length of the hex string in bytes\n * @returns {boolean} Whether or not the string is a valid PrefixedHexString matching the optional length\n */ function isHexString(value, length) {\n    if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;\n    if (typeof length !== \"undefined\" && length > 0 && value.length !== 2 + 2 * length) return false;\n    return true;\n}\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */ const stripHexPrefix = (str)=>{\n    if (typeof str !== \"string\") throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n    return isHexString(str) ? str.slice(2) : str;\n};\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */ function padToEven(value) {\n    let a = value;\n    if (typeof a !== \"string\") {\n        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n    }\n    if (a.length % 2) a = `0${a}`;\n    return a;\n}\n/**\n * Get the binary size of a string\n * @param str\n * @returns the number of bytes contained within the string\n */ function getBinarySize(str) {\n    if (typeof str !== \"string\") {\n        throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`);\n    }\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(str).byteLength;\n}\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param superset\n * @param subset\n *\n */ function arrayContainsArray(superset, subset, some) {\n    if (Array.isArray(superset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`);\n    }\n    if (Array.isArray(subset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`);\n    }\n    return subset[some === true ? \"some\" : \"every\"]((value)=>superset.indexOf(value) >= 0);\n}\n/**\n * Should be called to get ascii from its hex representation\n *\n * @param string in hex\n * @returns ascii string representation of hex value\n */ function toAscii(hex) {\n    let str = \"\";\n    let i = 0;\n    const l = hex.length;\n    if (hex.substring(0, 2) === \"0x\") i = 2;\n    for(; i < l; i += 2){\n        const code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n    return str;\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string.\n * Strips leading and trailing 0's.\n *\n * @param string\n * @param optional padding\n * @returns hex representation of input string\n */ function fromUtf8(stringValue) {\n    const str = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(stringValue);\n    return `0x${padToEven((0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(str)).replace(/^0+|0+$/g, \"\")}`;\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @param  string\n * @param  optional padding\n * @returns  hex representation of input string\n */ function fromAscii(stringValue) {\n    let hex = \"\";\n    for(let i = 0; i < stringValue.length; i++){\n        const code = stringValue.charCodeAt(i);\n        const n = code.toString(16);\n        hex += n.length < 2 ? `0${n}` : n;\n    }\n    return `0x${hex}`;\n}\n/**\n * Returns the keys from an array of objects.\n * @example\n * ```js\n * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']\n *````\n * @param  params\n * @param  key\n * @param  allowEmpty\n * @returns output just a simple array of output keys\n */ function getKeys(params, key, allowEmpty) {\n    if (!Array.isArray(params)) {\n        throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`);\n    }\n    if (typeof key !== \"string\") {\n        throw new Error(`[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`);\n    }\n    const result = [];\n    for(let i = 0; i < params.length; i++){\n        let value = params[i][key];\n        if (allowEmpty === true && !value) {\n            value = \"\";\n        } else if (typeof value !== \"string\") {\n            throw new Error(`invalid abi - expected type 'string', received ${typeof value}`);\n        }\n        result.push(value);\n    }\n    return result;\n} //# sourceMappingURL=internal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/internal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/kzg.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/kzg.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initKZG: () => (/* binding */ initKZG)\n/* harmony export */ });\n/**\n * @deprecated This initialization method is deprecated since trusted setup loading is done directly in the reference KZG library\n * initialization or should othewise be assured independently before KZG libary usage.\n *\n * @param kzgLib a KZG implementation (defaults to c-kzg)\n * @param a dictionary of trusted setup options\n */ function initKZG(kzg, _trustedSetupPath) {\n    kzg.loadTrustedSetup();\n} //# sourceMappingURL=kzg.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9remcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Q0FNQyxHQUNNLFNBQVNBLFFBQVFDLEdBQUcsRUFBRUMsaUJBQWlCO0lBQzFDRCxJQUFJRSxnQkFBZ0I7QUFDeEIsRUFDQSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xb2duaXRhLy4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20va3pnLmpzPzM0Y2YiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGluaXRpYWxpemF0aW9uIG1ldGhvZCBpcyBkZXByZWNhdGVkIHNpbmNlIHRydXN0ZWQgc2V0dXAgbG9hZGluZyBpcyBkb25lIGRpcmVjdGx5IGluIHRoZSByZWZlcmVuY2UgS1pHIGxpYnJhcnlcbiAqIGluaXRpYWxpemF0aW9uIG9yIHNob3VsZCBvdGhld2lzZSBiZSBhc3N1cmVkIGluZGVwZW5kZW50bHkgYmVmb3JlIEtaRyBsaWJhcnkgdXNhZ2UuXG4gKlxuICogQHBhcmFtIGt6Z0xpYiBhIEtaRyBpbXBsZW1lbnRhdGlvbiAoZGVmYXVsdHMgdG8gYy1remcpXG4gKiBAcGFyYW0gYSBkaWN0aW9uYXJ5IG9mIHRydXN0ZWQgc2V0dXAgb3B0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdEtaRyhremcsIF90cnVzdGVkU2V0dXBQYXRoKSB7XG4gICAga3pnLmxvYWRUcnVzdGVkU2V0dXAoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWt6Zy5qcy5tYXAiXSwibmFtZXMiOlsiaW5pdEtaRyIsImt6ZyIsIl90cnVzdGVkU2V0dXBQYXRoIiwibG9hZFRydXN0ZWRTZXR1cCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/kzg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/lock.js":
/*!********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/lock.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lock: () => (/* binding */ Lock)\n/* harmony export */ });\n// Based on https://github.com/jsoendermann/semaphore-async-await/blob/master/src/Semaphore.ts\nclass Lock {\n    constructor(){\n        this.permits = 1;\n        this.promiseResolverQueue = [];\n    }\n    /**\n     * Returns a promise used to wait for a permit to become available. This method should be awaited on.\n     * @returns  A promise that gets resolved when execution is allowed to proceed.\n     */ async acquire() {\n        if (this.permits > 0) {\n            this.permits -= 1;\n            return Promise.resolve(true);\n        }\n        // If there is no permit available, we return a promise that resolves once the semaphore gets\n        // signaled enough times that permits is equal to one.\n        return new Promise((resolver)=>this.promiseResolverQueue.push(resolver));\n    }\n    /**\n     * Increases the number of permits by one. If there are other functions waiting, one of them will\n     * continue to execute in a future iteration of the event loop.\n     */ release() {\n        this.permits += 1;\n        if (this.permits > 1 && this.promiseResolverQueue.length > 0) {\n            // eslint-disable-next-line no-console\n            console.warn(\"Lock.permits should never be > 0 when there is someone waiting.\");\n        } else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {\n            // If there is someone else waiting, immediately consume the permit that was released\n            // at the beginning of this function and let the waiting function resume.\n            this.permits -= 1;\n            const nextResolver = this.promiseResolverQueue.shift();\n            if (nextResolver) {\n                nextResolver(true);\n            }\n        }\n    }\n} //# sourceMappingURL=lock.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9sb2NrLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw4RkFBOEY7QUFDdkYsTUFBTUE7SUFDVEMsYUFBYztRQUNWLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1FBQ2YsSUFBSSxDQUFDQyxvQkFBb0IsR0FBRyxFQUFFO0lBQ2xDO0lBQ0E7OztLQUdDLEdBQ0QsTUFBTUMsVUFBVTtRQUNaLElBQUksSUFBSSxDQUFDRixPQUFPLEdBQUcsR0FBRztZQUNsQixJQUFJLENBQUNBLE9BQU8sSUFBSTtZQUNoQixPQUFPRyxRQUFRQyxPQUFPLENBQUM7UUFDM0I7UUFDQSw2RkFBNkY7UUFDN0Ysc0RBQXNEO1FBQ3RELE9BQU8sSUFBSUQsUUFBUSxDQUFDRSxXQUFhLElBQUksQ0FBQ0osb0JBQW9CLENBQUNLLElBQUksQ0FBQ0Q7SUFDcEU7SUFDQTs7O0tBR0MsR0FDREUsVUFBVTtRQUNOLElBQUksQ0FBQ1AsT0FBTyxJQUFJO1FBQ2hCLElBQUksSUFBSSxDQUFDQSxPQUFPLEdBQUcsS0FBSyxJQUFJLENBQUNDLG9CQUFvQixDQUFDTyxNQUFNLEdBQUcsR0FBRztZQUMxRCxzQ0FBc0M7WUFDdENDLFFBQVFDLElBQUksQ0FBQztRQUNqQixPQUNLLElBQUksSUFBSSxDQUFDVixPQUFPLEtBQUssS0FBSyxJQUFJLENBQUNDLG9CQUFvQixDQUFDTyxNQUFNLEdBQUcsR0FBRztZQUNqRSxxRkFBcUY7WUFDckYseUVBQXlFO1lBQ3pFLElBQUksQ0FBQ1IsT0FBTyxJQUFJO1lBQ2hCLE1BQU1XLGVBQWUsSUFBSSxDQUFDVixvQkFBb0IsQ0FBQ1csS0FBSztZQUNwRCxJQUFJRCxjQUFjO2dCQUNkQSxhQUFhO1lBQ2pCO1FBQ0o7SUFDSjtBQUNKLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcW9nbml0YS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2xvY2suanM/NWVkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vanNvZW5kZXJtYW5uL3NlbWFwaG9yZS1hc3luYy1hd2FpdC9ibG9iL21hc3Rlci9zcmMvU2VtYXBob3JlLnRzXG5leHBvcnQgY2xhc3MgTG9jayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucGVybWl0cyA9IDE7XG4gICAgICAgIHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHByb21pc2UgdXNlZCB0byB3YWl0IGZvciBhIHBlcm1pdCB0byBiZWNvbWUgYXZhaWxhYmxlLiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgYXdhaXRlZCBvbi5cbiAgICAgKiBAcmV0dXJucyAgQSBwcm9taXNlIHRoYXQgZ2V0cyByZXNvbHZlZCB3aGVuIGV4ZWN1dGlvbiBpcyBhbGxvd2VkIHRvIHByb2NlZWQuXG4gICAgICovXG4gICAgYXN5bmMgYWNxdWlyZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucGVybWl0cyA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucGVybWl0cyAtPSAxO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBwZXJtaXQgYXZhaWxhYmxlLCB3ZSByZXR1cm4gYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25jZSB0aGUgc2VtYXBob3JlIGdldHNcbiAgICAgICAgLy8gc2lnbmFsZWQgZW5vdWdoIHRpbWVzIHRoYXQgcGVybWl0cyBpcyBlcXVhbCB0byBvbmUuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZXIpID0+IHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUucHVzaChyZXNvbHZlcikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNyZWFzZXMgdGhlIG51bWJlciBvZiBwZXJtaXRzIGJ5IG9uZS4gSWYgdGhlcmUgYXJlIG90aGVyIGZ1bmN0aW9ucyB3YWl0aW5nLCBvbmUgb2YgdGhlbSB3aWxsXG4gICAgICogY29udGludWUgdG8gZXhlY3V0ZSBpbiBhIGZ1dHVyZSBpdGVyYXRpb24gb2YgdGhlIGV2ZW50IGxvb3AuXG4gICAgICovXG4gICAgcmVsZWFzZSgpIHtcbiAgICAgICAgdGhpcy5wZXJtaXRzICs9IDE7XG4gICAgICAgIGlmICh0aGlzLnBlcm1pdHMgPiAxICYmIHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignTG9jay5wZXJtaXRzIHNob3VsZCBuZXZlciBiZSA+IDAgd2hlbiB0aGVyZSBpcyBzb21lb25lIHdhaXRpbmcuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wZXJtaXRzID09PSAxICYmIHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgc29tZW9uZSBlbHNlIHdhaXRpbmcsIGltbWVkaWF0ZWx5IGNvbnN1bWUgdGhlIHBlcm1pdCB0aGF0IHdhcyByZWxlYXNlZFxuICAgICAgICAgICAgLy8gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGlzIGZ1bmN0aW9uIGFuZCBsZXQgdGhlIHdhaXRpbmcgZnVuY3Rpb24gcmVzdW1lLlxuICAgICAgICAgICAgdGhpcy5wZXJtaXRzIC09IDE7XG4gICAgICAgICAgICBjb25zdCBuZXh0UmVzb2x2ZXIgPSB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAobmV4dFJlc29sdmVyKSB7XG4gICAgICAgICAgICAgICAgbmV4dFJlc29sdmVyKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jay5qcy5tYXAiXSwibmFtZXMiOlsiTG9jayIsImNvbnN0cnVjdG9yIiwicGVybWl0cyIsInByb21pc2VSZXNvbHZlclF1ZXVlIiwiYWNxdWlyZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVzb2x2ZXIiLCJwdXNoIiwicmVsZWFzZSIsImxlbmd0aCIsImNvbnNvbGUiLCJ3YXJuIiwibmV4dFJlc29sdmVyIiwic2hpZnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/lock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/mapDB.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/mapDB.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapDB: () => (/* binding */ MapDB)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\nclass MapDB {\n    constructor(database){\n        this._database = database ?? new Map();\n    }\n    async get(key) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        return this._database.get(dbKey);\n    }\n    async put(key, val) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        this._database.set(dbKey, val);\n    }\n    async del(key) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        this._database.delete(dbKey);\n    }\n    async batch(opStack) {\n        for (const op of opStack){\n            if (op.type === \"del\") {\n                await this.del(op.key);\n            }\n            if (op.type === \"put\") {\n                await this.put(op.key, op.value);\n            }\n        }\n    }\n    /**\n     * Note that the returned shallow copy will share the underlying database with the original\n     *\n     * @returns DB\n     */ shallowCopy() {\n        return new MapDB(this._database);\n    }\n    open() {\n        return Promise.resolve();\n    }\n} //# sourceMappingURL=mapDB.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9tYXBEQi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRDtBQUMzQyxNQUFNQztJQUNUQyxZQUFZQyxRQUFRLENBQUU7UUFDbEIsSUFBSSxDQUFDQyxTQUFTLEdBQUdELFlBQVksSUFBSUU7SUFDckM7SUFDQSxNQUFNQyxJQUFJQyxHQUFHLEVBQUU7UUFDWCxNQUFNQyxRQUFRRCxlQUFlRSxhQUFhVCwrREFBb0JBLENBQUNPLE9BQU9BLElBQUlHLFFBQVE7UUFDbEYsT0FBTyxJQUFJLENBQUNOLFNBQVMsQ0FBQ0UsR0FBRyxDQUFDRTtJQUM5QjtJQUNBLE1BQU1HLElBQUlKLEdBQUcsRUFBRUssR0FBRyxFQUFFO1FBQ2hCLE1BQU1KLFFBQVFELGVBQWVFLGFBQWFULCtEQUFvQkEsQ0FBQ08sT0FBT0EsSUFBSUcsUUFBUTtRQUNsRixJQUFJLENBQUNOLFNBQVMsQ0FBQ1MsR0FBRyxDQUFDTCxPQUFPSTtJQUM5QjtJQUNBLE1BQU1FLElBQUlQLEdBQUcsRUFBRTtRQUNYLE1BQU1DLFFBQVFELGVBQWVFLGFBQWFULCtEQUFvQkEsQ0FBQ08sT0FBT0EsSUFBSUcsUUFBUTtRQUNsRixJQUFJLENBQUNOLFNBQVMsQ0FBQ1csTUFBTSxDQUFDUDtJQUMxQjtJQUNBLE1BQU1RLE1BQU1DLE9BQU8sRUFBRTtRQUNqQixLQUFLLE1BQU1DLE1BQU1ELFFBQVM7WUFDdEIsSUFBSUMsR0FBR0MsSUFBSSxLQUFLLE9BQU87Z0JBQ25CLE1BQU0sSUFBSSxDQUFDTCxHQUFHLENBQUNJLEdBQUdYLEdBQUc7WUFDekI7WUFDQSxJQUFJVyxHQUFHQyxJQUFJLEtBQUssT0FBTztnQkFDbkIsTUFBTSxJQUFJLENBQUNSLEdBQUcsQ0FBQ08sR0FBR1gsR0FBRyxFQUFFVyxHQUFHRSxLQUFLO1lBQ25DO1FBQ0o7SUFDSjtJQUNBOzs7O0tBSUMsR0FDREMsY0FBYztRQUNWLE9BQU8sSUFBSXBCLE1BQU0sSUFBSSxDQUFDRyxTQUFTO0lBQ25DO0lBQ0FrQixPQUFPO1FBQ0gsT0FBT0MsUUFBUUMsT0FBTztJQUMxQjtBQUNKLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcW9nbml0YS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL21hcERCLmpzPzgxYTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnl0ZXNUb1VucHJlZml4ZWRIZXggfSBmcm9tICcuL2J5dGVzLmpzJztcbmV4cG9ydCBjbGFzcyBNYXBEQiB7XG4gICAgY29uc3RydWN0b3IoZGF0YWJhc2UpIHtcbiAgICAgICAgdGhpcy5fZGF0YWJhc2UgPSBkYXRhYmFzZSA/PyBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGFzeW5jIGdldChrZXkpIHtcbiAgICAgICAgY29uc3QgZGJLZXkgPSBrZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gYnl0ZXNUb1VucHJlZml4ZWRIZXgoa2V5KSA6IGtleS50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YWJhc2UuZ2V0KGRiS2V5KTtcbiAgICB9XG4gICAgYXN5bmMgcHV0KGtleSwgdmFsKSB7XG4gICAgICAgIGNvbnN0IGRiS2V5ID0ga2V5IGluc3RhbmNlb2YgVWludDhBcnJheSA/IGJ5dGVzVG9VbnByZWZpeGVkSGV4KGtleSkgOiBrZXkudG9TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5fZGF0YWJhc2Uuc2V0KGRiS2V5LCB2YWwpO1xuICAgIH1cbiAgICBhc3luYyBkZWwoa2V5KSB7XG4gICAgICAgIGNvbnN0IGRiS2V5ID0ga2V5IGluc3RhbmNlb2YgVWludDhBcnJheSA/IGJ5dGVzVG9VbnByZWZpeGVkSGV4KGtleSkgOiBrZXkudG9TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5fZGF0YWJhc2UuZGVsZXRlKGRiS2V5KTtcbiAgICB9XG4gICAgYXN5bmMgYmF0Y2gob3BTdGFjaykge1xuICAgICAgICBmb3IgKGNvbnN0IG9wIG9mIG9wU3RhY2spIHtcbiAgICAgICAgICAgIGlmIChvcC50eXBlID09PSAnZGVsJykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZGVsKG9wLmtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3AudHlwZSA9PT0gJ3B1dCcpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnB1dChvcC5rZXksIG9wLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3RlIHRoYXQgdGhlIHJldHVybmVkIHNoYWxsb3cgY29weSB3aWxsIHNoYXJlIHRoZSB1bmRlcmx5aW5nIGRhdGFiYXNlIHdpdGggdGhlIG9yaWdpbmFsXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBEQlxuICAgICAqL1xuICAgIHNoYWxsb3dDb3B5KCkge1xuICAgICAgICByZXR1cm4gbmV3IE1hcERCKHRoaXMuX2RhdGFiYXNlKTtcbiAgICB9XG4gICAgb3BlbigpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcERCLmpzLm1hcCJdLCJuYW1lcyI6WyJieXRlc1RvVW5wcmVmaXhlZEhleCIsIk1hcERCIiwiY29uc3RydWN0b3IiLCJkYXRhYmFzZSIsIl9kYXRhYmFzZSIsIk1hcCIsImdldCIsImtleSIsImRiS2V5IiwiVWludDhBcnJheSIsInRvU3RyaW5nIiwicHV0IiwidmFsIiwic2V0IiwiZGVsIiwiZGVsZXRlIiwiYmF0Y2giLCJvcFN0YWNrIiwib3AiLCJ0eXBlIiwidmFsdWUiLCJzaGFsbG93Q29weSIsIm9wZW4iLCJQcm9taXNlIiwicmVzb2x2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/mapDB.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/provider.js":
/*!************************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/provider.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchFromProvider: () => (/* binding */ fetchFromProvider),\n/* harmony export */   getProvider: () => (/* binding */ getProvider)\n/* harmony export */ });\n/**\n * Makes a simple RPC call to a remote Ethereum JSON-RPC provider and passes through the response.\n * No parameter or response validation is done.\n *\n * @param url the URL for the JSON RPC provider\n * @param params the parameters for the JSON-RPC method - refer to\n * https://ethereum.org/en/developers/docs/apis/json-rpc/ for details on RPC methods\n * @returns the `result` field from the JSON-RPC response\n * @example\n * ```ts\n * const provider = 'https://mainnet.infura.io/v3/...'\n * const params = {\n *   method: 'eth_getBlockByNumber',\n *   params: ['latest', false],\n * }\n * const block = await fetchFromProvider(provider, params)\n * ```\n */ const fetchFromProvider = async (url, params)=>{\n    const data = JSON.stringify({\n        method: params.method,\n        params: params.params,\n        jsonrpc: \"2.0\",\n        id: 1\n    });\n    const res = await fetch(url, {\n        headers: {\n            \"content-type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: data\n    });\n    if (!res.ok) {\n        throw new Error(`JSONRpcError: ${JSON.stringify({\n            method: params.method,\n            status: res.status,\n            message: await res.text().catch(()=>{\n                return \"Could not parse error message likely because of a network error\";\n            })\n        }, null, 2)}`);\n    }\n    const json = await res.json();\n    // TODO we should check json.error here\n    return json.result;\n};\n/**\n *\n * @param provider a URL string or {@link EthersProvider}\n * @returns the extracted URL string for the JSON-RPC Provider\n */ const getProvider = (provider)=>{\n    if (typeof provider === \"string\") {\n        return provider;\n    } else if (typeof provider === \"object\" && provider._getConnection !== undefined) {\n        return provider._getConnection().url;\n    } else {\n        throw new Error(\"Must provide valid provider URL or Web3Provider\");\n    }\n}; //# sourceMappingURL=provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztDQWlCQyxHQUNNLE1BQU1BLG9CQUFvQixPQUFPQyxLQUFLQztJQUN6QyxNQUFNQyxPQUFPQyxLQUFLQyxTQUFTLENBQUM7UUFDeEJDLFFBQVFKLE9BQU9JLE1BQU07UUFDckJKLFFBQVFBLE9BQU9BLE1BQU07UUFDckJLLFNBQVM7UUFDVEMsSUFBSTtJQUNSO0lBQ0EsTUFBTUMsTUFBTSxNQUFNQyxNQUFNVCxLQUFLO1FBQ3pCVSxTQUFTO1lBQ0wsZ0JBQWdCO1FBQ3BCO1FBQ0FMLFFBQVE7UUFDUk0sTUFBTVQ7SUFDVjtJQUNBLElBQUksQ0FBQ00sSUFBSUksRUFBRSxFQUFFO1FBQ1QsTUFBTSxJQUFJQyxNQUFNLENBQUMsY0FBYyxFQUFFVixLQUFLQyxTQUFTLENBQUM7WUFDNUNDLFFBQVFKLE9BQU9JLE1BQU07WUFDckJTLFFBQVFOLElBQUlNLE1BQU07WUFDbEJDLFNBQVMsTUFBTVAsSUFBSVEsSUFBSSxHQUFHQyxLQUFLLENBQUM7Z0JBQzVCLE9BQU87WUFDWDtRQUNKLEdBQUcsTUFBTSxHQUFHLENBQUM7SUFDakI7SUFDQSxNQUFNQyxPQUFPLE1BQU1WLElBQUlVLElBQUk7SUFDM0IsdUNBQXVDO0lBQ3ZDLE9BQU9BLEtBQUtDLE1BQU07QUFDdEIsRUFBRTtBQUNGOzs7O0NBSUMsR0FDTSxNQUFNQyxjQUFjLENBQUNDO0lBQ3hCLElBQUksT0FBT0EsYUFBYSxVQUFVO1FBQzlCLE9BQU9BO0lBQ1gsT0FDSyxJQUFJLE9BQU9BLGFBQWEsWUFBWUEsU0FBU0MsY0FBYyxLQUFLQyxXQUFXO1FBQzVFLE9BQU9GLFNBQVNDLGNBQWMsR0FBR3RCLEdBQUc7SUFDeEMsT0FDSztRQUNELE1BQU0sSUFBSWEsTUFBTTtJQUNwQjtBQUNKLEVBQUUsQ0FDRixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xb2duaXRhLy4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vcHJvdmlkZXIuanM/YjVkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1ha2VzIGEgc2ltcGxlIFJQQyBjYWxsIHRvIGEgcmVtb3RlIEV0aGVyZXVtIEpTT04tUlBDIHByb3ZpZGVyIGFuZCBwYXNzZXMgdGhyb3VnaCB0aGUgcmVzcG9uc2UuXG4gKiBObyBwYXJhbWV0ZXIgb3IgcmVzcG9uc2UgdmFsaWRhdGlvbiBpcyBkb25lLlxuICpcbiAqIEBwYXJhbSB1cmwgdGhlIFVSTCBmb3IgdGhlIEpTT04gUlBDIHByb3ZpZGVyXG4gKiBAcGFyYW0gcGFyYW1zIHRoZSBwYXJhbWV0ZXJzIGZvciB0aGUgSlNPTi1SUEMgbWV0aG9kIC0gcmVmZXIgdG9cbiAqIGh0dHBzOi8vZXRoZXJldW0ub3JnL2VuL2RldmVsb3BlcnMvZG9jcy9hcGlzL2pzb24tcnBjLyBmb3IgZGV0YWlscyBvbiBSUEMgbWV0aG9kc1xuICogQHJldHVybnMgdGhlIGByZXN1bHRgIGZpZWxkIGZyb20gdGhlIEpTT04tUlBDIHJlc3BvbnNlXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGNvbnN0IHByb3ZpZGVyID0gJ2h0dHBzOi8vbWFpbm5ldC5pbmZ1cmEuaW8vdjMvLi4uJ1xuICogY29uc3QgcGFyYW1zID0ge1xuICogICBtZXRob2Q6ICdldGhfZ2V0QmxvY2tCeU51bWJlcicsXG4gKiAgIHBhcmFtczogWydsYXRlc3QnLCBmYWxzZV0sXG4gKiB9XG4gKiBjb25zdCBibG9jayA9IGF3YWl0IGZldGNoRnJvbVByb3ZpZGVyKHByb3ZpZGVyLCBwYXJhbXMpXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IGZldGNoRnJvbVByb3ZpZGVyID0gYXN5bmMgKHVybCwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbWV0aG9kOiBwYXJhbXMubWV0aG9kLFxuICAgICAgICBwYXJhbXM6IHBhcmFtcy5wYXJhbXMsXG4gICAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgICBpZDogMSxcbiAgICB9KTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IGRhdGEsXG4gICAgfSk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBKU09OUnBjRXJyb3I6ICR7SlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgbWV0aG9kOiBwYXJhbXMubWV0aG9kLFxuICAgICAgICAgICAgc3RhdHVzOiByZXMuc3RhdHVzLFxuICAgICAgICAgICAgbWVzc2FnZTogYXdhaXQgcmVzLnRleHQoKS5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdDb3VsZCBub3QgcGFyc2UgZXJyb3IgbWVzc2FnZSBsaWtlbHkgYmVjYXVzZSBvZiBhIG5ldHdvcmsgZXJyb3InO1xuICAgICAgICAgICAgfSksXG4gICAgICAgIH0sIG51bGwsIDIpfWApO1xuICAgIH1cbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAvLyBUT0RPIHdlIHNob3VsZCBjaGVjayBqc29uLmVycm9yIGhlcmVcbiAgICByZXR1cm4ganNvbi5yZXN1bHQ7XG59O1xuLyoqXG4gKlxuICogQHBhcmFtIHByb3ZpZGVyIGEgVVJMIHN0cmluZyBvciB7QGxpbmsgRXRoZXJzUHJvdmlkZXJ9XG4gKiBAcmV0dXJucyB0aGUgZXh0cmFjdGVkIFVSTCBzdHJpbmcgZm9yIHRoZSBKU09OLVJQQyBQcm92aWRlclxuICovXG5leHBvcnQgY29uc3QgZ2V0UHJvdmlkZXIgPSAocHJvdmlkZXIpID0+IHtcbiAgICBpZiAodHlwZW9mIHByb3ZpZGVyID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBwcm92aWRlciA9PT0gJ29iamVjdCcgJiYgcHJvdmlkZXIuX2dldENvbm5lY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcHJvdmlkZXIuX2dldENvbm5lY3Rpb24oKS51cmw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSB2YWxpZCBwcm92aWRlciBVUkwgb3IgV2ViM1Byb3ZpZGVyJyk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJmZXRjaEZyb21Qcm92aWRlciIsInVybCIsInBhcmFtcyIsImRhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwibWV0aG9kIiwianNvbnJwYyIsImlkIiwicmVzIiwiZmV0Y2giLCJoZWFkZXJzIiwiYm9keSIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJtZXNzYWdlIiwidGV4dCIsImNhdGNoIiwianNvbiIsInJlc3VsdCIsImdldFByb3ZpZGVyIiwicHJvdmlkZXIiLCJfZ2V0Q29ubmVjdGlvbiIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/requests.js":
/*!************************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/requests.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CLRequest: () => (/* binding */ CLRequest),\n/* harmony export */   CLRequestFactory: () => (/* binding */ CLRequestFactory),\n/* harmony export */   CLRequestType: () => (/* binding */ CLRequestType),\n/* harmony export */   ConsolidationRequest: () => (/* binding */ ConsolidationRequest),\n/* harmony export */   DepositRequest: () => (/* binding */ DepositRequest),\n/* harmony export */   WithdrawalRequest: () => (/* binding */ WithdrawalRequest)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"(ssr)/./node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var ethereum_cryptography_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/utils */ \"(ssr)/./node_modules/ethereum-cryptography/esm/utils.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/constants.js\");\n\n\n\n\nvar CLRequestType;\n(function(CLRequestType) {\n    CLRequestType[CLRequestType[\"Deposit\"] = 0] = \"Deposit\";\n    CLRequestType[CLRequestType[\"Withdrawal\"] = 1] = \"Withdrawal\";\n    CLRequestType[CLRequestType[\"Consolidation\"] = 2] = \"Consolidation\";\n})(CLRequestType || (CLRequestType = {}));\nclass CLRequest {\n    constructor(type){\n        this.type = type;\n    }\n}\nclass DepositRequest extends CLRequest {\n    constructor(pubkey, withdrawalCredentials, amount, signature, index){\n        super(CLRequestType.Deposit);\n        this.pubkey = pubkey;\n        this.withdrawalCredentials = withdrawalCredentials;\n        this.amount = amount;\n        this.signature = signature;\n        this.index = index;\n    }\n    static fromRequestData(depositData) {\n        const { pubkey, withdrawalCredentials, amount, signature, index } = depositData;\n        return new DepositRequest(pubkey, withdrawalCredentials, amount, signature, index);\n    }\n    static fromJSON(jsonData) {\n        const { pubkey, withdrawalCredentials, amount, signature, index } = jsonData;\n        return this.fromRequestData({\n            pubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(pubkey),\n            withdrawalCredentials: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(withdrawalCredentials),\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBigInt)(amount),\n            signature: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(signature),\n            index: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBigInt)(index)\n        });\n    }\n    serialize() {\n        const indexBytes = this.index === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 ? new Uint8Array() : (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bigIntToBytes)(this.index);\n        const amountBytes = this.amount === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 ? new Uint8Array() : (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bigIntToBytes)(this.amount);\n        return (0,ethereum_cryptography_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(Uint8Array.from([\n            this.type\n        ]), _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([\n            this.pubkey,\n            this.withdrawalCredentials,\n            amountBytes,\n            this.signature,\n            indexBytes\n        ]));\n    }\n    toJSON() {\n        return {\n            pubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.pubkey),\n            withdrawalCredentials: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.withdrawalCredentials),\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bigIntToHex)(this.amount),\n            signature: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.signature),\n            index: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bigIntToHex)(this.index)\n        };\n    }\n    static deserialize(bytes) {\n        const [pubkey, withdrawalCredentials, amount, signature, index] = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(bytes.slice(1));\n        return this.fromRequestData({\n            pubkey,\n            withdrawalCredentials,\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(amount),\n            signature,\n            index: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(index)\n        });\n    }\n}\nclass WithdrawalRequest extends CLRequest {\n    constructor(sourceAddress, validatorPubkey, amount){\n        super(CLRequestType.Withdrawal);\n        this.sourceAddress = sourceAddress;\n        this.validatorPubkey = validatorPubkey;\n        this.amount = amount;\n    }\n    static fromRequestData(withdrawalData) {\n        const { sourceAddress, validatorPubkey, amount } = withdrawalData;\n        return new WithdrawalRequest(sourceAddress, validatorPubkey, amount);\n    }\n    static fromJSON(jsonData) {\n        const { sourceAddress, validatorPubkey, amount } = jsonData;\n        return this.fromRequestData({\n            sourceAddress: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(sourceAddress),\n            validatorPubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(validatorPubkey),\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBigInt)(amount)\n        });\n    }\n    serialize() {\n        const amountBytes = this.amount === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 ? new Uint8Array() : (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bigIntToBytes)(this.amount);\n        return (0,ethereum_cryptography_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(Uint8Array.from([\n            this.type\n        ]), _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([\n            this.sourceAddress,\n            this.validatorPubkey,\n            amountBytes\n        ]));\n    }\n    toJSON() {\n        return {\n            sourceAddress: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.sourceAddress),\n            validatorPubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.validatorPubkey),\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bigIntToHex)(this.amount)\n        };\n    }\n    static deserialize(bytes) {\n        const [sourceAddress, validatorPubkey, amount] = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(bytes.slice(1));\n        return this.fromRequestData({\n            sourceAddress,\n            validatorPubkey,\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(amount)\n        });\n    }\n}\nclass ConsolidationRequest extends CLRequest {\n    constructor(sourceAddress, sourcePubkey, targetPubkey){\n        super(CLRequestType.Consolidation);\n        this.sourceAddress = sourceAddress;\n        this.sourcePubkey = sourcePubkey;\n        this.targetPubkey = targetPubkey;\n    }\n    static fromRequestData(consolidationData) {\n        const { sourceAddress, sourcePubkey, targetPubkey } = consolidationData;\n        return new ConsolidationRequest(sourceAddress, sourcePubkey, targetPubkey);\n    }\n    static fromJSON(jsonData) {\n        const { sourceAddress, sourcePubkey, targetPubkey } = jsonData;\n        return this.fromRequestData({\n            sourceAddress: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(sourceAddress),\n            sourcePubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(sourcePubkey),\n            targetPubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(targetPubkey)\n        });\n    }\n    serialize() {\n        return (0,ethereum_cryptography_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(Uint8Array.from([\n            this.type\n        ]), _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([\n            this.sourceAddress,\n            this.sourcePubkey,\n            this.targetPubkey\n        ]));\n    }\n    toJSON() {\n        return {\n            sourceAddress: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.sourceAddress),\n            sourcePubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.sourcePubkey),\n            targetPubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.targetPubkey)\n        };\n    }\n    static deserialize(bytes) {\n        const [sourceAddress, sourcePubkey, targetPubkey] = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(bytes.slice(1));\n        return this.fromRequestData({\n            sourceAddress,\n            sourcePubkey,\n            targetPubkey\n        });\n    }\n}\nclass CLRequestFactory {\n    static fromSerializedRequest(bytes) {\n        switch(bytes[0]){\n            case CLRequestType.Deposit:\n                return DepositRequest.deserialize(bytes);\n            case CLRequestType.Withdrawal:\n                return WithdrawalRequest.deserialize(bytes);\n            case CLRequestType.Consolidation:\n                return ConsolidationRequest.deserialize(bytes);\n            default:\n                throw Error(`Invalid request type=${bytes[0]}`);\n        }\n    }\n} //# sourceMappingURL=requests.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/requests.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/signature.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/signature.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateSigRecovery: () => (/* binding */ calculateSigRecovery),\n/* harmony export */   ecrecover: () => (/* binding */ ecrecover),\n/* harmony export */   ecsign: () => (/* binding */ ecsign),\n/* harmony export */   fromRpcSig: () => (/* binding */ fromRpcSig),\n/* harmony export */   hashPersonalMessage: () => (/* binding */ hashPersonalMessage),\n/* harmony export */   isValidSignature: () => (/* binding */ isValidSignature),\n/* harmony export */   toCompactSig: () => (/* binding */ toCompactSig),\n/* harmony export */   toRpcSig: () => (/* binding */ toRpcSig)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n\n\n\n\n\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */ function ecsign(msgHash, privateKey, chainId) {\n    const sig = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__.secp256k1.sign(msgHash, privateKey);\n    const buf = sig.toCompactRawBytes();\n    const r = buf.slice(0, 32);\n    const s = buf.slice(32, 64);\n    const v = chainId === undefined ? BigInt(sig.recovery + 27) : BigInt(sig.recovery + 35) + BigInt(chainId) * _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2;\n    return {\n        r,\n        s,\n        v\n    };\n}\nfunction calculateSigRecovery(v, chainId) {\n    if (v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1) return v;\n    if (chainId === undefined) {\n        return v - _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_27;\n    }\n    return v - (chainId * _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2 + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || recovery === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1;\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */ const ecrecover = function(msgHash, v, r, s, chainId) {\n    const signature = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(s, 32));\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    const sig = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__.secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery));\n    const senderPubKey = sig.recoverPublicKey(msgHash);\n    return senderPubKey.toRawBytes(false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */ const toRpcSig = function(v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(s, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(v)));\n};\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */ const toCompactSig = function(v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    const ss = Uint8Array.from([\n        ...s\n    ]);\n    if (v > BigInt(28) && v % _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2 === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1 || v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1 || v === BigInt(28)) {\n        ss[0] |= 0x80;\n    }\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(ss, 32)));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */ const fromRpcSig = function(sig) {\n    const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(sig);\n    let r;\n    let s;\n    let v;\n    if (bytes.length >= 65) {\n        r = bytes.subarray(0, 32);\n        s = bytes.subarray(32, 64);\n        v = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(bytes.subarray(64));\n    } else if (bytes.length === 64) {\n        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n        r = bytes.subarray(0, 32);\n        s = bytes.subarray(32, 64);\n        v = BigInt((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToInt)(bytes.subarray(32, 33)) >> 7);\n        s[0] &= 0x7f;\n    } else {\n        throw new Error(\"Invalid signature length\");\n    }\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v = v + _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_27;\n    }\n    return {\n        v,\n        r,\n        s\n    };\n};\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */ const isValidSignature = function(v, r, s, homesteadOrLater = true, chainId) {\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    const rBigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(r);\n    const sBigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(s);\n    if (rBigInt === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || rBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER || sBigInt === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || sBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER) {\n        return false;\n    }\n    if (homesteadOrLater && sBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER_DIV_2) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */ const hashPersonalMessage = function(message) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.assertIsBytes)(message);\n    const prefix = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.utf8ToBytes)(`\\u0019Ethereum Signed Message:\\n${message.length}`);\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)(prefix, message));\n}; //# sourceMappingURL=signature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/types.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/types.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeOutput: () => (/* binding */ TypeOutput),\n/* harmony export */   isNestedUint8Array: () => (/* binding */ isNestedUint8Array),\n/* harmony export */   toType: () => (/* binding */ toType)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\nfunction isNestedUint8Array(value) {\n    if (!Array.isArray(value)) {\n        return false;\n    }\n    for (const item of value){\n        if (Array.isArray(item)) {\n            if (!isNestedUint8Array(item)) {\n                return false;\n            }\n        } else if (!(item instanceof Uint8Array)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Type output options\n */ var TypeOutput;\n(function(TypeOutput) {\n    TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n    TypeOutput[TypeOutput[\"BigInt\"] = 1] = \"BigInt\";\n    TypeOutput[TypeOutput[\"Uint8Array\"] = 2] = \"Uint8Array\";\n    TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput || (TypeOutput = {}));\nfunction toType(input, outputType) {\n    if (input === null) {\n        return null;\n    }\n    if (input === undefined) {\n        return undefined;\n    }\n    if (typeof input === \"string\" && !(0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(input)) {\n        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n    } else if (typeof input === \"number\" && !Number.isSafeInteger(input)) {\n        throw new Error(\"The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)\");\n    }\n    const output = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(input);\n    switch(outputType){\n        case TypeOutput.Uint8Array:\n            return output;\n        case TypeOutput.BigInt:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)(output);\n        case TypeOutput.Number:\n            {\n                const bigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)(output);\n                if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n                    throw new Error(\"The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)\");\n                }\n                return Number(bigInt);\n            }\n        case TypeOutput.PrefixedHexString:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(output);\n        default:\n            throw new Error(\"unknown outputType\");\n    }\n} //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFnRTtBQUNwQjtBQUNyQyxTQUFTSSxtQkFBbUJDLEtBQUs7SUFDcEMsSUFBSSxDQUFDQyxNQUFNQyxPQUFPLENBQUNGLFFBQVE7UUFDdkIsT0FBTztJQUNYO0lBQ0EsS0FBSyxNQUFNRyxRQUFRSCxNQUFPO1FBQ3RCLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBTztZQUNyQixJQUFJLENBQUNKLG1CQUFtQkksT0FBTztnQkFDM0IsT0FBTztZQUNYO1FBQ0osT0FDSyxJQUFJLENBQUVBLENBQUFBLGdCQUFnQkMsVUFBUyxHQUFJO1lBQ3BDLE9BQU87UUFDWDtJQUNKO0lBQ0EsT0FBTztBQUNYO0FBQ0E7O0NBRUMsR0FDTSxJQUFJQyxXQUFXO0FBQ3JCLFVBQVVBLFVBQVU7SUFDakJBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7SUFDdkNBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7SUFDdkNBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUc7SUFDM0NBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsR0FBRztBQUN0RCxHQUFHQSxjQUFlQSxDQUFBQSxhQUFhLENBQUM7QUFDekIsU0FBU0MsT0FBT0MsS0FBSyxFQUFFQyxVQUFVO0lBQ3BDLElBQUlELFVBQVUsTUFBTTtRQUNoQixPQUFPO0lBQ1g7SUFDQSxJQUFJQSxVQUFVRSxXQUFXO1FBQ3JCLE9BQU9BO0lBQ1g7SUFDQSxJQUFJLE9BQU9GLFVBQVUsWUFBWSxDQUFDVCx5REFBV0EsQ0FBQ1MsUUFBUTtRQUNsRCxNQUFNLElBQUlHLE1BQU0sQ0FBQyxtREFBbUQsRUFBRUgsTUFBTSxDQUFDO0lBQ2pGLE9BQ0ssSUFBSSxPQUFPQSxVQUFVLFlBQVksQ0FBQ0ksT0FBT0MsYUFBYSxDQUFDTCxRQUFRO1FBQ2hFLE1BQU0sSUFBSUcsTUFBTTtJQUNwQjtJQUNBLE1BQU1HLFNBQVNoQixrREFBT0EsQ0FBQ1U7SUFDdkIsT0FBUUM7UUFDSixLQUFLSCxXQUFXRCxVQUFVO1lBQ3RCLE9BQU9TO1FBQ1gsS0FBS1IsV0FBV1MsTUFBTTtZQUNsQixPQUFPbkIsd0RBQWFBLENBQUNrQjtRQUN6QixLQUFLUixXQUFXTSxNQUFNO1lBQUU7Z0JBQ3BCLE1BQU1JLFNBQVNwQix3REFBYUEsQ0FBQ2tCO2dCQUM3QixJQUFJRSxTQUFTRCxPQUFPSCxPQUFPSyxnQkFBZ0IsR0FBRztvQkFDMUMsTUFBTSxJQUFJTixNQUFNO2dCQUNwQjtnQkFDQSxPQUFPQyxPQUFPSTtZQUNsQjtRQUNBLEtBQUtWLFdBQVdZLGlCQUFpQjtZQUM3QixPQUFPckIscURBQVVBLENBQUNpQjtRQUN0QjtZQUNJLE1BQU0sSUFBSUgsTUFBTTtJQUN4QjtBQUNKLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcW9nbml0YS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3R5cGVzLmpzP2MzZjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnl0ZXNUb0JpZ0ludCwgYnl0ZXNUb0hleCwgdG9CeXRlcyB9IGZyb20gJy4vYnl0ZXMuanMnO1xuaW1wb3J0IHsgaXNIZXhTdHJpbmcgfSBmcm9tICcuL2ludGVybmFsLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBpc05lc3RlZFVpbnQ4QXJyYXkodmFsdWUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgICAgICAgICBpZiAoIWlzTmVzdGVkVWludDhBcnJheShpdGVtKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghKGl0ZW0gaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBUeXBlIG91dHB1dCBvcHRpb25zXG4gKi9cbmV4cG9ydCB2YXIgVHlwZU91dHB1dDtcbihmdW5jdGlvbiAoVHlwZU91dHB1dCkge1xuICAgIFR5cGVPdXRwdXRbVHlwZU91dHB1dFtcIk51bWJlclwiXSA9IDBdID0gXCJOdW1iZXJcIjtcbiAgICBUeXBlT3V0cHV0W1R5cGVPdXRwdXRbXCJCaWdJbnRcIl0gPSAxXSA9IFwiQmlnSW50XCI7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiVWludDhBcnJheVwiXSA9IDJdID0gXCJVaW50OEFycmF5XCI7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiUHJlZml4ZWRIZXhTdHJpbmdcIl0gPSAzXSA9IFwiUHJlZml4ZWRIZXhTdHJpbmdcIjtcbn0pKFR5cGVPdXRwdXQgfHwgKFR5cGVPdXRwdXQgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIHRvVHlwZShpbnB1dCwgb3V0cHV0VHlwZSkge1xuICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgJiYgIWlzSGV4U3RyaW5nKGlucHV0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgc3RyaW5nIG11c3QgYmUgcHJvdmlkZWQgd2l0aCBhIDB4LXByZWZpeCwgZ2l2ZW46ICR7aW5wdXR9YCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgJiYgIU51bWJlci5pc1NhZmVJbnRlZ2VyKGlucHV0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm92aWRlZCBudW1iZXIgaXMgZ3JlYXRlciB0aGFuIE1BWF9TQUZFX0lOVEVHRVIgKHBsZWFzZSB1c2UgYW4gYWx0ZXJuYXRpdmUgaW5wdXQgdHlwZSknKTtcbiAgICB9XG4gICAgY29uc3Qgb3V0cHV0ID0gdG9CeXRlcyhpbnB1dCk7XG4gICAgc3dpdGNoIChvdXRwdXRUeXBlKSB7XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5VaW50OEFycmF5OlxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgY2FzZSBUeXBlT3V0cHV0LkJpZ0ludDpcbiAgICAgICAgICAgIHJldHVybiBieXRlc1RvQmlnSW50KG91dHB1dCk7XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5OdW1iZXI6IHtcbiAgICAgICAgICAgIGNvbnN0IGJpZ0ludCA9IGJ5dGVzVG9CaWdJbnQob3V0cHV0KTtcbiAgICAgICAgICAgIGlmIChiaWdJbnQgPiBCaWdJbnQoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcHJvdmlkZWQgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiBNQVhfU0FGRV9JTlRFR0VSIChwbGVhc2UgdXNlIGFuIGFsdGVybmF0aXZlIG91dHB1dCB0eXBlKScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcihiaWdJbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5QcmVmaXhlZEhleFN0cmluZzpcbiAgICAgICAgICAgIHJldHVybiBieXRlc1RvSGV4KG91dHB1dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gb3V0cHV0VHlwZScpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJieXRlc1RvQmlnSW50IiwiYnl0ZXNUb0hleCIsInRvQnl0ZXMiLCJpc0hleFN0cmluZyIsImlzTmVzdGVkVWludDhBcnJheSIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5IiwiaXRlbSIsIlVpbnQ4QXJyYXkiLCJUeXBlT3V0cHV0IiwidG9UeXBlIiwiaW5wdXQiLCJvdXRwdXRUeXBlIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJOdW1iZXIiLCJpc1NhZmVJbnRlZ2VyIiwib3V0cHV0IiwiQmlnSW50IiwiYmlnSW50IiwiTUFYX1NBRkVfSU5URUdFUiIsIlByZWZpeGVkSGV4U3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/units.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/units.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GWEI_TO_WEI: () => (/* binding */ GWEI_TO_WEI),\n/* harmony export */   formatBigDecimal: () => (/* binding */ formatBigDecimal)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/constants.js\");\n\n/** Easy conversion from Gwei to wei */ const GWEI_TO_WEI = BigInt(1000000000);\nfunction formatBigDecimal(numerator, denominator, maxDecimalFactor) {\n    if (denominator === _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0) {\n        denominator = _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_1;\n    }\n    const full = numerator / denominator;\n    const fraction = (numerator - full * denominator) * maxDecimalFactor / denominator;\n    // zeros to be added post decimal are number of zeros in maxDecimalFactor - number of digits in fraction\n    const zerosPostDecimal = String(maxDecimalFactor).length - 1 - String(fraction).length;\n    return `${full}.${\"0\".repeat(zerosPostDecimal)}${fraction}`;\n} //# sourceMappingURL=units.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS91bml0cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0Q7QUFDcEQscUNBQXFDLEdBQzlCLE1BQU1FLGNBQWNDLE9BQU8sWUFBWTtBQUN2QyxTQUFTQyxpQkFBaUJDLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxnQkFBZ0I7SUFDckUsSUFBSUQsZ0JBQWdCTixtREFBUUEsRUFBRTtRQUMxQk0sY0FBY0wsbURBQVFBO0lBQzFCO0lBQ0EsTUFBTU8sT0FBT0gsWUFBWUM7SUFDekIsTUFBTUcsV0FBVyxDQUFFSixZQUFZRyxPQUFPRixXQUFVLElBQUtDLG1CQUFvQkQ7SUFDekUsd0dBQXdHO0lBQ3hHLE1BQU1JLG1CQUFtQkMsT0FBT0osa0JBQWtCSyxNQUFNLEdBQUcsSUFBSUQsT0FBT0YsVUFBVUcsTUFBTTtJQUN0RixPQUFPLENBQUMsRUFBRUosS0FBSyxDQUFDLEVBQUUsSUFBSUssTUFBTSxDQUFDSCxrQkFBa0IsRUFBRUQsU0FBUyxDQUFDO0FBQy9ELEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcW9nbml0YS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3VuaXRzLmpzPzE2YzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQklHSU5UXzAsIEJJR0lOVF8xIH0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuLyoqIEVhc3kgY29udmVyc2lvbiBmcm9tIEd3ZWkgdG8gd2VpICovXG5leHBvcnQgY29uc3QgR1dFSV9UT19XRUkgPSBCaWdJbnQoMTAwMDAwMDAwMCk7XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0QmlnRGVjaW1hbChudW1lcmF0b3IsIGRlbm9taW5hdG9yLCBtYXhEZWNpbWFsRmFjdG9yKSB7XG4gICAgaWYgKGRlbm9taW5hdG9yID09PSBCSUdJTlRfMCkge1xuICAgICAgICBkZW5vbWluYXRvciA9IEJJR0lOVF8xO1xuICAgIH1cbiAgICBjb25zdCBmdWxsID0gbnVtZXJhdG9yIC8gZGVub21pbmF0b3I7XG4gICAgY29uc3QgZnJhY3Rpb24gPSAoKG51bWVyYXRvciAtIGZ1bGwgKiBkZW5vbWluYXRvcikgKiBtYXhEZWNpbWFsRmFjdG9yKSAvIGRlbm9taW5hdG9yO1xuICAgIC8vIHplcm9zIHRvIGJlIGFkZGVkIHBvc3QgZGVjaW1hbCBhcmUgbnVtYmVyIG9mIHplcm9zIGluIG1heERlY2ltYWxGYWN0b3IgLSBudW1iZXIgb2YgZGlnaXRzIGluIGZyYWN0aW9uXG4gICAgY29uc3QgemVyb3NQb3N0RGVjaW1hbCA9IFN0cmluZyhtYXhEZWNpbWFsRmFjdG9yKS5sZW5ndGggLSAxIC0gU3RyaW5nKGZyYWN0aW9uKS5sZW5ndGg7XG4gICAgcmV0dXJuIGAke2Z1bGx9LiR7JzAnLnJlcGVhdCh6ZXJvc1Bvc3REZWNpbWFsKX0ke2ZyYWN0aW9ufWA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bml0cy5qcy5tYXAiXSwibmFtZXMiOlsiQklHSU5UXzAiLCJCSUdJTlRfMSIsIkdXRUlfVE9fV0VJIiwiQmlnSW50IiwiZm9ybWF0QmlnRGVjaW1hbCIsIm51bWVyYXRvciIsImRlbm9taW5hdG9yIiwibWF4RGVjaW1hbEZhY3RvciIsImZ1bGwiLCJmcmFjdGlvbiIsInplcm9zUG9zdERlY2ltYWwiLCJTdHJpbmciLCJsZW5ndGgiLCJyZXBlYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/units.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/verkle.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/verkle.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERKLE_BALANCE_LEAF_KEY: () => (/* binding */ VERKLE_BALANCE_LEAF_KEY),\n/* harmony export */   VERKLE_CODE_HASH_LEAF_KEY: () => (/* binding */ VERKLE_CODE_HASH_LEAF_KEY),\n/* harmony export */   VERKLE_CODE_OFFSET: () => (/* binding */ VERKLE_CODE_OFFSET),\n/* harmony export */   VERKLE_CODE_SIZE_LEAF_KEY: () => (/* binding */ VERKLE_CODE_SIZE_LEAF_KEY),\n/* harmony export */   VERKLE_HEADER_STORAGE_OFFSET: () => (/* binding */ VERKLE_HEADER_STORAGE_OFFSET),\n/* harmony export */   VERKLE_MAIN_STORAGE_OFFSET: () => (/* binding */ VERKLE_MAIN_STORAGE_OFFSET),\n/* harmony export */   VERKLE_NODE_WIDTH: () => (/* binding */ VERKLE_NODE_WIDTH),\n/* harmony export */   VERKLE_NONCE_LEAF_KEY: () => (/* binding */ VERKLE_NONCE_LEAF_KEY),\n/* harmony export */   VERKLE_VERSION_LEAF_KEY: () => (/* binding */ VERKLE_VERSION_LEAF_KEY),\n/* harmony export */   VerkleLeafType: () => (/* binding */ VerkleLeafType),\n/* harmony export */   chunkifyCode: () => (/* binding */ chunkifyCode),\n/* harmony export */   getVerkleKey: () => (/* binding */ getVerkleKey),\n/* harmony export */   getVerkleStem: () => (/* binding */ getVerkleStem),\n/* harmony export */   getVerkleTreeIndexesForStorageSlot: () => (/* binding */ getVerkleTreeIndexesForStorageSlot),\n/* harmony export */   getVerkleTreeIndicesForCodeChunk: () => (/* binding */ getVerkleTreeIndicesForCodeChunk),\n/* harmony export */   getVerkleTreeKeyForCodeChunk: () => (/* binding */ getVerkleTreeKeyForCodeChunk),\n/* harmony export */   getVerkleTreeKeyForStorageSlot: () => (/* binding */ getVerkleTreeKeyForStorageSlot),\n/* harmony export */   verifyVerkleProof: () => (/* binding */ verifyVerkleProof)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\n/**\n * @dev Returns the 31-bytes verkle tree stem for a given address and tree index.\n * @dev Assumes that the verkle node width = 256\n * @param ffi The verkle ffi object from verkle-crypotography-wasm.\n * @param address The address to generate the tree key for.\n * @param treeIndex The index of the tree to generate the key for. Defaults to 0.\n * @return The 31-bytes verkle tree stem as a Uint8Array.\n */ function getVerkleStem(ffi, address, treeIndex = 0) {\n    const address32 = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.setLengthLeft)(address.toBytes(), 32);\n    let treeIndexBytes;\n    if (typeof treeIndex === \"number\") {\n        treeIndexBytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.setLengthRight)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.int32ToBytes)(Number(treeIndex), true), 32);\n    } else {\n        treeIndexBytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.setLengthRight)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bigIntToBytes)(BigInt(treeIndex), true).slice(0, 32), 32);\n    }\n    const treeStem = ffi.getTreeKey(address32, treeIndexBytes, 0).slice(0, 31);\n    return treeStem;\n}\n/**\n * Verifies that the executionWitness is valid for the given prestateRoot.\n * @param ffi The verkle ffi object from verkle-crypotography-wasm.\n * @param prestateRoot The prestateRoot matching the executionWitness.\n * @param executionWitness The verkle execution witness.\n * @returns {boolean} Whether or not the executionWitness belongs to the prestateRoot.\n */ function verifyVerkleProof(ffi, prestateRoot, executionWitness) {\n    return ffi.verifyExecutionWitnessPreState((0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(prestateRoot), JSON.stringify(executionWitness));\n}\nvar VerkleLeafType;\n(function(VerkleLeafType) {\n    VerkleLeafType[VerkleLeafType[\"Version\"] = 0] = \"Version\";\n    VerkleLeafType[VerkleLeafType[\"Balance\"] = 1] = \"Balance\";\n    VerkleLeafType[VerkleLeafType[\"Nonce\"] = 2] = \"Nonce\";\n    VerkleLeafType[VerkleLeafType[\"CodeHash\"] = 3] = \"CodeHash\";\n    VerkleLeafType[VerkleLeafType[\"CodeSize\"] = 4] = \"CodeSize\";\n})(VerkleLeafType || (VerkleLeafType = {}));\nconst VERKLE_VERSION_LEAF_KEY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.intToBytes)(VerkleLeafType.Version);\nconst VERKLE_BALANCE_LEAF_KEY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.intToBytes)(VerkleLeafType.Balance);\nconst VERKLE_NONCE_LEAF_KEY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.intToBytes)(VerkleLeafType.Nonce);\nconst VERKLE_CODE_HASH_LEAF_KEY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.intToBytes)(VerkleLeafType.CodeHash);\nconst VERKLE_CODE_SIZE_LEAF_KEY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.intToBytes)(VerkleLeafType.CodeSize);\nconst VERKLE_HEADER_STORAGE_OFFSET = 64;\nconst VERKLE_CODE_OFFSET = 128;\nconst VERKLE_NODE_WIDTH = 256;\nconst VERKLE_MAIN_STORAGE_OFFSET = BigInt(256) ** BigInt(31);\n/**\n * @dev Returns the tree key for a given verkle tree stem, and sub index.\n * @dev Assumes that the verkle node width = 256\n * @param stem The 31-bytes verkle tree stem as a Uint8Array.\n * @param subIndex The sub index of the tree to generate the key for as a Uint8Array.\n * @return The tree key as a Uint8Array.\n */ const getVerkleKey = (stem, leaf)=>{\n    switch(leaf){\n        case VerkleLeafType.Version:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(stem, VERKLE_VERSION_LEAF_KEY);\n        case VerkleLeafType.Balance:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(stem, VERKLE_BALANCE_LEAF_KEY);\n        case VerkleLeafType.Nonce:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(stem, VERKLE_NONCE_LEAF_KEY);\n        case VerkleLeafType.CodeHash:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(stem, VERKLE_CODE_HASH_LEAF_KEY);\n        case VerkleLeafType.CodeSize:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(stem, VERKLE_CODE_SIZE_LEAF_KEY);\n        default:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(stem, leaf);\n    }\n};\nfunction getVerkleTreeIndexesForStorageSlot(storageKey) {\n    let position;\n    if (storageKey < VERKLE_CODE_OFFSET - VERKLE_HEADER_STORAGE_OFFSET) {\n        position = BigInt(VERKLE_HEADER_STORAGE_OFFSET) + storageKey;\n    } else {\n        position = VERKLE_MAIN_STORAGE_OFFSET + storageKey;\n    }\n    const treeIndex = position / BigInt(VERKLE_NODE_WIDTH);\n    const subIndex = Number(position % BigInt(VERKLE_NODE_WIDTH));\n    return {\n        treeIndex,\n        subIndex\n    };\n}\nfunction getVerkleTreeIndicesForCodeChunk(chunkId) {\n    const treeIndex = Math.floor((VERKLE_CODE_OFFSET + chunkId) / VERKLE_NODE_WIDTH);\n    const subIndex = (VERKLE_CODE_OFFSET + chunkId) % VERKLE_NODE_WIDTH;\n    return {\n        treeIndex,\n        subIndex\n    };\n}\nconst getVerkleTreeKeyForCodeChunk = async (address, chunkId, verkleCrypto)=>{\n    const { treeIndex, subIndex } = getVerkleTreeIndicesForCodeChunk(chunkId);\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(getVerkleStem(verkleCrypto, address, treeIndex), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(subIndex));\n};\nconst chunkifyCode = (code)=>{\n    // Pad code to multiple of 31 bytes\n    if (code.length % 31 !== 0) {\n        const paddingLength = 31 - code.length % 31;\n        code = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.setLengthRight)(code, code.length + paddingLength);\n    }\n    throw new Error(\"Not implemented\");\n};\nconst getVerkleTreeKeyForStorageSlot = async (address, storageKey, verkleCrypto)=>{\n    const { treeIndex, subIndex } = getVerkleTreeIndexesForStorageSlot(storageKey);\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(getVerkleStem(verkleCrypto, address, treeIndex), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(subIndex));\n}; //# sourceMappingURL=verkle.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/verkle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/esm/withdrawal.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/esm/withdrawal.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Withdrawal: () => (/* binding */ Withdrawal)\n/* harmony export */ });\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./address.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/address.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@ethereumjs/util/dist/esm/types.js\");\n\n\n\n\n/**\n * Representation of EIP-4895 withdrawal data\n */ class Withdrawal {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating a Withdrawal object from varying data types.\n     * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot\n     */ constructor(index, validatorIndex, address, /**\n     * withdrawal amount in Gwei to match the CL repesentation and eventually ssz withdrawalsRoot\n     */ amount){\n        this.index = index;\n        this.validatorIndex = validatorIndex;\n        this.address = address;\n        this.amount = amount;\n    }\n    static fromWithdrawalData(withdrawalData) {\n        const { index: indexData, validatorIndex: validatorIndexData, address: addressData, amount: amountData } = withdrawalData;\n        const index = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(indexData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        const validatorIndex = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndexData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        const address = addressData instanceof _address_js__WEBPACK_IMPORTED_MODULE_0__.Address ? addressData : new _address_js__WEBPACK_IMPORTED_MODULE_0__.Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(addressData));\n        const amount = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amountData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        return new Withdrawal(index, validatorIndex, address, amount);\n    }\n    static fromValuesArray(withdrawalArray) {\n        if (withdrawalArray.length !== 4) {\n            throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);\n        }\n        const [index, validatorIndex, address, amount] = withdrawalArray;\n        return Withdrawal.fromWithdrawalData({\n            index,\n            validatorIndex,\n            address,\n            amount\n        });\n    }\n    /**\n     * Convert a withdrawal to a buffer array\n     * @param withdrawal the withdrawal to convert\n     * @returns buffer array of the withdrawal\n     */ static toBytesArray(withdrawal) {\n        const { index, validatorIndex, address, amount } = withdrawal;\n        const indexBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(index, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0 ? new Uint8Array() : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(index, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const validatorIndexBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndex, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0 ? new Uint8Array() : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndex, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const addressBytes = address instanceof _address_js__WEBPACK_IMPORTED_MODULE_0__.Address ? address.bytes : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(address, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const amountBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amount, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0 ? new Uint8Array() : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amount, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        return [\n            indexBytes,\n            validatorIndexBytes,\n            addressBytes,\n            amountBytes\n        ];\n    }\n    raw() {\n        return Withdrawal.toBytesArray(this);\n    }\n    toValue() {\n        return {\n            index: this.index,\n            validatorIndex: this.validatorIndex,\n            address: this.address.bytes,\n            amount: this.amount\n        };\n    }\n    toJSON() {\n        return {\n            index: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.index),\n            validatorIndex: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.validatorIndex),\n            address: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.address.bytes),\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.amount)\n        };\n    }\n} //# sourceMappingURL=withdrawal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/esm/withdrawal.js\n");

/***/ })

};
;